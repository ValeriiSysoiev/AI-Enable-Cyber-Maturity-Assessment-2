From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Valentyn Sysoiev <svvval@Valentyns-MacBook-Air.local>
Date: Tue, 19 Aug 2025 14:48:15 -0600
Subject: [PATCH 90/90] docs: add PLAYBOOK + agent-mode header (bounded, agent
 logs)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Added playbook documentation and agent mode header for multi-agent orchestration:

- docs/PLAYBOOK.md: Complete team playbook for autonomous sprint execution
- docs/prompts/agent_mode_header.txt: Header template for agent orchestration
- README.md: Added "Playbook & Agent Mode" section with links

Features sprint execution protocol, agent roster, quality gates, and
security policies. Enables bounded agent orchestration with logging.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

diff --git a/README.md b/README.md
index ad69e947636e52b9dd15932d3ff0791f69eb3376..96b53892f69e4378cf8052d029ce36e7e62f3402 100644
--- a/README.md
+++ b/README.md
@@ -582,6 +582,13 @@ Deploy to a staging environment for testing:
 
 ---
 
+## Playbook & Agent Mode
+
+- Read the playbook: [`docs/PLAYBOOK.md`](docs/PLAYBOOK.md)  
+- Prepend this header to any Claude Code task to enforce agents and RunCards: [`docs/prompts/agent_mode_header.txt`](docs/prompts/agent_mode_header.txt)
+
+---
+
 ## Build & Deploy via ACR Tasks (no Docker Desktop)
 
 This section describes how to build container images using Azure Container Registry (ACR) Tasks, eliminating the need for Docker Desktop.
diff --git a/docs/PLAYBOOK.md b/docs/PLAYBOOK.md
new file mode 100644
index 0000000000000000000000000000000000000000..5bff9c9f7faab2f1ffbc1dfad047a34779b8aa54
--- /dev/null
+++ b/docs/PLAYBOOK.md
@@ -0,0 +1,66 @@
+# Team Playbook â€” Sprint Execution (Autonomous Mode) v1.1
+
+## 1) Purpose
+Unify planning and execution so the Project Conductor (Claude Code) can run a sprint end-to-end in **Autonomous Mode**: understand scope â†’ plan tasks â†’ coordinate sub-agents (backend, frontend, infra, security, QA) â†’ open small PRs â†’ land tests â†’ pass demo.
+
+## 2) Roles & RACI (execution-focused)
+- **Product Owner (PO)** â€” vision/scope/acceptance, secrets/config provisioning. Approves sprint demo.
+- **Project Conductor (Claude Code)** â€” Planner+Executor: discover repo, WBS, create branches, drive small PRs (<300 LOC) with tests, keep CI green, post single summary + RunCard.
+- **Frontend** â€” Next.js/SSR route guards, pages, a11y, Playwright e2e.
+- **Backend/Orchestrator** â€” API/RBAC/integration; unit/integration tests.
+- **Infra & AzureOps** â€” IaC/workflows, OIDC, health/readyz, Verify Live.
+- **Security Reviewer** â€” authN/Z, CORS/CSRF, headers (CSP), secrets; CI gates; SECURITY.md.
+- **Test & Release** â€” CI green, Verify Live wiring, artifacts, release notes.
+- **Docs/ADR** â€” ADRs, runbooks, summaries, rollback notes.
+- **QA (CodeRabbit)** â€” PR quality, a11y/test completeness, <300 LOC enforcement.
+
+## 3) Prompt types & when to use
+- **Master Sprint Execution Prompt (primary)** â€” plan + execute a sprint without step-by-step confirmations (bounded).
+- **Role micro-prompts (fallback)** â€” deep dive for a specific sub-agent (backend/frontend/infra/security/QA).
+
+## 4) Sprint protocol (default)
+1) **Preflight** (discovery, env, guardrails)  
+2) **Branch & Issues** (WBS, small PRs)  
+3) **Obs-first** (health/readyz, logging, correlation IDs)  
+4) **Business logic** (backend/frontend)  
+5) **Tests & CI** (unit/integration/e2e)  
+6) **Verify Live** (bounded, fail-fast)  
+7) **Docs** (ADRs/runbooks), **RunCard**, single summary
+
+## 5) Quality gates (non-negotiable)
+- PRs **< 300 LOC**, with tests/screenshots/rollback notes  
+- Conventional commits; CodeRabbit approval required  
+- Security: CORS allowlist, CSRF on callbacks, security headers (CSP), no secrets in code  
+- A11y: basic checks on critical screens  
+- Observability: every exercised response echoes `X-Correlation-ID`; structured logs
+
+## 6) Secrets & config policy
+No plaintext secrets in repo/CI. Use `.env.example` and Key Vault/Managed Identity in cloud. Mocks for CI.
+
+## 7) Blockers & escalation
+**Proceed by default.** Pause only for missing cloud IDs/permissions that block runtime auth, repo permission errors, or CI environment limits. Post a short "PO needed" list.
+
+## 8) Sprint deliverables (definition of done)
+Working feature increments with tests, CI green, **Verify Live** passing, updated docs, and a concise sprint summary + RunCard.
+
+## 9) Master Sprint Execution Prompt (template)
+**SYSTEM ROLE:** Project Conductor (Planner+Executor) for **[Release] / [Sprint]**  
+**MODE:** Autonomous. Do **not** ask to proceed at each step; continue until sprint ACs pass or a blocking secret/config is missing.
+
+**CONTEXT**  
+- North Star, repo root, sprint scope, working agreements (PR <300 LOC, tests, no secrets, a11y, CI green)
+
+**PHASE 0 â€” DISCOVERY** (repo tree, stacks)  
+**PHASE 1 â€” BRANCH & ISSUES**  
+**PHASE 2+ â€” IMPLEMENTATION PRs** (obs â†’ backend â†’ frontend â†’ coverage)  
+**ACROSS PRs** (tests, screenshots/logs, rollback, conventional commits, CodeRabbit)  
+**BLOCKERS POLICY** (list PO items)  
+**OUTPUTS** (WBS, PR links, test matrix, Verify output, blockers)
+
+## 10) Agent roster & ops agents
+- Project Conductor, Planner, Frontend, Backend/Orchestrator, Infra & AzureOps, Security Reviewer, Test & Release, Docs/ADR, QA (CodeRabbit)
+- Ops/Deployment: InfraOps, WebPackager, AppServiceConfigurator, Deployer, LogDoctor, VerifierQA, DocsADR
+- API/ACA cutover: GHCR Builder, ACAProvisioner/ACAConfig, CosmosOps, WebOps, SeedOps
+
+## 11) Agent-mode header (quick start)
+See: `docs/prompts/agent_mode_header.txt` to enforce agent traces and RunCards on any task.
\ No newline at end of file
diff --git a/docs/prompts/agent_mode_header.txt b/docs/prompts/agent_mode_header.txt
new file mode 100644
index 0000000000000000000000000000000000000000..ed16e4bf5d6effc29cb2660493916f6dbea8fe38
--- /dev/null
+++ b/docs/prompts/agent_mode_header.txt
@@ -0,0 +1,8 @@
+SYSTEM ROLE: Project Conductor â€” Multi-Agent Orchestration (Playbook)
+MODE: SAFE + BOUNDED. No infinite loops. MAX_CYCLES=3/4.
+
+REQUIREMENTS:
+- Spin up agents appropriate to the task (e.g., InfraOps, WebPackager, AppServiceConfigurator, Deployer, LogDoctor, VerifierQA, DocsADR).
+- Write per-agent logs to logs/agents/*.log.
+- Produce a RunCard JSON for the operation in logs/final/.
+- Return a single final summary and paste any key summary (bring-up/GA gate) in markdown.
\ No newline at end of file
