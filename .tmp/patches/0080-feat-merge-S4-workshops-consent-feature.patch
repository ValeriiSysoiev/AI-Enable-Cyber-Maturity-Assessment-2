From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Valerii Sysoiev <valsysoiev@gmail.com>
Date: Mon, 18 Aug 2025 16:26:53 -0600
Subject: [PATCH 80/90] feat: merge S4 workshops consent feature
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- Add Workshop, WorkshopAttendee, ConsentRecord models
- Add workshops router for consent management
- Integrate Cosmos DB workshop container support
- Enable consent recording before workshop sessions
- Merge all S4 features: Service Bus, CSF, Workshops

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

diff --git a/RELEASE_NOTES_v0.1.0-rc1.md b/RELEASE_NOTES_v0.1.0-rc1.md
new file mode 100644
index 0000000000000000000000000000000000000000..16ffe38c54c2ffd438e4eb9f4b042ce30cff618f
--- /dev/null
+++ b/RELEASE_NOTES_v0.1.0-rc1.md
@@ -0,0 +1,74 @@
+# Release Notes - v0.1.0-rc1
+
+## Overview
+This release candidate introduces comprehensive evidence management capabilities, enhanced monitoring infrastructure, and improved deployment reliability for the AI-Enable Cyber Maturity Assessment platform.
+
+## New Features
+
+### Evidence Management System
+- **Evidence Links API** - Complete S3-backed evidence management system with secure upload, retrieval, and lifecycle management capabilities
+- **Evidence Upload Flow** - Instant upload experience with real-time progress tracking and link actions for streamlined user workflows
+- **S3 Integration** - Full integration with AWS S3 for scalable and secure evidence storage
+
+## Improvements
+
+### User Experience
+- **Evidence Page Polish** - Enhanced UI with improved accessibility, instant upload feedback, and intuitive link management actions
+- **Accessibility Enhancements** - Improved keyboard navigation and screen reader support for evidence management interfaces
+
+### Deployment & Operations
+- **Verify Live Script Upgrade** - Enhanced verification scripts with bounded health checks and intelligent retry logic for improved reliability
+- **Safe Bash Library** - Production-ready bash utilities featuring bounded execution and exponential backoff for resilient operations
+- **CI Staging Deploy** - Automated staging deployments with OIDC authentication and timeout protection for secure CI/CD workflows
+
+## Infrastructure
+
+### Azure Platform
+- **Azure Providers Ensure** - Idempotent resource group creation and provider registration for consistent Azure deployments
+- **Application Insights Setup** - Comprehensive monitoring with Log Analytics workspace integration for enhanced observability
+
+### Monitoring & Observability
+- **Log Analytics Integration** - Centralized logging and monitoring through Azure Log Analytics workspace
+- **Application Insights** - Real-time application performance monitoring and diagnostics
+
+## Documentation
+
+### Technical Documentation
+- **S3 Documentation Closeout** - Complete documentation package including:
+  - Architecture Decision Records (ADR) for S3 integration design choices
+  - Security guidelines for evidence handling and storage
+  - Deployment guides for S3 configuration and management
+
+## Technical Details
+
+### Dependencies
+- AWS S3 SDK integration for evidence storage
+- Azure Application Insights SDK for monitoring
+- Enhanced bash scripting utilities for operational tasks
+
+### Security Enhancements
+- Secure evidence upload with pre-signed URLs
+- OIDC authentication for CI/CD pipelines
+- Bounded execution controls for operational scripts
+
+### Performance Improvements
+- Exponential backoff strategies for API retry logic
+- Optimized evidence upload flow with parallel processing
+- Efficient health check mechanisms with configurable timeouts
+
+## Known Issues
+- None identified in this release candidate
+
+## Migration Notes
+- No breaking changes from previous versions
+- S3 bucket configuration required for evidence management features
+- Azure Application Insights workspace setup needed for monitoring capabilities
+
+## Contributors
+This release includes contributions from the development team working on evidence management, infrastructure automation, and platform reliability improvements.
+
+---
+
+*Release Date: TBD*  
+*Version: 0.1.0-rc1*  
+*Status: Release Candidate*
\ No newline at end of file
diff --git a/app/api/main.py b/app/api/main.py
index a8edfc5634195c9f8057d47dbc39ecd636a7e435..a18945d86edbb166d2f8f6310bcdcce5dcec9077 100644
--- a/app/api/main.py
+++ b/app/api/main.py
@@ -14,7 +14,7 @@ from .db import create_db_and_tables, get_session
 from .models import Assessment, Answer
 from .schemas import AssessmentCreate, AssessmentResponse, AnswerUpsert, ScoreResponse, PillarScore
 from .scoring import compute_scores
-from .routes import assessments as assessments_router, orchestrations as orchestrations_router, engagements as engagements_router, documents, summary, presets as presets_router, version as version_router, admin_auth as admin_auth_router, gdpr as gdpr_router, admin_settings as admin_settings_router, evidence as evidence_router, csf as csf_router
+from .routes import assessments as assessments_router, orchestrations as orchestrations_router, engagements as engagements_router, documents, summary, presets as presets_router, version as version_router, admin_auth as admin_auth_router, gdpr as gdpr_router, admin_settings as admin_settings_router, evidence as evidence_router, csf as csf_router, workshops as workshops_router
 from domain.repository import InMemoryRepository
 from domain.file_repo import FileRepository
 from ai.llm import LLMClient
@@ -284,6 +284,7 @@ app.include_router(gdpr_router.router)
 app.include_router(admin_settings_router.router)
 app.include_router(evidence_router.router)
 app.include_router(csf_router.router)
+app.include_router(workshops_router.router)
 
 def load_preset(preset_id: str) -> dict:
     # Use new preset service for consistency
diff --git a/app/api/routes/workshops.py b/app/api/routes/workshops.py
new file mode 100644
index 0000000000000000000000000000000000000000..1583ff5f40e4e862103c18e5921da82ea0e37c1c
--- /dev/null
+++ b/app/api/routes/workshops.py
@@ -0,0 +1,377 @@
+"""Workshop API Routes"""
+
+import logging
+from datetime import datetime, timezone
+from typing import Dict
+
+from fastapi import APIRouter, Depends, HTTPException, Query, Request
+
+from domain.models import Workshop, WorkshopAttendee, ConsentRecord
+from repos.cosmos_repository import CosmosRepository
+from services.audit import create_audit_service
+from util.logging import get_correlation_id
+from ..security import current_context, require_member
+from ..schemas.workshop import (
+    WorkshopCreateRequest,
+    WorkshopResponse,
+    ConsentRequest,
+    WorkshopListResponse,
+    StartWorkshopResponse
+)
+
+router = APIRouter(prefix="/api/v1/workshops", tags=["workshops"])
+logger = logging.getLogger(__name__)
+
+
+def get_repo(request: Request) -> CosmosRepository:
+    """Get repository instance from app state"""
+    return request.app.state.repo
+
+
+@router.post("", response_model=WorkshopResponse)
+async def create_workshop(
+    payload: WorkshopCreateRequest,
+    repo: CosmosRepository = Depends(get_repo),
+    ctx: Dict[str, str] = Depends(current_context)
+):
+    """
+    Create a new workshop
+    Requires engagement membership
+    """
+    correlation_id = get_correlation_id()
+    
+    try:
+        # Verify user has access to the engagement
+        require_member(repo, ctx, "member")
+        
+        # Create attendees
+        attendees = []
+        for attendee_req in payload.attendees:
+            attendee = WorkshopAttendee(
+                user_id=attendee_req.user_id,
+                email=attendee_req.email,
+                role=attendee_req.role
+            )
+            attendees.append(attendee)
+        
+        # Create workshop
+        workshop = Workshop(
+            engagement_id=payload.engagement_id,
+            title=payload.title,
+            start_ts=payload.start_ts,
+            attendees=attendees,
+            created_by=ctx["user_email"]
+        )
+        
+        # Store in repository
+        created_workshop = await repo.create_workshop(workshop)
+        
+        # Audit log
+        audit_service = create_audit_service(repo)
+        await audit_service.log_audit_event(
+            action_type="data_modification",
+            user_email=ctx["user_email"],
+            action_description=f"Created workshop: {created_workshop.title}",
+            engagement_id=created_workshop.engagement_id,
+            resource_type="workshop",
+            resource_id=created_workshop.id,
+            correlation_id=correlation_id
+        )
+        
+        logger.info(
+            f"Workshop created successfully",
+            extra={
+                "correlation_id": correlation_id,
+                "workshop_id": created_workshop.id,
+                "engagement_id": created_workshop.engagement_id,
+                "created_by": ctx["user_email"],
+                "attendee_count": len(created_workshop.attendees)
+            }
+        )
+        
+        # Convert to response model
+        return _workshop_to_response(created_workshop)
+        
+    except HTTPException:
+        raise
+    except Exception as e:
+        logger.error(
+            f"Failed to create workshop: {str(e)}",
+            extra={
+                "correlation_id": correlation_id,
+                "engagement_id": payload.engagement_id,
+                "user_email": ctx["user_email"],
+                "error": str(e)
+            }
+        )
+        raise HTTPException(500, f"Failed to create workshop: {str(e)}")
+
+
+@router.post("/{workshop_id}/consent", response_model=WorkshopResponse)
+async def give_consent(
+    workshop_id: str,
+    payload: ConsentRequest,
+    repo: CosmosRepository = Depends(get_repo),
+    ctx: Dict[str, str] = Depends(current_context)
+):
+    """
+    Give consent for workshop attendance
+    Requires engagement membership
+    """
+    correlation_id = get_correlation_id()
+    
+    try:
+        # Verify user has access to the engagement
+        require_member(repo, ctx, "member")
+        
+        # Create consent record
+        consent = ConsentRecord(
+            by=ctx["user_email"],
+            user_id=ctx["user_email"],  # Using email as user_id for now
+            timestamp=datetime.now(timezone.utc)
+        )
+        
+        # Update workshop consent
+        updated_workshop = await repo.update_workshop_consent(
+            workshop_id=workshop_id,
+            engagement_id=ctx["engagement_id"],
+            attendee_id=payload.attendee_id,
+            consent=consent
+        )
+        
+        # Audit log
+        audit_service = create_audit_service(repo)
+        await audit_service.log_audit_event(
+            action_type="data_modification",
+            user_email=ctx["user_email"],
+            action_description=f"Gave consent for workshop: {updated_workshop.title}",
+            engagement_id=updated_workshop.engagement_id,
+            resource_type="workshop",
+            resource_id=updated_workshop.id,
+            correlation_id=correlation_id
+        )
+        
+        logger.info(
+            f"Workshop consent given",
+            extra={
+                "correlation_id": correlation_id,
+                "workshop_id": workshop_id,
+                "attendee_id": payload.attendee_id,
+                "user_email": ctx["user_email"]
+            }
+        )
+        
+        # Convert to response model
+        return _workshop_to_response(updated_workshop)
+        
+    except HTTPException:
+        raise
+    except ValueError as e:
+        logger.warning(
+            f"Invalid consent request: {str(e)}",
+            extra={
+                "correlation_id": correlation_id,
+                "workshop_id": workshop_id,
+                "attendee_id": payload.attendee_id,
+                "user_email": ctx["user_email"]
+            }
+        )
+        raise HTTPException(400, str(e))
+    except Exception as e:
+        logger.error(
+            f"Failed to give consent: {str(e)}",
+            extra={
+                "correlation_id": correlation_id,
+                "workshop_id": workshop_id,
+                "attendee_id": payload.attendee_id,
+                "user_email": ctx["user_email"],
+                "error": str(e)
+            }
+        )
+        raise HTTPException(500, f"Failed to give consent: {str(e)}")
+
+
+@router.post("/{workshop_id}/start", response_model=StartWorkshopResponse)
+async def start_workshop(
+    workshop_id: str,
+    repo: CosmosRepository = Depends(get_repo),
+    ctx: Dict[str, str] = Depends(current_context)
+):
+    """
+    Start a workshop (requires all attendee consent)
+    Requires lead role in engagement
+    """
+    correlation_id = get_correlation_id()
+    
+    try:
+        # Verify user has lead access to the engagement
+        require_member(repo, ctx, "lead")
+        
+        # Start the workshop
+        started_workshop = await repo.start_workshop(
+            workshop_id=workshop_id,
+            engagement_id=ctx["engagement_id"]
+        )
+        
+        # Audit log
+        audit_service = create_audit_service(repo)
+        await audit_service.log_audit_event(
+            action_type="data_modification",
+            user_email=ctx["user_email"],
+            action_description=f"Started workshop: {started_workshop.title}",
+            engagement_id=started_workshop.engagement_id,
+            resource_type="workshop",
+            resource_id=started_workshop.id,
+            correlation_id=correlation_id
+        )
+        
+        logger.info(
+            f"Workshop started successfully",
+            extra={
+                "correlation_id": correlation_id,
+                "workshop_id": workshop_id,
+                "started_by": ctx["user_email"],
+                "started_at": started_workshop.started_at
+            }
+        )
+        
+        return StartWorkshopResponse(
+            workshop=_workshop_to_response(started_workshop),
+            message=f"Workshop '{started_workshop.title}' started successfully"
+        )
+        
+    except HTTPException:
+        raise
+    except ValueError as e:
+        logger.warning(
+            f"Invalid start request: {str(e)}",
+            extra={
+                "correlation_id": correlation_id,
+                "workshop_id": workshop_id,
+                "user_email": ctx["user_email"]
+            }
+        )
+        raise HTTPException(403 if "consent" in str(e).lower() else 400, str(e))
+    except Exception as e:
+        logger.error(
+            f"Failed to start workshop: {str(e)}",
+            extra={
+                "correlation_id": correlation_id,
+                "workshop_id": workshop_id,
+                "user_email": ctx["user_email"],
+                "error": str(e)
+            }
+        )
+        raise HTTPException(500, f"Failed to start workshop: {str(e)}")
+
+
+@router.get("", response_model=WorkshopListResponse)
+async def list_workshops(
+    engagement_id: str = Query(..., description="Engagement ID to filter workshops"),
+    page: int = Query(1, ge=1, description="Page number"),
+    page_size: int = Query(50, ge=1, le=100, description="Items per page"),
+    repo: CosmosRepository = Depends(get_repo),
+    ctx: Dict[str, str] = Depends(current_context)
+):
+    """
+    List workshops for an engagement (paginated)
+    Requires engagement membership
+    """
+    correlation_id = get_correlation_id()
+    
+    try:
+        # Create context with specific engagement_id for membership check
+        engagement_ctx = ctx.copy()
+        engagement_ctx["engagement_id"] = engagement_id
+        require_member(repo, engagement_ctx, "member")
+        
+        # Get workshops from repository
+        workshops, total_count = await repo.list_workshops(
+            engagement_id=engagement_id,
+            page=page,
+            page_size=page_size
+        )
+        
+        # Audit log for data access
+        audit_service = create_audit_service(repo)
+        await audit_service.log_audit_event(
+            action_type="data_access",
+            user_email=ctx["user_email"],
+            action_description=f"Listed workshops for engagement",
+            engagement_id=engagement_id,
+            resource_type="workshop",
+            correlation_id=correlation_id
+        )
+        
+        logger.info(
+            f"Listed workshops",
+            extra={
+                "correlation_id": correlation_id,
+                "engagement_id": engagement_id,
+                "user_email": ctx["user_email"],
+                "page": page,
+                "workshop_count": len(workshops),
+                "total_count": total_count
+            }
+        )
+        
+        # Convert to response models
+        workshop_responses = [_workshop_to_response(w) for w in workshops]
+        
+        return WorkshopListResponse(
+            workshops=workshop_responses,
+            total_count=total_count,
+            page=page,
+            page_size=page_size,
+            has_more=total_count > (page * page_size)
+        )
+        
+    except HTTPException:
+        raise
+    except Exception as e:
+        logger.error(
+            f"Failed to list workshops: {str(e)}",
+            extra={
+                "correlation_id": correlation_id,
+                "engagement_id": engagement_id,
+                "user_email": ctx["user_email"],
+                "error": str(e)
+            }
+        )
+        raise HTTPException(500, f"Failed to list workshops: {str(e)}")
+
+
+def _workshop_to_response(workshop: Workshop) -> WorkshopResponse:
+    """Convert domain model to response model"""
+    from ..schemas.workshop import AttendeeResponse, ConsentResponse
+    
+    attendee_responses = []
+    for attendee in workshop.attendees:
+        consent_response = None
+        if attendee.consent:
+            consent_response = ConsentResponse(
+                by=attendee.consent.by,
+                user_id=attendee.consent.user_id,
+                timestamp=attendee.consent.timestamp
+            )
+        
+        attendee_response = AttendeeResponse(
+            id=attendee.id,
+            user_id=attendee.user_id,
+            email=attendee.email,
+            role=attendee.role,
+            consent=consent_response
+        )
+        attendee_responses.append(attendee_response)
+    
+    return WorkshopResponse(
+        id=workshop.id,
+        engagement_id=workshop.engagement_id,
+        title=workshop.title,
+        start_ts=workshop.start_ts,
+        attendees=attendee_responses,
+        created_by=workshop.created_by,
+        created_at=workshop.created_at,
+        started=workshop.started,
+        started_at=workshop.started_at
+    )
\ No newline at end of file
diff --git a/app/api/schemas/__init__.py b/app/api/schemas/__init__.py
index 4d0e744d72e0bf4f3f3f0c3b20c68240e41204b0..1772552feef73b4dc638dc6c1a9a608017272419 100644
--- a/app/api/schemas/__init__.py
+++ b/app/api/schemas/__init__.py
@@ -10,6 +10,16 @@ from .assessment import (
     EngagementCreate,
     AddMemberRequest
 )
+from .workshop import (
+    WorkshopCreateRequest,
+    WorkshopResponse,
+    ConsentRequest,
+    AttendeeRequest,
+    AttendeeResponse,
+    ConsentResponse,
+    WorkshopListResponse,
+    StartWorkshopResponse
+)
 
 __all__ = [
     "CountSummary",
@@ -25,5 +35,13 @@ __all__ = [
     "ScoreResponse",
     "PillarScore",
     "EngagementCreate",
-    "AddMemberRequest"
+    "AddMemberRequest",
+    "WorkshopCreateRequest",
+    "WorkshopResponse",
+    "ConsentRequest",
+    "AttendeeRequest",
+    "AttendeeResponse",
+    "ConsentResponse",
+    "WorkshopListResponse",
+    "StartWorkshopResponse"
 ]
diff --git a/app/api/schemas/workshop.py b/app/api/schemas/workshop.py
new file mode 100644
index 0000000000000000000000000000000000000000..b1e309bd1106e904d322102d7a26ead6c89caf84
--- /dev/null
+++ b/app/api/schemas/workshop.py
@@ -0,0 +1,77 @@
+"""Workshop API Schemas for Request/Response Validation"""
+
+from datetime import datetime
+from typing import List, Optional
+from pydantic import BaseModel, Field, EmailStr
+
+
+class AttendeeRequest(BaseModel):
+    """Request model for workshop attendee"""
+    user_id: str = Field(..., min_length=1, description="User identifier")
+    email: EmailStr = Field(..., description="Attendee email address")
+    role: str = Field(..., min_length=1, description="Attendee role in workshop")
+
+
+class WorkshopCreateRequest(BaseModel):
+    """Request model for creating a workshop"""
+    engagement_id: str = Field(..., min_length=1, description="Engagement ID")
+    title: str = Field(..., min_length=1, max_length=255, description="Workshop title")
+    start_ts: Optional[datetime] = Field(None, description="Workshop start timestamp")
+    attendees: List[AttendeeRequest] = Field(..., min_items=1, description="Workshop attendees")
+
+
+class ConsentResponse(BaseModel):
+    """Response model for consent record"""
+    by: str = Field(..., description="User who gave consent")
+    user_id: str = Field(..., description="User ID who gave consent")
+    timestamp: datetime = Field(..., description="Consent timestamp")
+
+
+class AttendeeResponse(BaseModel):
+    """Response model for workshop attendee"""
+    id: str = Field(..., description="Attendee ID")
+    user_id: str = Field(..., description="User identifier")
+    email: str = Field(..., description="Attendee email address")
+    role: str = Field(..., description="Attendee role in workshop")
+    consent: Optional[ConsentResponse] = Field(None, description="Consent record if given")
+
+
+class WorkshopResponse(BaseModel):
+    """Response model for workshop"""
+    id: str = Field(..., description="Workshop ID")
+    engagement_id: str = Field(..., description="Engagement ID")
+    title: str = Field(..., description="Workshop title")
+    start_ts: Optional[datetime] = Field(None, description="Workshop start timestamp")
+    attendees: List[AttendeeResponse] = Field(..., description="Workshop attendees")
+    created_by: str = Field(..., description="User who created the workshop")
+    created_at: datetime = Field(..., description="Workshop creation timestamp")
+    started: bool = Field(..., description="Whether workshop has started")
+    started_at: Optional[datetime] = Field(None, description="Workshop start timestamp")
+
+
+class ConsentRequest(BaseModel):
+    """Request model for giving consent"""
+    attendee_id: str = Field(..., min_length=1, description="Attendee ID to update")
+    consent: bool = Field(True, description="Consent status (must be true)")
+    
+    @classmethod
+    def model_validate(cls, v):
+        """Validate that consent is true"""
+        if isinstance(v, dict) and not v.get('consent'):
+            raise ValueError("Consent must be true")
+        return super().model_validate(v)
+
+
+class WorkshopListResponse(BaseModel):
+    """Response model for paginated workshop list"""
+    workshops: List[WorkshopResponse] = Field(..., description="Workshop list")
+    total_count: int = Field(..., description="Total number of workshops")
+    page: int = Field(..., description="Current page number")
+    page_size: int = Field(..., description="Items per page")
+    has_more: bool = Field(..., description="Whether there are more pages")
+
+
+class StartWorkshopResponse(BaseModel):
+    """Response model for starting a workshop"""
+    workshop: WorkshopResponse = Field(..., description="Updated workshop")
+    message: str = Field(..., description="Success message")
\ No newline at end of file
diff --git a/app/domain/models.py b/app/domain/models.py
index e3b7107ada14fa5cdf1062db5ef3233f68b6e729..03b5b113ab0bd8800796a0333c08b69b21cd0bea 100644
--- a/app/domain/models.py
+++ b/app/domain/models.py
@@ -175,3 +175,29 @@ class CSFFunction(BaseModel):
     title: str
     description: str
     categories: List[CSFCategory] = Field(default_factory=list)
+
+class ConsentRecord(BaseModel):
+    """Attendee consent record for workshops"""
+    by: str  # User who gave consent (typically same as attendee email)
+    user_id: str  # User ID who gave consent
+    timestamp: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
+
+class WorkshopAttendee(BaseModel):
+    """Workshop attendee information"""
+    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
+    user_id: str  # User identifier
+    email: str
+    role: str  # attendee role in workshop
+    consent: Optional[ConsentRecord] = None
+
+class Workshop(BaseModel):
+    """Workshop for engagement activities requiring consent"""
+    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
+    engagement_id: str
+    title: str
+    start_ts: Optional[datetime] = None
+    attendees: List[WorkshopAttendee] = Field(default_factory=list)
+    created_by: str
+    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
+    started: bool = False
+    started_at: Optional[datetime] = None
diff --git a/app/domain/repository.py b/app/domain/repository.py
index 747aeab28d111bda114ef8753df4f2537fb539ba..15eb19ed69d81f332381f193dc01e9ce3db35006 100644
--- a/app/domain/repository.py
+++ b/app/domain/repository.py
@@ -2,7 +2,7 @@ from __future__ import annotations
 import threading
 import logging
 from typing import Dict, List, Optional
-from .models import Assessment, Question, Response, Finding, Recommendation, RunLog, Engagement, Membership, Document
+from .models import Assessment, Question, Response, Finding, Recommendation, RunLog, Engagement, Membership, Document, Workshop, ConsentRecord
 
 logger = logging.getLogger(__name__)
 
@@ -31,6 +31,13 @@ class Repository:
     def list_documents(self, engagement_id: str) -> List[Document]: ...
     def get_document(self, engagement_id: str, doc_id: str) -> Optional[Document]: ...
     def delete_document(self, engagement_id: str, doc_id: str) -> bool: ...
+    
+    # Workshops
+    async def create_workshop(self, workshop: Workshop) -> Workshop: ...
+    async def get_workshop(self, workshop_id: str, engagement_id: str) -> Optional[Workshop]: ...
+    async def list_workshops(self, engagement_id: str, page: int = 1, page_size: int = 50) -> tuple[List[Workshop], int]: ...
+    async def update_workshop_consent(self, workshop_id: str, engagement_id: str, attendee_id: str, consent: ConsentRecord) -> Workshop: ...
+    async def start_workshop(self, workshop_id: str, engagement_id: str) -> Workshop: ...
 
 class InMemoryRepository(Repository):
     def __init__(self):
diff --git a/app/repos/cosmos_repository.py b/app/repos/cosmos_repository.py
index e1d0b1578a313c7f9516602051b800bad6528d6c..b0296ff3be304be73f58e299bce7fa097eb75547 100644
--- a/app/repos/cosmos_repository.py
+++ b/app/repos/cosmos_repository.py
@@ -14,7 +14,7 @@ import json
 import logging
 import os
 from datetime import datetime, timezone, timedelta
-from typing import Dict, List, Optional, Any, Union, Tuple
+from typing import Dict, List, Optional, Any, Union
 
 from azure.cosmos import CosmosClient, PartitionKey
 from azure.cosmos.exceptions import CosmosResourceNotFoundError, CosmosHttpResponseError
@@ -22,12 +22,12 @@ from azure.identity import DefaultAzureCredential
 
 from domain.models import (
     Assessment, Question, Response, Finding, Recommendation, RunLog,
-    Engagement, Membership, Document, EmbeddingDocument, Evidence
+    Engagement, Membership, Document, EmbeddingDocument, Workshop,
+    WorkshopAttendee, ConsentRecord
 )
 from domain.repository import Repository
 from api.schemas.gdpr import BackgroundJob, AuditLogEntry, TTLPolicy
 from config import config
-from security.secret_provider import get_secret
 
 logger = logging.getLogger(__name__)
 
@@ -49,8 +49,7 @@ class CosmosRepository(Repository):
             # Use managed identity for authentication
             credential = DefaultAzureCredential()
             
-            # Get Cosmos DB configuration from secret provider (async operation)
-            # For now, fall back to environment variables - will be updated in subsequent methods
+            # Get Cosmos DB configuration
             cosmos_endpoint = os.getenv("COSMOS_ENDPOINT")
             cosmos_database = os.getenv("COSMOS_DATABASE", "cybermaturity")
             
@@ -66,7 +65,7 @@ class CosmosRepository(Repository):
             self.database = self.client.get_database_client(cosmos_database)
             
             logger.info(
-                "Initialized Cosmos DB repository (will upgrade to secret provider)",
+                "Initialized Cosmos DB repository",
                 extra={
                     "correlation_id": self.correlation_id,
                     "endpoint": cosmos_endpoint,
@@ -84,52 +83,6 @@ class CosmosRepository(Repository):
             )
             raise
     
-    async def _initialize_client_async(self):
-        """Initialize Cosmos DB client with secret provider (async version)"""
-        try:
-            # Use managed identity for authentication
-            credential = DefaultAzureCredential()
-            
-            # Get Cosmos DB configuration from secret provider
-            cosmos_endpoint = await get_secret("cosmos-endpoint", self.correlation_id)
-            cosmos_database = await get_secret("cosmos-database", self.correlation_id)
-            
-            # Fallback to environment variables for local development
-            if not cosmos_endpoint:
-                cosmos_endpoint = os.getenv("COSMOS_ENDPOINT")
-            if not cosmos_database:
-                cosmos_database = os.getenv("COSMOS_DATABASE", "cybermaturity")
-            
-            if not cosmos_endpoint:
-                raise ValueError("COSMOS_ENDPOINT secret or environment variable is required")
-            
-            self.client = CosmosClient(
-                url=cosmos_endpoint,
-                credential=credential
-            )
-            
-            # Get or create database
-            self.database = self.client.get_database_client(cosmos_database)
-            
-            logger.info(
-                "Initialized Cosmos DB repository with secret provider",
-                extra={
-                    "correlation_id": self.correlation_id,
-                    "endpoint": cosmos_endpoint,
-                    "database": cosmos_database
-                }
-            )
-            
-        except Exception as e:
-            logger.error(
-                "Failed to initialize Cosmos DB repository with secret provider",
-                extra={
-                    "correlation_id": self.correlation_id,
-                    "error": str(e)
-                }
-            )
-            raise
-    
     def _initialize_containers(self):
         """Initialize all required containers with proper configuration"""
         container_configs = {
@@ -181,9 +134,9 @@ class CosmosRepository(Repository):
                 "partition_key": "/engagement_id",
                 "ttl": 31536000  # 1 year TTL for embeddings
             },
-            "evidence": {
+            "workshops": {
                 "partition_key": "/engagement_id",
-                "ttl": None  # No TTL for evidence data
+                "ttl": None  # No TTL for workshop data
             }
         }
         
@@ -733,7 +686,7 @@ class CosmosRepository(Repository):
             # Delete from all containers
             containers_to_clean = [
                 "engagements", "memberships", "assessments", "documents", 
-                "runlogs", "embeddings"
+                "runlogs", "embeddings", "workshops"
             ]
             
             for container_name in containers_to_clean:
@@ -779,187 +732,240 @@ class CosmosRepository(Repository):
             )
             raise
     
-    # Evidence methods
-    async def store_evidence(self, evidence: Evidence) -> Evidence:
-        """Store evidence record in Cosmos DB"""
+    # Workshop methods
+    async def create_workshop(self, workshop: Workshop) -> Workshop:
+        """Create a new workshop"""
         try:
-            evidence_dict = evidence.model_dump()
-            evidence_dict["id"] = evidence.id
+            workshop_dict = workshop.model_dump()
+            workshop_dict["id"] = workshop.id
             
-            stored_item = await self._upsert_item("evidence", evidence_dict)
+            stored_item = await self._upsert_item("workshops", workshop_dict)
+            return Workshop(**stored_item)
             
-            logger.info(
-                "Evidence record stored",
+        except Exception as e:
+            logger.error(
+                f"Failed to create workshop: {str(e)}",
                 extra={
                     "correlation_id": self.correlation_id,
-                    "evidence_id": evidence.id,
-                    "engagement_id": evidence.engagement_id,
-                    "filename": evidence.filename
+                    "workshop_id": workshop.id,
+                    "engagement_id": workshop.engagement_id,
+                    "error": str(e)
                 }
             )
-            
-            return Evidence(**stored_item)
+            raise
+    
+    async def get_workshop(self, workshop_id: str, engagement_id: str) -> Optional[Workshop]:
+        """Get workshop by ID"""
+        try:
+            item = await self._get_item("workshops", workshop_id, engagement_id)
+            return Workshop(**item) if item else None
             
         except Exception as e:
             logger.error(
-                "Failed to store evidence record",
+                f"Failed to get workshop: {str(e)}",
                 extra={
                     "correlation_id": self.correlation_id,
-                    "evidence_id": evidence.id,
+                    "workshop_id": workshop_id,
+                    "engagement_id": engagement_id,
                     "error": str(e)
                 }
             )
             raise
     
-    async def get_evidence(self, evidence_id: str, engagement_id: str) -> Optional[Evidence]:
-        """Get evidence record by ID"""
+    async def list_workshops(
+        self,
+        engagement_id: str,
+        page: int = 1,
+        page_size: int = 50
+    ) -> tuple[List[Workshop], int]:
+        """List workshops for an engagement with pagination"""
         try:
-            item = await self._get_item("evidence", evidence_id, engagement_id)
-            return Evidence(**item) if item else None
+            # Count query
+            count_query = "SELECT VALUE COUNT(1) FROM c WHERE c.engagement_id = @engagement_id"
+            count_params = [{"name": "@engagement_id", "value": engagement_id}]
+            count_results = await self._query_items("workshops", count_query, count_params)
+            total_count = count_results[0] if count_results else 0
+            
+            # Data query with pagination
+            offset = (page - 1) * page_size
+            data_query = f"SELECT * FROM c WHERE c.engagement_id = @engagement_id ORDER BY c.created_at DESC OFFSET {offset} LIMIT {page_size}"
+            items = await self._query_items("workshops", data_query, count_params)
+            
+            workshops = [Workshop(**item) for item in items]
+            
+            return workshops, total_count
             
         except Exception as e:
             logger.error(
-                "Failed to get evidence record",
+                f"Failed to list workshops: {str(e)}",
                 extra={
                     "correlation_id": self.correlation_id,
-                    "evidence_id": evidence_id,
+                    "engagement_id": engagement_id,
                     "error": str(e)
                 }
             )
             raise
     
-    async def get_evidence_by_id(self, evidence_id: str) -> Optional[Evidence]:
-        """Get evidence record by ID without requiring engagement_id (cross-partition lookup)"""
+    async def update_workshop_consent(
+        self,
+        workshop_id: str,
+        engagement_id: str,
+        attendee_id: str,
+        consent: ConsentRecord
+    ) -> Workshop:
+        """Update attendee consent for a workshop"""
         try:
-            # Query for the evidence by id across all partitions
-            query = "SELECT * FROM c WHERE c.id = @evidence_id"
-            parameters = [{"name": "@evidence_id", "value": evidence_id}]
-            
-            # Use async query with cross-partition support
-            items = await asyncio.to_thread(
-                lambda: list(self.containers["evidence"].query_items(
-                    query=query,
-                    parameters=parameters,
-                    enable_cross_partition_query=True
-                ))
-            )
-            
-            # Return the first (and should be only) result
-            if items:
-                item = items[0]
-                logger.info(
-                    "Evidence record retrieved by ID",
-                    extra={
-                        "correlation_id": self.correlation_id,
-                        "evidence_id": evidence_id,
-                        "engagement_id": item.get("engagement_id")
-                    }
-                )
-                return Evidence(**item)
+            # Get existing workshop
+            workshop = await self.get_workshop(workshop_id, engagement_id)
+            if not workshop:
+                raise ValueError(f"Workshop {workshop_id} not found")
+            
+            # Find and update attendee consent
+            attendee_found = False
+            for attendee in workshop.attendees:
+                if attendee.id == attendee_id:
+                    attendee.consent = consent
+                    attendee_found = True
+                    break
+            
+            if not attendee_found:
+                raise ValueError(f"Attendee {attendee_id} not found in workshop")
             
-            logger.warning(
-                "Evidence record not found",
+            # Update workshop in database
+            workshop_dict = workshop.model_dump()
+            workshop_dict["id"] = workshop.id
+            
+            stored_item = await self._upsert_item("workshops", workshop_dict)
+            return Workshop(**stored_item)
+            
+        except Exception as e:
+            logger.error(
+                f"Failed to update workshop consent: {str(e)}",
                 extra={
                     "correlation_id": self.correlation_id,
-                    "evidence_id": evidence_id
+                    "workshop_id": workshop_id,
+                    "attendee_id": attendee_id,
+                    "error": str(e)
                 }
             )
-            return None
+            raise
+    
+    async def start_workshop(self, workshop_id: str, engagement_id: str) -> Workshop:
+        """Start a workshop if all attendees have given consent"""
+        try:
+            # Get existing workshop
+            workshop = await self.get_workshop(workshop_id, engagement_id)
+            if not workshop:
+                raise ValueError(f"Workshop {workshop_id} not found")
+            
+            if workshop.started:
+                raise ValueError("Workshop already started")
+            
+            # Check that all attendees have consent
+            for attendee in workshop.attendees:
+                if not attendee.consent:
+                    raise ValueError(f"Attendee {attendee.email} has not given consent")
+            
+            # Update workshop as started
+            workshop.started = True
+            workshop.started_at = datetime.now(timezone.utc)
+            
+            # Update workshop in database
+            workshop_dict = workshop.model_dump()
+            workshop_dict["id"] = workshop.id
+            
+            stored_item = await self._upsert_item("workshops", workshop_dict)
+            return Workshop(**stored_item)
             
         except Exception as e:
             logger.error(
-                "Failed to get evidence record by ID",
+                f"Failed to start workshop: {str(e)}",
                 extra={
                     "correlation_id": self.correlation_id,
-                    "evidence_id": evidence_id,
+                    "workshop_id": workshop_id,
                     "error": str(e)
                 }
             )
             raise
     
-    async def list_evidence(
-        self,
-        engagement_id: str,
-        page: int = 1,
-        page_size: int = 50
-    ) -> Tuple[List[Evidence], int]:
-        """List evidence for an engagement with pagination"""
+    # Evidence methods
+    async def store_evidence(self, evidence: Evidence) -> Evidence:
+        """Store evidence record in Cosmos DB"""
         try:
-            # Count query
-            count_query = "SELECT VALUE COUNT(1) FROM c WHERE c.engagement_id = @engagement_id"
-            count_results = await self._query_items(
-                "evidence", 
-                count_query, 
-                [{"name": "@engagement_id", "value": engagement_id}]
-            )
-            total_count = count_results[0] if count_results else 0
-            
-            # Data query with pagination
-            offset = (page - 1) * page_size
-            data_query = f"SELECT * FROM c WHERE c.engagement_id = @engagement_id ORDER BY c.uploaded_at DESC OFFSET {offset} LIMIT {page_size}"
-            items = await self._query_items(
-                "evidence",
-                data_query,
-                [{"name": "@engagement_id", "value": engagement_id}]
-            )
+            evidence_dict = evidence.model_dump()
+            evidence_dict["id"] = evidence.id
             
-            evidence_list = [Evidence(**item) for item in items]
+            stored_item = await self._upsert_item("evidence", evidence_dict)
             
             logger.info(
-                "Listed evidence for engagement",
+                "Evidence record stored",
                 extra={
                     "correlation_id": self.correlation_id,
-                    "engagement_id": engagement_id,
-                    "page": page,
-                    "page_size": page_size,
-                    "total_count": total_count,
-                    "returned_count": len(evidence_list)
+                    "evidence_id": evidence.id,
+                    "engagement_id": evidence.engagement_id,
+                    "filename": evidence.filename
                 }
             )
             
-            return evidence_list, total_count
+            return Evidence(**stored_item)
             
         except Exception as e:
             logger.error(
-                "Failed to list evidence",
+                "Failed to store evidence record",
                 extra={
                     "correlation_id": self.correlation_id,
-                    "engagement_id": engagement_id,
+                    "evidence_id": evidence.id,
                     "error": str(e)
                 }
             )
             raise
     
-    async def update_evidence_links(self, evidence_id: str, engagement_id: str, linked_items: List[Dict[str, str]]) -> bool:
-        """Update evidence links to assessment items"""
+    async def get_evidence(self, evidence_id: str, engagement_id: str) -> Optional[Evidence]:
+        """Get evidence record by ID"""
         try:
-            # Get existing evidence
-            evidence_item = await self._get_item("evidence", evidence_id, engagement_id)
-            if not evidence_item:
-                return False
-            
-            # Update linked items
-            evidence_item["linked_items"] = linked_items
-            
-            await self._upsert_item("evidence", evidence_item)
+            item = await self._get_item("evidence", evidence_id, engagement_id)
+            return Evidence(**item) if item else None
             
-            logger.info(
-                "Updated evidence links",
+        except Exception as e:
+            logger.error(
+                "Failed to get evidence record",
                 extra={
                     "correlation_id": self.correlation_id,
                     "evidence_id": evidence_id,
-                    "link_count": len(linked_items)
+                    "error": str(e)
                 }
             )
+            raise
+    
+    async def list_evidence(
+        self,
+        engagement_id: str,
+        page: int = 1,
+        page_size: int = 50
+    ) -> tuple[List[Evidence], int]:
+        """List evidence for an engagement with pagination"""
+        try:
+            # Count query
+            count_query = "SELECT VALUE COUNT(1) FROM c WHERE c.engagement_id = @engagement_id"
+            count_params = [{"name": "@engagement_id", "value": engagement_id}]
+            count_results = await self._query_items("evidence", count_query, count_params)
+            total_count = count_results[0] if count_results else 0
             
-            return True
+            # Data query with pagination
+            offset = (page - 1) * page_size
+            data_query = f"SELECT * FROM c WHERE c.engagement_id = @engagement_id ORDER BY c.uploaded_at DESC OFFSET {offset} LIMIT {page_size}"
+            items = await self._query_items("evidence", data_query, count_params)
+            
+            evidence_list = [Evidence(**item) for item in items]
+            
+            return evidence_list, total_count
             
         except Exception as e:
             logger.error(
-                "Failed to update evidence links",
+                "Failed to list evidence",
                 extra={
                     "correlation_id": self.correlation_id,
-                    "evidence_id": evidence_id,
+                    "engagement_id": engagement_id,
                     "error": str(e)
                 }
             )
diff --git a/app/tests/test_workshops.py b/app/tests/test_workshops.py
new file mode 100644
index 0000000000000000000000000000000000000000..4ab80ab9e76d3677d637a0ccd85e39cc2647bbc5
--- /dev/null
+++ b/app/tests/test_workshops.py
@@ -0,0 +1,556 @@
+"""
+Comprehensive tests for workshops functionality
+"""
+import pytest
+from datetime import datetime, timezone
+from unittest.mock import Mock, AsyncMock, patch
+from uuid import uuid4
+
+from fastapi import HTTPException
+from fastapi.testclient import TestClient
+
+from domain.models import Workshop, WorkshopAttendee, ConsentRecord
+from api.schemas.workshop import WorkshopCreateRequest, ConsentRequest, AttendeeRequest
+from api.routes.workshops import _workshop_to_response
+from repos.cosmos_repository import CosmosRepository
+
+
+@pytest.fixture
+def sample_workshop():
+    """Sample workshop for testing"""
+    attendees = [
+        WorkshopAttendee(
+            user_id="user1",
+            email="user1@example.com",
+            role="participant"
+        ),
+        WorkshopAttendee(
+            user_id="user2", 
+            email="user2@example.com",
+            role="facilitator"
+        )
+    ]
+    
+    return Workshop(
+        engagement_id="test-engagement-123",
+        title="Test Security Workshop",
+        attendees=attendees,
+        created_by="lead@example.com"
+    )
+
+
+@pytest.fixture
+def workshop_with_consent():
+    """Workshop with some attendees consented"""
+    attendees = [
+        WorkshopAttendee(
+            user_id="user1",
+            email="user1@example.com",
+            role="participant",
+            consent=ConsentRecord(
+                by="user1@example.com",
+                user_id="user1@example.com",
+                timestamp=datetime.now(timezone.utc)
+            )
+        ),
+        WorkshopAttendee(
+            user_id="user2",
+            email="user2@example.com", 
+            role="facilitator"
+            # No consent yet
+        )
+    ]
+    
+    return Workshop(
+        engagement_id="test-engagement-123",
+        title="Test Security Workshop",
+        attendees=attendees,
+        created_by="lead@example.com"
+    )
+
+
+@pytest.fixture
+def mock_repo():
+    """Mock repository for tests"""
+    repo = Mock(spec=CosmosRepository)
+    repo.create_workshop = AsyncMock()
+    repo.get_workshop = AsyncMock()
+    repo.list_workshops = AsyncMock()
+    repo.update_workshop_consent = AsyncMock()
+    repo.start_workshop = AsyncMock()
+    repo.get_membership = Mock()
+    return repo
+
+
+@pytest.fixture
+def mock_context():
+    """Mock security context"""
+    return {
+        "user_email": "test@example.com",
+        "engagement_id": "test-engagement-123",
+        "tenant_id": None,
+        "aad_groups_enabled": False
+    }
+
+
+@pytest.fixture
+def lead_context():
+    """Mock security context for lead user"""
+    return {
+        "user_email": "lead@example.com",
+        "engagement_id": "test-engagement-123",
+        "tenant_id": None,
+        "aad_groups_enabled": False
+    }
+
+
+class TestWorkshopModels:
+    """Test workshop domain models"""
+    
+    def test_workshop_creation(self, sample_workshop):
+        """Test workshop model creation"""
+        assert sample_workshop.id is not None
+        assert sample_workshop.engagement_id == "test-engagement-123"
+        assert sample_workshop.title == "Test Security Workshop"
+        assert len(sample_workshop.attendees) == 2
+        assert not sample_workshop.started
+        assert sample_workshop.started_at is None
+    
+    def test_workshop_attendee_creation(self):
+        """Test attendee model creation"""
+        attendee = WorkshopAttendee(
+            user_id="test-user",
+            email="test@example.com",
+            role="participant"
+        )
+        assert attendee.id is not None
+        assert attendee.user_id == "test-user"
+        assert attendee.email == "test@example.com"
+        assert attendee.role == "participant"
+        assert attendee.consent is None
+    
+    def test_consent_record_creation(self):
+        """Test consent record creation"""
+        consent = ConsentRecord(
+            by="user@example.com",
+            user_id="user@example.com"
+        )
+        assert consent.by == "user@example.com"
+        assert consent.user_id == "user@example.com"
+        assert isinstance(consent.timestamp, datetime)
+
+
+class TestWorkshopRepository:
+    """Test workshop repository operations"""
+    
+    @pytest.mark.asyncio
+    async def test_create_workshop(self, mock_repo, sample_workshop):
+        """Test workshop creation in repository"""
+        mock_repo.create_workshop.return_value = sample_workshop
+        
+        result = await mock_repo.create_workshop(sample_workshop)
+        
+        assert result == sample_workshop
+        mock_repo.create_workshop.assert_called_once_with(sample_workshop)
+    
+    @pytest.mark.asyncio
+    async def test_get_workshop(self, mock_repo, sample_workshop):
+        """Test workshop retrieval"""
+        mock_repo.get_workshop.return_value = sample_workshop
+        
+        result = await mock_repo.get_workshop("workshop-123", "engagement-123")
+        
+        assert result == sample_workshop
+        mock_repo.get_workshop.assert_called_once_with("workshop-123", "engagement-123")
+    
+    @pytest.mark.asyncio
+    async def test_list_workshops(self, mock_repo, sample_workshop):
+        """Test workshop listing with pagination"""
+        workshops = [sample_workshop]
+        total_count = 1
+        mock_repo.list_workshops.return_value = (workshops, total_count)
+        
+        result_workshops, result_count = await mock_repo.list_workshops("engagement-123", 1, 50)
+        
+        assert result_workshops == workshops
+        assert result_count == total_count
+        mock_repo.list_workshops.assert_called_once_with("engagement-123", 1, 50)
+    
+    @pytest.mark.asyncio
+    async def test_update_workshop_consent(self, mock_repo, workshop_with_consent):
+        """Test consent update"""
+        consent = ConsentRecord(by="user2@example.com", user_id="user2@example.com")
+        mock_repo.update_workshop_consent.return_value = workshop_with_consent
+        
+        result = await mock_repo.update_workshop_consent(
+            "workshop-123", "engagement-123", "attendee-123", consent
+        )
+        
+        assert result == workshop_with_consent
+        mock_repo.update_workshop_consent.assert_called_once_with(
+            "workshop-123", "engagement-123", "attendee-123", consent
+        )
+    
+    @pytest.mark.asyncio
+    async def test_start_workshop_success(self, mock_repo, sample_workshop):
+        """Test workshop start when all consents given"""
+        # Set up workshop with all attendees consented
+        for attendee in sample_workshop.attendees:
+            attendee.consent = ConsentRecord(
+                by=attendee.email,
+                user_id=attendee.user_id
+            )
+        sample_workshop.started = True
+        sample_workshop.started_at = datetime.now(timezone.utc)
+        
+        mock_repo.start_workshop.return_value = sample_workshop
+        
+        result = await mock_repo.start_workshop("workshop-123", "engagement-123")
+        
+        assert result.started is True
+        assert result.started_at is not None
+        mock_repo.start_workshop.assert_called_once_with("workshop-123", "engagement-123")
+    
+    @pytest.mark.asyncio
+    async def test_start_workshop_missing_consent(self, mock_repo):
+        """Test workshop start fails when consent missing"""
+        mock_repo.start_workshop.side_effect = ValueError("Attendee user2@example.com has not given consent")
+        
+        with pytest.raises(ValueError, match="has not given consent"):
+            await mock_repo.start_workshop("workshop-123", "engagement-123")
+
+
+class TestWorkshopAPI:
+    """Test workshop API endpoints"""
+    
+    @pytest.mark.asyncio
+    @patch('api.routes.workshops.get_correlation_id')
+    @patch('api.routes.workshops.create_audit_service')
+    @patch('api.routes.workshops.require_member')
+    async def test_create_workshop_success(
+        self, mock_require_member, mock_audit_service, mock_correlation_id,
+        mock_repo, mock_context, sample_workshop
+    ):
+        """Test successful workshop creation"""
+        from api.routes.workshops import create_workshop
+        
+        # Setup mocks
+        mock_correlation_id.return_value = "test-corr-id"
+        mock_audit = Mock()
+        mock_audit.log_audit_event = AsyncMock()
+        mock_audit_service.return_value = mock_audit
+        mock_repo.create_workshop.return_value = sample_workshop
+        
+        # Create request
+        request = WorkshopCreateRequest(
+            engagement_id="test-engagement-123",
+            title="Test Security Workshop",
+            attendees=[
+                AttendeeRequest(user_id="user1", email="user1@example.com", role="participant"),
+                AttendeeRequest(user_id="user2", email="user2@example.com", role="facilitator")
+            ]
+        )
+        
+        # Call endpoint
+        result = await create_workshop(request, mock_repo, mock_context)
+        
+        # Assertions
+        assert result.title == "Test Security Workshop"
+        assert result.engagement_id == "test-engagement-123"
+        assert len(result.attendees) == 2
+        mock_require_member.assert_called_once_with(mock_repo, mock_context, "member")
+        mock_repo.create_workshop.assert_called_once()
+        mock_audit.log_audit_event.assert_called_once()
+    
+    @pytest.mark.asyncio
+    @patch('api.routes.workshops.require_member')
+    async def test_create_workshop_auth_failure(
+        self, mock_require_member, mock_repo, mock_context
+    ):
+        """Test workshop creation fails with auth error"""
+        from api.routes.workshops import create_workshop
+        
+        # Setup auth failure
+        mock_require_member.side_effect = HTTPException(403, "Not a member of this engagement")
+        
+        request = WorkshopCreateRequest(
+            engagement_id="test-engagement-123",
+            title="Test Workshop",
+            attendees=[
+                AttendeeRequest(user_id="user1", email="user1@example.com", role="participant")
+            ]
+        )
+        
+        # Should raise HTTPException
+        with pytest.raises(HTTPException) as exc_info:
+            await create_workshop(request, mock_repo, mock_context)
+        
+        assert exc_info.value.status_code == 403
+        assert "Not a member" in str(exc_info.value.detail)
+    
+    @pytest.mark.asyncio
+    @patch('api.routes.workshops.get_correlation_id')
+    @patch('api.routes.workshops.create_audit_service')
+    @patch('api.routes.workshops.require_member')
+    async def test_give_consent_success(
+        self, mock_require_member, mock_audit_service, mock_correlation_id,
+        mock_repo, mock_context, workshop_with_consent
+    ):
+        """Test successful consent giving"""
+        from api.routes.workshops import give_consent
+        
+        # Setup mocks
+        mock_correlation_id.return_value = "test-corr-id"
+        mock_audit = Mock()
+        mock_audit.log_audit_event = AsyncMock()
+        mock_audit_service.return_value = mock_audit
+        mock_repo.update_workshop_consent.return_value = workshop_with_consent
+        
+        # Create request
+        request = ConsentRequest(attendee_id="attendee-123", consent=True)
+        
+        # Call endpoint
+        result = await give_consent("workshop-123", request, mock_repo, mock_context)
+        
+        # Assertions
+        assert result.id == workshop_with_consent.id
+        mock_require_member.assert_called_once_with(mock_repo, mock_context, "member")
+        mock_repo.update_workshop_consent.assert_called_once()
+        mock_audit.log_audit_event.assert_called_once()
+    
+    @pytest.mark.asyncio
+    @patch('api.routes.workshops.get_correlation_id')
+    @patch('api.routes.workshops.create_audit_service')
+    @patch('api.routes.workshops.require_member')
+    async def test_start_workshop_success(
+        self, mock_require_member, mock_audit_service, mock_correlation_id,
+        mock_repo, lead_context, sample_workshop
+    ):
+        """Test successful workshop start"""
+        from api.routes.workshops import start_workshop
+        
+        # Setup workshop as started
+        sample_workshop.started = True
+        sample_workshop.started_at = datetime.now(timezone.utc)
+        
+        # Setup mocks
+        mock_correlation_id.return_value = "test-corr-id"
+        mock_audit = Mock()
+        mock_audit.log_audit_event = AsyncMock()
+        mock_audit_service.return_value = mock_audit
+        mock_repo.start_workshop.return_value = sample_workshop
+        
+        # Call endpoint
+        result = await start_workshop("workshop-123", mock_repo, lead_context)
+        
+        # Assertions
+        assert result.workshop.started is True
+        assert "started successfully" in result.message
+        mock_require_member.assert_called_once_with(mock_repo, lead_context, "lead")
+        mock_repo.start_workshop.assert_called_once_with("workshop-123", "test-engagement-123")
+        mock_audit.log_audit_event.assert_called_once()
+    
+    @pytest.mark.asyncio
+    @patch('api.routes.workshops.require_member')
+    async def test_start_workshop_missing_consent(
+        self, mock_require_member, mock_repo, lead_context
+    ):
+        """Test workshop start fails with missing consent"""
+        from api.routes.workshops import start_workshop
+        
+        # Setup repo to raise consent error
+        mock_repo.start_workshop.side_effect = ValueError("Attendee user@example.com has not given consent")
+        
+        # Should raise HTTPException with 403
+        with pytest.raises(HTTPException) as exc_info:
+            await start_workshop("workshop-123", mock_repo, lead_context)
+        
+        assert exc_info.value.status_code == 403
+        assert "consent" in str(exc_info.value.detail)
+    
+    @pytest.mark.asyncio
+    @patch('api.routes.workshops.require_member')
+    async def test_start_workshop_not_lead(
+        self, mock_require_member, mock_repo, mock_context
+    ):
+        """Test workshop start fails for non-lead user"""
+        from api.routes.workshops import start_workshop
+        
+        # Setup auth failure for non-lead
+        mock_require_member.side_effect = HTTPException(403, "Lead role required")
+        
+        # Should raise HTTPException
+        with pytest.raises(HTTPException) as exc_info:
+            await start_workshop("workshop-123", mock_repo, mock_context)
+        
+        assert exc_info.value.status_code == 403
+        assert "Lead role required" in str(exc_info.value.detail)
+    
+    @pytest.mark.asyncio
+    @patch('api.routes.workshops.get_correlation_id')
+    @patch('api.routes.workshops.create_audit_service')
+    @patch('api.routes.workshops.require_member')
+    async def test_list_workshops_success(
+        self, mock_require_member, mock_audit_service, mock_correlation_id,
+        mock_repo, mock_context, sample_workshop
+    ):
+        """Test successful workshop listing"""
+        from api.routes.workshops import list_workshops
+        
+        # Setup mocks
+        mock_correlation_id.return_value = "test-corr-id"
+        mock_audit = Mock()
+        mock_audit.log_audit_event = AsyncMock()
+        mock_audit_service.return_value = mock_audit
+        mock_repo.list_workshops.return_value = ([sample_workshop], 1)
+        
+        # Call endpoint
+        result = await list_workshops(
+            engagement_id="test-engagement-123",
+            page=1,
+            page_size=50,
+            repo=mock_repo,
+            ctx=mock_context
+        )
+        
+        # Assertions
+        assert len(result.workshops) == 1
+        assert result.total_count == 1
+        assert result.page == 1
+        assert result.page_size == 50
+        assert not result.has_more
+        mock_require_member.assert_called_once()
+        mock_repo.list_workshops.assert_called_once_with("test-engagement-123", 1, 50)
+        mock_audit.log_audit_event.assert_called_once()
+
+
+class TestWorkshopSecurity:
+    """Test security and authorization aspects"""
+    
+    @pytest.mark.asyncio
+    async def test_create_requires_membership(self, mock_repo):
+        """Test create workshop requires engagement membership"""
+        from api.routes.workshops import create_workshop
+        
+        context_no_membership = {
+            "user_email": "outsider@example.com",
+            "engagement_id": "test-engagement-123"
+        }
+        
+        request = WorkshopCreateRequest(
+            engagement_id="test-engagement-123",
+            title="Test Workshop",
+            attendees=[
+                AttendeeRequest(user_id="user1", email="user1@example.com", role="participant")
+            ]
+        )
+        
+        # Mock membership check to fail
+        with patch('api.routes.workshops.require_member') as mock_require:
+            mock_require.side_effect = HTTPException(403, "Not a member of this engagement")
+            
+            with pytest.raises(HTTPException) as exc_info:
+                await create_workshop(request, mock_repo, context_no_membership)
+            
+            assert exc_info.value.status_code == 403
+    
+    @pytest.mark.asyncio
+    async def test_start_requires_lead_role(self, mock_repo):
+        """Test start workshop requires lead role"""
+        from api.routes.workshops import start_workshop
+        
+        member_context = {
+            "user_email": "member@example.com",
+            "engagement_id": "test-engagement-123"
+        }
+        
+        # Mock membership check to fail for lead requirement
+        with patch('api.routes.workshops.require_member') as mock_require:
+            mock_require.side_effect = HTTPException(403, "Lead role required")
+            
+            with pytest.raises(HTTPException) as exc_info:
+                await start_workshop("workshop-123", mock_repo, member_context)
+            
+            assert exc_info.value.status_code == 403
+            assert "Lead role required" in str(exc_info.value.detail)
+    
+    @pytest.mark.asyncio
+    async def test_audit_logging_on_all_operations(self, mock_repo, mock_context):
+        """Test that all operations create audit log entries"""
+        # This would be covered by the individual operation tests above
+        # Ensuring audit_service.log_audit_event is called
+        pass
+
+
+class TestWorkshopResponseMapping:
+    """Test response model mapping"""
+    
+    def test_workshop_to_response_mapping(self, workshop_with_consent):
+        """Test workshop domain model to response model mapping"""
+        response = _workshop_to_response(workshop_with_consent)
+        
+        assert response.id == workshop_with_consent.id
+        assert response.engagement_id == workshop_with_consent.engagement_id
+        assert response.title == workshop_with_consent.title
+        assert len(response.attendees) == 2
+        
+        # Check consent mapping
+        consent_attendee = next(a for a in response.attendees if a.consent is not None)
+        assert consent_attendee.consent.by == "user1@example.com"
+        assert consent_attendee.consent.user_id == "user1@example.com"
+        
+        no_consent_attendee = next(a for a in response.attendees if a.consent is None)
+        assert no_consent_attendee.email == "user2@example.com"
+
+
+class TestWorkshopValidation:
+    """Test input validation"""
+    
+    def test_workshop_create_request_validation(self):
+        """Test workshop creation request validation"""
+        # Valid request
+        request = WorkshopCreateRequest(
+            engagement_id="test-engagement-123",
+            title="Test Workshop",
+            attendees=[
+                AttendeeRequest(user_id="user1", email="user1@example.com", role="participant")
+            ]
+        )
+        assert request.engagement_id == "test-engagement-123"
+        assert len(request.attendees) == 1
+        
+        # Invalid - empty attendees should fail
+        with pytest.raises(Exception):  # Pydantic validation error
+            WorkshopCreateRequest(
+                engagement_id="test-engagement-123",
+                title="Test Workshop",
+                attendees=[]
+            )
+    
+    def test_consent_request_validation(self):
+        """Test consent request validation"""
+        # Valid request
+        request = ConsentRequest(attendee_id="attendee-123", consent=True)
+        assert request.consent is True
+        assert request.attendee_id == "attendee-123"
+        
+        # Test that false consent would be rejected (if we had validator)
+        # This would need custom validator in the model
+    
+    def test_email_validation_in_attendee(self):
+        """Test email validation in attendee request"""
+        # Valid email
+        attendee = AttendeeRequest(
+            user_id="user1",
+            email="valid@example.com",
+            role="participant"
+        )
+        assert attendee.email == "valid@example.com"
+        
+        # Invalid email should fail validation
+        with pytest.raises(Exception):  # Pydantic validation error
+            AttendeeRequest(
+                user_id="user1",
+                email="invalid-email",
+                role="participant"
+            )
\ No newline at end of file
diff --git a/web/app/e/[engagementId]/workshops/[id]/page.tsx b/web/app/e/[engagementId]/workshops/[id]/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..c71c990842a05800525a7cf1dc7314c076b9fb92
--- /dev/null
+++ b/web/app/e/[engagementId]/workshops/[id]/page.tsx
@@ -0,0 +1,352 @@
+"use client";
+import { useState, useEffect } from "react";
+import { useParams, useRouter } from "next/navigation";
+import Link from "next/link";
+import { listWorkshops, giveConsent, startWorkshop, hasAllConsent } from "@/lib/workshops";
+import type { Workshop, WorkshopAttendee } from "@/types/workshops";
+
+function ConsentStatus({ attendee, currentUserEmail }: { 
+  attendee: WorkshopAttendee; 
+  currentUserEmail: string;
+}) {
+  if (attendee.consent) {
+    return (
+      <div className="flex items-center space-x-2 text-green-600">
+        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
+        </svg>
+        <span className="text-sm font-medium">Consented</span>
+        <span className="text-xs text-gray-500">
+          at {new Date(attendee.consent.timestamp).toLocaleString()}
+        </span>
+      </div>
+    );
+  }
+
+  if (attendee.email === currentUserEmail) {
+    return (
+      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
+        Your consent required
+      </span>
+    );
+  }
+
+  return (
+    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
+      Consent pending
+    </span>
+  );
+}
+
+function AttendeeRow({ 
+  attendee, 
+  workshopId, 
+  engagementId, 
+  currentUserEmail, 
+  onConsentGiven 
+}: {
+  attendee: WorkshopAttendee;
+  workshopId: string;
+  engagementId: string;
+  currentUserEmail: string;
+  onConsentGiven: () => void;
+}) {
+  const [isGivingConsent, setIsGivingConsent] = useState(false);
+  const [error, setError] = useState("");
+
+  const handleGiveConsent = async () => {
+    setIsGivingConsent(true);
+    setError("");
+
+    try {
+      await giveConsent(engagementId, workshopId, {
+        attendee_id: attendee.id,
+        consent: true,
+      });
+      onConsentGiven();
+    } catch (err) {
+      setError(err instanceof Error ? err.message : "Failed to give consent");
+    } finally {
+      setIsGivingConsent(false);
+    }
+  };
+
+  return (
+    <div className="border rounded-lg p-4">
+      <div className="flex items-center justify-between">
+        <div>
+          <div className="flex items-center space-x-3">
+            <div>
+              <h4 className="text-sm font-medium text-gray-900">{attendee.email}</h4>
+              <p className="text-xs text-gray-500">
+                {attendee.role} • ID: {attendee.user_id}
+              </p>
+            </div>
+          </div>
+        </div>
+
+        <div className="flex items-center space-x-3">
+          <ConsentStatus attendee={attendee} currentUserEmail={currentUserEmail} />
+          
+          {!attendee.consent && attendee.email === currentUserEmail && (
+            <div>
+              <button
+                onClick={handleGiveConsent}
+                disabled={isGivingConsent}
+                className="px-3 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-md hover:bg-green-700 disabled:opacity-50"
+              >
+                {isGivingConsent ? "Giving Consent..." : "I Consent to Participate"}
+              </button>
+              {error && (
+                <p className="mt-1 text-xs text-red-600">{error}</p>
+              )}
+            </div>
+          )}
+        </div>
+      </div>
+    </div>
+  );
+}
+
+export default function WorkshopDetailPage() {
+  const params = useParams();
+  const router = useRouter();
+  const engagementId = params.engagementId as string;
+  const workshopId = params.id as string;
+  
+  const [workshop, setWorkshop] = useState<Workshop | null>(null);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState("");
+  const [isStarting, setIsStarting] = useState(false);
+  
+  // Mock current user - in real app would come from auth context
+  const currentUserEmail = typeof window !== 'undefined' ? localStorage.getItem('email') || '' : '';
+
+  const loadWorkshop = async () => {
+    try {
+      setLoading(true);
+      // Get workshop by ID - we'll find it in the list for now
+      const response = await listWorkshops(engagementId);
+      const foundWorkshop = response.workshops.find(w => w.id === workshopId);
+      
+      if (!foundWorkshop) {
+        setError("Workshop not found");
+        return;
+      }
+      
+      setWorkshop(foundWorkshop);
+    } catch (err) {
+      setError(err instanceof Error ? err.message : "Failed to load workshop");
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  const handleStartWorkshop = async () => {
+    if (!workshop) return;
+    
+    setIsStarting(true);
+    try {
+      const response = await startWorkshop(engagementId, workshopId);
+      setWorkshop(response.workshop);
+      // Could show success message here
+    } catch (err) {
+      setError(err instanceof Error ? err.message : "Failed to start workshop");
+    } finally {
+      setIsStarting(false);
+    }
+  };
+
+  useEffect(() => {
+    if (engagementId && workshopId) {
+      loadWorkshop();
+    }
+  }, [engagementId, workshopId]);
+
+  if (loading) {
+    return (
+      <div className="min-h-screen bg-gray-50 py-8">
+        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
+          <div className="animate-pulse">
+            <div className="h-8 bg-gray-200 rounded w-64 mb-6"></div>
+            <div className="bg-white shadow rounded-lg p-6">
+              <div className="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
+              <div className="space-y-3">
+                {[1, 2, 3].map(i => (
+                  <div key={i} className="h-12 bg-gray-200 rounded"></div>
+                ))}
+              </div>
+            </div>
+          </div>
+        </div>
+      </div>
+    );
+  }
+
+  if (!workshop) {
+    return (
+      <div className="min-h-screen bg-gray-50 py-8">
+        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
+          <div className="text-center py-12">
+            <h3 className="mt-2 text-lg font-medium text-gray-900">Workshop not found</h3>
+            <p className="mt-1 text-sm text-gray-500">{error || "The requested workshop could not be found."}</p>
+            <div className="mt-6">
+              <Link
+                href={`/e/${engagementId}/workshops`}
+                className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
+              >
+                ← Back to Workshops
+              </Link>
+            </div>
+          </div>
+        </div>
+      </div>
+    );
+  }
+
+  const allConsented = hasAllConsent(workshop);
+  const consentedCount = workshop.attendees.filter(a => a.consent).length;
+  const totalCount = workshop.attendees.length;
+  const consentPercentage = Math.round((consentedCount / totalCount) * 100);
+
+  return (
+    <div className="min-h-screen bg-gray-50 py-8">
+      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
+        {/* Header */}
+        <div className="mb-6">
+          <nav className="flex" aria-label="Breadcrumb">
+            <ol className="flex items-center space-x-4">
+              <li>
+                <Link href={`/e/${engagementId}/workshops`} className="text-gray-500 hover:text-gray-700">
+                  <span>Workshops</span>
+                </Link>
+              </li>
+              <li>
+                <div className="flex items-center">
+                  <svg className="flex-shrink-0 h-4 w-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
+                    <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
+                  </svg>
+                  <span className="ml-4 text-sm font-medium text-gray-900">{workshop.title}</span>
+                </div>
+              </li>
+            </ol>
+          </nav>
+        </div>
+
+        {/* Workshop Info */}
+        <div className="bg-white shadow rounded-lg p-6 mb-6">
+          <div className="flex items-start justify-between">
+            <div>
+              <h1 className="text-2xl font-bold text-gray-900">{workshop.title}</h1>
+              <div className="mt-2 flex items-center space-x-4 text-sm text-gray-500">
+                <span>Created by {workshop.created_by}</span>
+                <span>•</span>
+                <span>{new Date(workshop.created_at).toLocaleString()}</span>
+                {workshop.start_ts && (
+                  <>
+                    <span>•</span>
+                    <span>Scheduled for {new Date(workshop.start_ts).toLocaleString()}</span>
+                  </>
+                )}
+              </div>
+            </div>
+            
+            <div className="text-right">
+              <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
+                workshop.started 
+                  ? 'bg-green-100 text-green-800'
+                  : allConsented
+                  ? 'bg-blue-100 text-blue-800' 
+                  : 'bg-yellow-100 text-yellow-800'
+              }`}>
+                {workshop.started ? 'Started' : allConsented ? 'Ready to Start' : 'Awaiting Consent'}
+              </span>
+              {workshop.started && workshop.started_at && (
+                <div className="mt-1 text-xs text-gray-500">
+                  Started at {new Date(workshop.started_at).toLocaleString()}
+                </div>
+              )}
+            </div>
+          </div>
+
+          {/* Consent Progress */}
+          <div className="mt-6">
+            <div className="flex items-center justify-between text-sm text-gray-600 mb-2">
+              <span>Consent Progress</span>
+              <span>{consentedCount}/{totalCount} ({consentPercentage}%)</span>
+            </div>
+            <div className="w-full bg-gray-200 rounded-full h-2">
+              <div 
+                className="bg-green-600 h-2 rounded-full transition-all duration-300" 
+                style={{ width: `${consentPercentage}%` }}
+              />
+            </div>
+          </div>
+
+          {/* Start Workshop Button */}
+          {!workshop.started && (
+            <div className="mt-6 flex justify-end">
+              <button
+                onClick={handleStartWorkshop}
+                disabled={!allConsented || isStarting}
+                className={`px-4 py-2 text-sm font-medium rounded-md ${
+                  allConsented && !isStarting
+                    ? 'text-white bg-green-600 hover:bg-green-700'
+                    : 'text-gray-500 bg-gray-100 cursor-not-allowed'
+                }`}
+              >
+                {isStarting ? 'Starting Workshop...' : 'Start Workshop'}
+              </button>
+              {!allConsented && (
+                <p className="ml-3 text-xs text-gray-500 self-center">
+                  All attendees must consent before workshop can start
+                </p>
+              )}
+            </div>
+          )}
+        </div>
+
+        {/* Attendees List */}
+        <div className="bg-white shadow rounded-lg p-6">
+          <h2 className="text-lg font-medium text-gray-900 mb-4">
+            Attendees ({workshop.attendees.length})
+          </h2>
+          
+          {error && (
+            <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-md">
+              <p className="text-sm text-red-600">{error}</p>
+            </div>
+          )}
+
+          <div className="space-y-3">
+            {workshop.attendees.map((attendee) => (
+              <AttendeeRow
+                key={attendee.id}
+                attendee={attendee}
+                workshopId={workshopId}
+                engagementId={engagementId}
+                currentUserEmail={currentUserEmail}
+                onConsentGiven={loadWorkshop}
+              />
+            ))}
+          </div>
+        </div>
+
+        {/* Workshop Started Message */}
+        {workshop.started && (
+          <div className="mt-6 bg-green-50 border border-green-200 rounded-lg p-4">
+            <div className="flex items-center space-x-2">
+              <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
+              </svg>
+              <h3 className="text-sm font-medium text-green-800">Workshop Started</h3>
+            </div>
+            <p className="mt-2 text-sm text-green-700">
+              This workshop has been started and is now in progress. All attendees have successfully given their consent to participate.
+            </p>
+          </div>
+        )}
+      </div>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/web/app/e/[engagementId]/workshops/page.tsx b/web/app/e/[engagementId]/workshops/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..30e6c2eddc70fe785b526b25a3c00e7242cdebeb
--- /dev/null
+++ b/web/app/e/[engagementId]/workshops/page.tsx
@@ -0,0 +1,376 @@
+"use client";
+import { useState, useEffect } from "react";
+import { useParams } from "next/navigation";
+import Link from "next/link";
+import { listWorkshops, getConsentStatus, hasAllConsent } from "@/lib/workshops";
+import type { Workshop } from "@/types/workshops";
+
+interface NewWorkshopModalProps {
+  isOpen: boolean;
+  onClose: () => void;
+  onSuccess: () => void;
+  engagementId: string;
+}
+
+function NewWorkshopModal({ isOpen, onClose, onSuccess, engagementId }: NewWorkshopModalProps) {
+  const [formData, setFormData] = useState({
+    title: "",
+    attendees: [{ user_id: "", email: "", role: "Member" }]
+  });
+  const [isSubmitting, setIsSubmitting] = useState(false);
+  const [error, setError] = useState("");
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    setIsSubmitting(true);
+    setError("");
+
+    try {
+      const { createWorkshop } = await import("@/lib/workshops");
+      await createWorkshop(engagementId, formData);
+      onSuccess();
+      onClose();
+      // Reset form
+      setFormData({
+        title: "",
+        attendees: [{ user_id: "", email: "", role: "Member" }]
+      });
+    } catch (err) {
+      setError(err instanceof Error ? err.message : "Failed to create workshop");
+    } finally {
+      setIsSubmitting(false);
+    }
+  };
+
+  const addAttendee = () => {
+    setFormData(prev => ({
+      ...prev,
+      attendees: [...prev.attendees, { user_id: "", email: "", role: "Member" }]
+    }));
+  };
+
+  const removeAttendee = (index: number) => {
+    setFormData(prev => ({
+      ...prev,
+      attendees: prev.attendees.filter((_, i) => i !== index)
+    }));
+  };
+
+  const updateAttendee = (index: number, field: string, value: string) => {
+    setFormData(prev => ({
+      ...prev,
+      attendees: prev.attendees.map((att, i) => 
+        i === index ? { ...att, [field]: value } : att
+      )
+    }));
+  };
+
+  if (!isOpen) return null;
+
+  return (
+    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
+      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
+        <div className="p-6">
+          <div className="flex items-center justify-between mb-6">
+            <h2 className="text-xl font-semibold">New Workshop</h2>
+            <button
+              onClick={onClose}
+              className="text-gray-400 hover:text-gray-600"
+            >
+              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
+              </svg>
+            </button>
+          </div>
+
+          <form onSubmit={handleSubmit} className="space-y-6">
+            <div>
+              <label className="block text-sm font-medium text-gray-700 mb-2">
+                Workshop Title
+              </label>
+              <input
+                type="text"
+                value={formData.title}
+                onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
+                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
+                required
+              />
+            </div>
+
+            <div>
+              <div className="flex items-center justify-between mb-3">
+                <label className="block text-sm font-medium text-gray-700">
+                  Attendees
+                </label>
+                <button
+                  type="button"
+                  onClick={addAttendee}
+                  className="text-sm text-blue-600 hover:text-blue-700"
+                >
+                  + Add Attendee
+                </button>
+              </div>
+              
+              {formData.attendees.map((attendee, index) => (
+                <div key={index} className="grid grid-cols-12 gap-3 mb-3">
+                  <div className="col-span-4">
+                    <input
+                      type="email"
+                      placeholder="Email"
+                      value={attendee.email}
+                      onChange={(e) => updateAttendee(index, "email", e.target.value)}
+                      className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
+                      required
+                    />
+                  </div>
+                  <div className="col-span-3">
+                    <input
+                      type="text"
+                      placeholder="User ID"
+                      value={attendee.user_id}
+                      onChange={(e) => updateAttendee(index, "user_id", e.target.value)}
+                      className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
+                      required
+                    />
+                  </div>
+                  <div className="col-span-3">
+                    <select
+                      value={attendee.role}
+                      onChange={(e) => updateAttendee(index, "role", e.target.value)}
+                      className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
+                    >
+                      <option value="Member">Member</option>
+                      <option value="Lead">Lead</option>
+                      <option value="Observer">Observer</option>
+                    </select>
+                  </div>
+                  <div className="col-span-2">
+                    {formData.attendees.length > 1 && (
+                      <button
+                        type="button"
+                        onClick={() => removeAttendee(index)}
+                        className="w-full h-full text-red-600 hover:text-red-700 flex items-center justify-center"
+                      >
+                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
+                        </svg>
+                      </button>
+                    )}
+                  </div>
+                </div>
+              ))}
+            </div>
+
+            {error && (
+              <div className="p-3 bg-red-50 border border-red-200 rounded-md">
+                <p className="text-sm text-red-600">{error}</p>
+              </div>
+            )}
+
+            <div className="flex justify-end space-x-3 pt-4">
+              <button
+                type="button"
+                onClick={onClose}
+                className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200"
+              >
+                Cancel
+              </button>
+              <button
+                type="submit"
+                disabled={isSubmitting}
+                className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 disabled:opacity-50"
+              >
+                {isSubmitting ? "Creating..." : "Create Workshop"}
+              </button>
+            </div>
+          </form>
+        </div>
+      </div>
+    </div>
+  );
+}
+
+function WorkshopCard({ workshop }: { workshop: Workshop }) {
+  const consentStatus = getConsentStatus(workshop);
+  const allConsented = hasAllConsent(workshop);
+
+  return (
+    <div className="bg-white shadow rounded-lg p-6 hover:shadow-lg transition-shadow">
+      <div className="flex items-start justify-between">
+        <div className="flex-1">
+          <Link href={`/e/${workshop.engagement_id}/workshops/${workshop.id}`} className="block group">
+            <h3 className="text-lg font-medium text-gray-900 group-hover:text-indigo-600">
+              {workshop.title}
+            </h3>
+          </Link>
+          
+          <div className="mt-2 flex items-center space-x-4 text-sm text-gray-500">
+            <div className="flex items-center">
+              <svg className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
+                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
+              </svg>
+              {workshop.attendees.length} attendees
+            </div>
+            <div className="flex items-center">
+              <svg className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
+                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
+              </svg>
+              {consentStatus.consented}/{consentStatus.total} consented ({consentStatus.percentage}%)
+            </div>
+            <div className="flex items-center">
+              <svg className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
+                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
+              </svg>
+              Created {new Date(workshop.created_at).toLocaleDateString()}
+            </div>
+          </div>
+        </div>
+        
+        <div className="ml-4 flex flex-col items-end space-y-2">
+          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
+            workshop.started 
+              ? 'bg-green-100 text-green-800'
+              : allConsented
+              ? 'bg-blue-100 text-blue-800' 
+              : 'bg-yellow-100 text-yellow-800'
+          }`}>
+            {workshop.started ? 'Started' : allConsented ? 'Ready' : 'Pending Consent'}
+          </span>
+        </div>
+      </div>
+      
+      <div className="mt-4 flex justify-between items-center">
+        <Link 
+          href={`/e/${workshop.engagement_id}/workshops/${workshop.id}`}
+          className="text-sm font-medium text-indigo-600 hover:text-indigo-500"
+        >
+          View Details →
+        </Link>
+        <button
+          className={`px-3 py-1 text-sm font-medium rounded-md ${
+            allConsented && !workshop.started
+              ? 'text-white bg-green-600 hover:bg-green-700'
+              : 'text-gray-500 bg-gray-100 cursor-not-allowed'
+          }`}
+          disabled={!allConsented || workshop.started}
+        >
+          {workshop.started ? 'Started' : 'Start Workshop'}
+        </button>
+      </div>
+    </div>
+  );
+}
+
+export default function WorkshopsPage() {
+  const params = useParams();
+  const engagementId = params.engagementId as string;
+  
+  const [workshops, setWorkshops] = useState<Workshop[]>([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState("");
+  const [showNewModal, setShowNewModal] = useState(false);
+
+  const loadWorkshops = async () => {
+    try {
+      setLoading(true);
+      const response = await listWorkshops(engagementId);
+      setWorkshops(response.workshops);
+    } catch (err) {
+      setError(err instanceof Error ? err.message : "Failed to load workshops");
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  useEffect(() => {
+    if (engagementId) {
+      loadWorkshops();
+    }
+  }, [engagementId]);
+
+  if (loading) {
+    return (
+      <div className="min-h-screen bg-gray-50 py-8">
+        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
+          <div className="animate-pulse">
+            <div className="h-8 bg-gray-200 rounded w-64 mb-6"></div>
+            <div className="space-y-4">
+              {[1, 2, 3].map(i => (
+                <div key={i} className="bg-white shadow rounded-lg p-6">
+                  <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
+                  <div className="h-3 bg-gray-200 rounded w-1/2"></div>
+                </div>
+              ))}
+            </div>
+          </div>
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className="min-h-screen bg-gray-50 py-8">
+      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
+        <div className="bg-white shadow-sm rounded-lg px-6 py-4 mb-6">
+          <div className="flex items-center justify-between">
+            <div>
+              <h1 className="text-2xl font-bold text-gray-900">Workshops</h1>
+              <p className="mt-1 text-sm text-gray-500">
+                Manage workshop consent and participation
+              </p>
+            </div>
+            <button
+              onClick={() => setShowNewModal(true)}
+              className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700"
+            >
+              New Workshop
+            </button>
+          </div>
+        </div>
+
+        {error && (
+          <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
+            <p className="text-sm text-red-600">{error}</p>
+          </div>
+        )}
+
+        {workshops.length === 0 ? (
+          <div className="text-center py-12">
+            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
+              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
+            </svg>
+            <h3 className="mt-2 text-sm font-medium text-gray-900">No workshops</h3>
+            <p className="mt-1 text-sm text-gray-500">Get started by creating a new workshop.</p>
+            <div className="mt-6">
+              <button
+                onClick={() => setShowNewModal(true)}
+                className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
+              >
+                <svg className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
+                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
+                </svg>
+                New Workshop
+              </button>
+            </div>
+          </div>
+        ) : (
+          <div className="space-y-4">
+            {workshops.map(workshop => (
+              <WorkshopCard key={workshop.id} workshop={workshop} />
+            ))}
+          </div>
+        )}
+
+        <NewWorkshopModal
+          isOpen={showNewModal}
+          onClose={() => setShowNewModal(false)}
+          onSuccess={() => {
+            loadWorkshops();
+            setShowNewModal(false);
+          }}
+          engagementId={engagementId}
+        />
+      </div>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/web/components/TopNav.tsx b/web/components/TopNav.tsx
index b084b79883d613a7ef746d234132c11bb405f6a3..3e6d464e1575678e9bdc403830e5555a05aaff6e 100644
--- a/web/components/TopNav.tsx
+++ b/web/components/TopNav.tsx
@@ -115,9 +115,14 @@ export default function TopNav() {
                 New Assessment
               </Link>
               {engagementId && (
-                <Link href={`/e/${engagementId}/dashboard`} className="text-sm hover:text-blue-600">
-                  Dashboard
-                </Link>
+                <>
+                  <Link href={`/e/${engagementId}/dashboard`} className="text-sm hover:text-blue-600">
+                    Dashboard
+                  </Link>
+                  <Link href={`/e/${engagementId}/workshops`} className="text-sm hover:text-blue-600">
+                    Workshops
+                  </Link>
+                </>
               )}
             </div>
           </div>
diff --git a/web/e2e/tests/workshops.spec.ts b/web/e2e/tests/workshops.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..5a5e4f0118967e7efa9eab437f5982de47f22443
--- /dev/null
+++ b/web/e2e/tests/workshops.spec.ts
@@ -0,0 +1,390 @@
+import { test, expect } from '@playwright/test';
+
+// Mock data for testing
+const mockEngagementId = 'eng-test-001';
+const mockWorkshop = {
+  title: 'Test Security Workshop',
+  attendees: [
+    { user_id: 'user1', email: 'test1@example.com', role: 'Lead' },
+    { user_id: 'user2', email: 'test2@example.com', role: 'Member' }
+  ]
+};
+
+test.describe('Workshops Consent Flow', () => {
+  test.beforeEach(async ({ page }) => {
+    // Set up demo auth
+    await page.addInitScript(() => {
+      localStorage.setItem('email', 'test1@example.com');
+      localStorage.setItem('engagementId', 'eng-test-001');
+    });
+  });
+
+  test('should display workshops list page', async ({ page }) => {
+    // Mock the API response for workshops list
+    await page.route('**/api/v1/workshops*', async (route) => {
+      await route.fulfill({
+        status: 200,
+        contentType: 'application/json',
+        body: JSON.stringify({
+          workshops: [],
+          total_count: 0,
+          page: 1,
+          page_size: 50,
+          has_more: false
+        })
+      });
+    });
+
+    await page.goto(`/e/${mockEngagementId}/workshops`);
+
+    // Check page loads
+    await expect(page.locator('h1')).toContainText('Workshops');
+    await expect(page.locator('text=New Workshop')).toBeVisible();
+    
+    // Check empty state
+    await expect(page.locator('text=No workshops')).toBeVisible();
+    await expect(page.locator('text=Get started by creating a new workshop')).toBeVisible();
+  });
+
+  test('should create new workshop via modal', async ({ page }) => {
+    let workshopCreated = false;
+
+    // Mock workshops list (empty initially)
+    await page.route('**/api/v1/workshops*', async (route) => {
+      if (route.request().method() === 'GET') {
+        await route.fulfill({
+          status: 200,
+          contentType: 'application/json',
+          body: JSON.stringify({
+            workshops: workshopCreated ? [{
+              id: 'workshop-123',
+              engagement_id: mockEngagementId,
+              ...mockWorkshop,
+              created_by: 'test1@example.com',
+              created_at: new Date().toISOString(),
+              started: false,
+              attendees: mockWorkshop.attendees.map((att, i) => ({
+                id: `attendee-${i}`,
+                ...att,
+                consent: undefined
+              }))
+            }] : [],
+            total_count: workshopCreated ? 1 : 0,
+            page: 1,
+            page_size: 50,
+            has_more: false
+          })
+        });
+      } else if (route.request().method() === 'POST') {
+        workshopCreated = true;
+        await route.fulfill({
+          status: 200,
+          contentType: 'application/json',
+          body: JSON.stringify({
+            id: 'workshop-123',
+            engagement_id: mockEngagementId,
+            ...mockWorkshop,
+            created_by: 'test1@example.com',
+            created_at: new Date().toISOString(),
+            started: false,
+            attendees: mockWorkshop.attendees.map((att, i) => ({
+              id: `attendee-${i}`,
+              ...att,
+              consent: undefined
+            }))
+          })
+        });
+      }
+    });
+
+    await page.goto(`/e/${mockEngagementId}/workshops`);
+
+    // Open new workshop modal
+    await page.locator('button', { hasText: 'New Workshop' }).first().click();
+    await expect(page.locator('text=New Workshop').nth(1)).toBeVisible();
+
+    // Fill workshop form
+    await page.fill('input[type="text"]', mockWorkshop.title);
+    
+    // Fill first attendee (pre-filled)
+    await page.fill('input[type="email"]', mockWorkshop.attendees[0].email);
+    await page.fill('input[placeholder="User ID"]', mockWorkshop.attendees[0].user_id);
+    await page.selectOption('select', mockWorkshop.attendees[0].role);
+
+    // Add second attendee
+    await page.locator('button', { hasText: '+ Add Attendee' }).click();
+    const emailInputs = page.locator('input[type="email"]');
+    const userIdInputs = page.locator('input[placeholder="User ID"]');
+    const roleSelects = page.locator('select');
+
+    await emailInputs.nth(1).fill(mockWorkshop.attendees[1].email);
+    await userIdInputs.nth(1).fill(mockWorkshop.attendees[1].user_id);
+    await roleSelects.nth(1).selectOption(mockWorkshop.attendees[1].role);
+
+    // Submit form
+    await page.locator('button[type="submit"]').click();
+
+    // Wait for modal to close and workshop to appear
+    await expect(page.locator('text=New Workshop').nth(1)).not.toBeVisible();
+    await expect(page.locator(`text=${mockWorkshop.title}`)).toBeVisible();
+  });
+
+  test('should navigate to workshop detail and show consent status', async ({ page }) => {
+    const workshopWithConsent = {
+      id: 'workshop-456',
+      engagement_id: mockEngagementId,
+      ...mockWorkshop,
+      created_by: 'test1@example.com',
+      created_at: new Date().toISOString(),
+      started: false,
+      attendees: [
+        {
+          id: 'attendee-0',
+          ...mockWorkshop.attendees[0],
+          consent: {
+            by: 'test1@example.com',
+            user_id: 'test1@example.com',
+            timestamp: new Date().toISOString()
+          }
+        },
+        {
+          id: 'attendee-1',
+          ...mockWorkshop.attendees[1],
+          consent: undefined
+        }
+      ]
+    };
+
+    // Mock workshops list
+    await page.route('**/api/v1/workshops*', async (route) => {
+      await route.fulfill({
+        status: 200,
+        contentType: 'application/json',
+        body: JSON.stringify({
+          workshops: [workshopWithConsent],
+          total_count: 1,
+          page: 1,
+          page_size: 50,
+          has_more: false
+        })
+      });
+    });
+
+    await page.goto(`/e/${mockEngagementId}/workshops`);
+    
+    // Click on workshop to go to detail page
+    await page.locator(`text=${mockWorkshop.title}`).click();
+    
+    // Check we're on detail page
+    await expect(page).toHaveURL(`/e/${mockEngagementId}/workshops/workshop-456`);
+    await expect(page.locator('h1')).toContainText(mockWorkshop.title);
+    
+    // Check consent status
+    await expect(page.locator('text=Consent Progress')).toBeVisible();
+    await expect(page.locator('text=1/2 (50%)')).toBeVisible();
+    
+    // Check attendee rows
+    await expect(page.locator('text=test1@example.com')).toBeVisible();
+    await expect(page.locator('text=test2@example.com')).toBeVisible();
+    await expect(page.locator('text=Consented')).toBeVisible();
+    await expect(page.locator('text=Consent pending')).toBeVisible();
+
+    // Start button should be disabled
+    const startButton = page.locator('button', { hasText: 'Start Workshop' });
+    await expect(startButton).toBeDisabled();
+  });
+
+  test('should give consent and enable start workshop', async ({ page }) => {
+    const workshopId = 'workshop-789';
+    let consentGiven = false;
+    let workshopStarted = false;
+
+    const getWorkshopData = () => ({
+      id: workshopId,
+      engagement_id: mockEngagementId,
+      ...mockWorkshop,
+      created_by: 'test1@example.com',
+      created_at: new Date().toISOString(),
+      started: workshopStarted,
+      started_at: workshopStarted ? new Date().toISOString() : undefined,
+      attendees: [
+        {
+          id: 'attendee-0',
+          ...mockWorkshop.attendees[0],
+          consent: {
+            by: 'test1@example.com',
+            user_id: 'test1@example.com',
+            timestamp: new Date().toISOString()
+          }
+        },
+        {
+          id: 'attendee-1',
+          ...mockWorkshop.attendees[1],
+          consent: consentGiven ? {
+            by: 'test2@example.com',
+            user_id: 'test2@example.com',
+            timestamp: new Date().toISOString()
+          } : undefined
+        }
+      ]
+    });
+
+    // Mock workshops list
+    await page.route('**/api/v1/workshops*', async (route) => {
+      await route.fulfill({
+        status: 200,
+        contentType: 'application/json',
+        body: JSON.stringify({
+          workshops: [getWorkshopData()],
+          total_count: 1,
+          page: 1,
+          page_size: 50,
+          has_more: false
+        })
+      });
+    });
+
+    // Mock consent endpoint
+    await page.route(`**/api/v1/workshops/${workshopId}/consent`, async (route) => {
+      consentGiven = true;
+      await route.fulfill({
+        status: 200,
+        contentType: 'application/json',
+        body: JSON.stringify(getWorkshopData())
+      });
+    });
+
+    // Mock start workshop endpoint
+    await page.route(`**/api/v1/workshops/${workshopId}/start`, async (route) => {
+      workshopStarted = true;
+      await route.fulfill({
+        status: 200,
+        contentType: 'application/json',
+        body: JSON.stringify({
+          workshop: getWorkshopData(),
+          message: 'Workshop started successfully'
+        })
+      });
+    });
+
+    // Set current user as second attendee to test consent
+    await page.addInitScript(() => {
+      localStorage.setItem('email', 'test2@example.com');
+    });
+
+    await page.goto(`/e/${mockEngagementId}/workshops/${workshopId}`);
+
+    // Should see consent button for current user
+    await expect(page.locator('button', { hasText: 'I Consent to Participate' })).toBeVisible();
+    
+    // Give consent
+    await page.locator('button', { hasText: 'I Consent to Participate' }).click();
+    
+    // Wait for consent to be processed
+    await expect(page.locator('text=2/2 (100%)')).toBeVisible();
+    
+    // Start button should now be enabled (but user2 is not lead, so they can't start)
+    // Let's switch back to lead user
+    await page.addInitScript(() => {
+      localStorage.setItem('email', 'test1@example.com');
+    });
+    
+    // Refresh page to get lead permissions
+    await page.reload();
+    
+    // Now start workshop button should be enabled
+    const startButton = page.locator('button', { hasText: 'Start Workshop' });
+    await expect(startButton).not.toBeDisabled();
+    
+    await startButton.click();
+    
+    // Check workshop started
+    await expect(page.locator('text=Started')).toBeVisible();
+    await expect(page.locator('text=Workshop Started')).toBeVisible();
+  });
+
+  test('should handle 403 permission errors', async ({ page }) => {
+    // Mock 403 response for workshops list
+    await page.route('**/api/v1/workshops*', async (route) => {
+      await route.fulfill({
+        status: 403,
+        contentType: 'application/json',
+        body: JSON.stringify({
+          detail: 'Insufficient permissions'
+        })
+      });
+    });
+
+    await page.goto(`/e/${mockEngagementId}/workshops`);
+    
+    // Should show error message
+    await expect(page.locator('text=Failed to load workshops')).toBeVisible();
+  });
+
+  test('should validate consent requirement before starting workshop', async ({ page }) => {
+    const workshopId = 'workshop-validation';
+    
+    const workshopData = {
+      id: workshopId,
+      engagement_id: mockEngagementId,
+      ...mockWorkshop,
+      created_by: 'test1@example.com',
+      created_at: new Date().toISOString(),
+      started: false,
+      attendees: [
+        {
+          id: 'attendee-0',
+          ...mockWorkshop.attendees[0],
+          consent: {
+            by: 'test1@example.com',
+            user_id: 'test1@example.com',
+            timestamp: new Date().toISOString()
+          }
+        },
+        {
+          id: 'attendee-1',
+          ...mockWorkshop.attendees[1],
+          consent: undefined // No consent given
+        }
+      ]
+    };
+
+    // Mock workshops list
+    await page.route('**/api/v1/workshops*', async (route) => {
+      await route.fulfill({
+        status: 200,
+        contentType: 'application/json',
+        body: JSON.stringify({
+          workshops: [workshopData],
+          total_count: 1,
+          page: 1,
+          page_size: 50,
+          has_more: false
+        })
+      });
+    });
+
+    // Mock start workshop endpoint to return 403 due to missing consent
+    await page.route(`**/api/v1/workshops/${workshopId}/start`, async (route) => {
+      await route.fulfill({
+        status: 403,
+        contentType: 'application/json',
+        body: JSON.stringify({
+          detail: 'Cannot start workshop: not all attendees have given consent'
+        })
+      });
+    });
+
+    await page.goto(`/e/${mockEngagementId}/workshops/${workshopId}`);
+
+    // Start button should be disabled due to missing consent
+    const startButton = page.locator('button', { hasText: 'Start Workshop' });
+    await expect(startButton).toBeDisabled();
+    
+    // Should show validation message
+    await expect(page.locator('text=All attendees must consent before workshop can start')).toBeVisible();
+    
+    // Progress should show incomplete
+    await expect(page.locator('text=1/2 (50%)')).toBeVisible();
+  });
+});
\ No newline at end of file
diff --git a/web/lib/workshops.ts b/web/lib/workshops.ts
new file mode 100644
index 0000000000000000000000000000000000000000..a9034be7828a038dd1112b82dfe616cd285aa393
--- /dev/null
+++ b/web/lib/workshops.ts
@@ -0,0 +1,118 @@
+import { apiFetch } from "./api";
+import type {
+  Workshop,
+  WorkshopListResponse,
+  CreateWorkshopFormData,
+  ConsentRequestData,
+  StartWorkshopResponse,
+} from "@/types/workshops";
+
+/**
+ * Create a new workshop
+ */
+export async function createWorkshop(
+  engagementId: string,
+  data: CreateWorkshopFormData
+): Promise<Workshop> {
+  const payload = {
+    engagement_id: engagementId,
+    title: data.title,
+    start_ts: data.start_ts || null,
+    attendees: data.attendees,
+  };
+
+  const response = await apiFetch("/api/v1/workshops", {
+    method: "POST",
+    headers: {
+      "Content-Type": "application/json",
+      "X-Engagement-ID": engagementId,
+    },
+    body: JSON.stringify(payload),
+  });
+
+  return response;
+}
+
+/**
+ * List workshops for an engagement
+ */
+export async function listWorkshops(
+  engagementId: string,
+  page: number = 1,
+  pageSize: number = 50
+): Promise<WorkshopListResponse> {
+  const params = new URLSearchParams({
+    engagement_id: engagementId,
+    page: page.toString(),
+    page_size: pageSize.toString(),
+  });
+
+  const response = await apiFetch(`/api/v1/workshops?${params}`, {
+    headers: {
+      "X-Engagement-ID": engagementId,
+    },
+  });
+
+  return response;
+}
+
+/**
+ * Give consent for workshop attendance
+ */
+export async function giveConsent(
+  engagementId: string,
+  workshopId: string,
+  data: ConsentRequestData
+): Promise<Workshop> {
+  const response = await apiFetch(`/api/v1/workshops/${workshopId}/consent`, {
+    method: "POST",
+    headers: {
+      "Content-Type": "application/json",
+      "X-Engagement-ID": engagementId,
+    },
+    body: JSON.stringify(data),
+  });
+
+  return response;
+}
+
+/**
+ * Start a workshop (requires lead permissions and all consent)
+ */
+export async function startWorkshop(
+  engagementId: string,
+  workshopId: string
+): Promise<StartWorkshopResponse> {
+  const response = await apiFetch(`/api/v1/workshops/${workshopId}/start`, {
+    method: "POST",
+    headers: {
+      "X-Engagement-ID": engagementId,
+    },
+  });
+
+  return response;
+}
+
+/**
+ * Check if all attendees have given consent
+ */
+export function hasAllConsent(workshop: Workshop): boolean {
+  return workshop.attendees.every((attendee) => attendee.consent !== undefined);
+}
+
+/**
+ * Get consent status summary
+ */
+export function getConsentStatus(workshop: Workshop): {
+  total: number;
+  consented: number;
+  pending: number;
+  percentage: number;
+} {
+  const total = workshop.attendees.length;
+  const consented = workshop.attendees.filter((a) => a.consent).length;
+  const pending = total - consented;
+  const percentage = total > 0 ? Math.round((consented / total) * 100) : 0;
+
+  return { total, consented, pending, percentage };
+}
\ No newline at end of file
diff --git a/web/tsconfig.tsbuildinfo b/web/tsconfig.tsbuildinfo
deleted file mode 100644
index 88a78ad03a5c6f5fb5eba278c9b913c768c82f72..0000000000000000000000000000000000000000
--- a/web/tsconfig.tsbuildinfo
+++ /dev/null
@@ -1 +0,0 @@
-{"fileNames":["./node_modules/typescript/lib/lib.es5.d.ts","./node_modules/typescript/lib/lib.es2015.d.ts","./node_modules/typescript/lib/lib.es2016.d.ts","./node_modules/typescript/lib/lib.es2017.d.ts","./node_modules/typescript/lib/lib.es2018.d.ts","./node_modules/typescript/lib/lib.es2019.d.ts","./node_modules/typescript/lib/lib.es2020.d.ts","./node_modules/typescript/lib/lib.es2021.d.ts","./node_modules/typescript/lib/lib.es2022.d.ts","./node_modules/typescript/lib/lib.es2023.d.ts","./node_modules/typescript/lib/lib.es2024.d.ts","./node_modules/typescript/lib/lib.esnext.d.ts","./node_modules/typescript/lib/lib.dom.d.ts","./node_modules/typescript/lib/lib.dom.iterable.d.ts","./node_modules/typescript/lib/lib.es2015.core.d.ts","./node_modules/typescript/lib/lib.es2015.collection.d.ts","./node_modules/typescript/lib/lib.es2015.generator.d.ts","./node_modules/typescript/lib/lib.es2015.iterable.d.ts","./node_modules/typescript/lib/lib.es2015.promise.d.ts","./node_modules/typescript/lib/lib.es2015.proxy.d.ts","./node_modules/typescript/lib/lib.es2015.reflect.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2016.array.include.d.ts","./node_modules/typescript/lib/lib.es2016.intl.d.ts","./node_modules/typescript/lib/lib.es2017.arraybuffer.d.ts","./node_modules/typescript/lib/lib.es2017.date.d.ts","./node_modules/typescript/lib/lib.es2017.object.d.ts","./node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2017.string.d.ts","./node_modules/typescript/lib/lib.es2017.intl.d.ts","./node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","./node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","./node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","./node_modules/typescript/lib/lib.es2018.intl.d.ts","./node_modules/typescript/lib/lib.es2018.promise.d.ts","./node_modules/typescript/lib/lib.es2018.regexp.d.ts","./node_modules/typescript/lib/lib.es2019.array.d.ts","./node_modules/typescript/lib/lib.es2019.object.d.ts","./node_modules/typescript/lib/lib.es2019.string.d.ts","./node_modules/typescript/lib/lib.es2019.symbol.d.ts","./node_modules/typescript/lib/lib.es2019.intl.d.ts","./node_modules/typescript/lib/lib.es2020.bigint.d.ts","./node_modules/typescript/lib/lib.es2020.date.d.ts","./node_modules/typescript/lib/lib.es2020.promise.d.ts","./node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2020.string.d.ts","./node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2020.intl.d.ts","./node_modules/typescript/lib/lib.es2020.number.d.ts","./node_modules/typescript/lib/lib.es2021.promise.d.ts","./node_modules/typescript/lib/lib.es2021.string.d.ts","./node_modules/typescript/lib/lib.es2021.weakref.d.ts","./node_modules/typescript/lib/lib.es2021.intl.d.ts","./node_modules/typescript/lib/lib.es2022.array.d.ts","./node_modules/typescript/lib/lib.es2022.error.d.ts","./node_modules/typescript/lib/lib.es2022.intl.d.ts","./node_modules/typescript/lib/lib.es2022.object.d.ts","./node_modules/typescript/lib/lib.es2022.string.d.ts","./node_modules/typescript/lib/lib.es2022.regexp.d.ts","./node_modules/typescript/lib/lib.es2023.array.d.ts","./node_modules/typescript/lib/lib.es2023.collection.d.ts","./node_modules/typescript/lib/lib.es2023.intl.d.ts","./node_modules/typescript/lib/lib.es2024.arraybuffer.d.ts","./node_modules/typescript/lib/lib.es2024.collection.d.ts","./node_modules/typescript/lib/lib.es2024.object.d.ts","./node_modules/typescript/lib/lib.es2024.promise.d.ts","./node_modules/typescript/lib/lib.es2024.regexp.d.ts","./node_modules/typescript/lib/lib.es2024.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2024.string.d.ts","./node_modules/typescript/lib/lib.esnext.array.d.ts","./node_modules/typescript/lib/lib.esnext.collection.d.ts","./node_modules/typescript/lib/lib.esnext.intl.d.ts","./node_modules/typescript/lib/lib.esnext.disposable.d.ts","./node_modules/typescript/lib/lib.esnext.promise.d.ts","./node_modules/typescript/lib/lib.esnext.decorators.d.ts","./node_modules/typescript/lib/lib.esnext.iterator.d.ts","./node_modules/typescript/lib/lib.esnext.float16.d.ts","./node_modules/typescript/lib/lib.esnext.error.d.ts","./node_modules/typescript/lib/lib.esnext.sharedmemory.d.ts","./node_modules/typescript/lib/lib.decorators.d.ts","./node_modules/typescript/lib/lib.decorators.legacy.d.ts","./node_modules/next/dist/styled-jsx/types/css.d.ts","./node_modules/@types/react/global.d.ts","./node_modules/csstype/index.d.ts","./node_modules/@types/prop-types/index.d.ts","./node_modules/@types/react/index.d.ts","./node_modules/next/dist/styled-jsx/types/index.d.ts","./node_modules/next/dist/styled-jsx/types/macro.d.ts","./node_modules/next/dist/styled-jsx/types/style.d.ts","./node_modules/next/dist/styled-jsx/types/global.d.ts","./node_modules/next/dist/shared/lib/amp.d.ts","./node_modules/next/amp.d.ts","./node_modules/@types/node/compatibility/disposable.d.ts","./node_modules/@types/node/compatibility/indexable.d.ts","./node_modules/@types/node/compatibility/iterators.d.ts","./node_modules/@types/node/compatibility/index.d.ts","./node_modules/@types/node/globals.typedarray.d.ts","./node_modules/@types/node/buffer.buffer.d.ts","./node_modules/undici-types/header.d.ts","./node_modules/undici-types/readable.d.ts","./node_modules/undici-types/file.d.ts","./node_modules/undici-types/fetch.d.ts","./node_modules/undici-types/formdata.d.ts","./node_modules/undici-types/connector.d.ts","./node_modules/undici-types/client.d.ts","./node_modules/undici-types/errors.d.ts","./node_modules/undici-types/dispatcher.d.ts","./node_modules/undici-types/global-dispatcher.d.ts","./node_modules/undici-types/global-origin.d.ts","./node_modules/undici-types/pool-stats.d.ts","./node_modules/undici-types/pool.d.ts","./node_modules/undici-types/handlers.d.ts","./node_modules/undici-types/balanced-pool.d.ts","./node_modules/undici-types/agent.d.ts","./node_modules/undici-types/mock-interceptor.d.ts","./node_modules/undici-types/mock-agent.d.ts","./node_modules/undici-types/mock-client.d.ts","./node_modules/undici-types/mock-pool.d.ts","./node_modules/undici-types/mock-errors.d.ts","./node_modules/undici-types/proxy-agent.d.ts","./node_modules/undici-types/env-http-proxy-agent.d.ts","./node_modules/undici-types/retry-handler.d.ts","./node_modules/undici-types/retry-agent.d.ts","./node_modules/undici-types/api.d.ts","./node_modules/undici-types/interceptors.d.ts","./node_modules/undici-types/util.d.ts","./node_modules/undici-types/cookies.d.ts","./node_modules/undici-types/patch.d.ts","./node_modules/undici-types/websocket.d.ts","./node_modules/undici-types/eventsource.d.ts","./node_modules/undici-types/filereader.d.ts","./node_modules/undici-types/diagnostics-channel.d.ts","./node_modules/undici-types/content-type.d.ts","./node_modules/undici-types/cache.d.ts","./node_modules/undici-types/index.d.ts","./node_modules/@types/node/globals.d.ts","./node_modules/@types/node/assert.d.ts","./node_modules/@types/node/assert/strict.d.ts","./node_modules/@types/node/async_hooks.d.ts","./node_modules/@types/node/buffer.d.ts","./node_modules/@types/node/child_process.d.ts","./node_modules/@types/node/cluster.d.ts","./node_modules/@types/node/console.d.ts","./node_modules/@types/node/constants.d.ts","./node_modules/@types/node/crypto.d.ts","./node_modules/@types/node/dgram.d.ts","./node_modules/@types/node/diagnostics_channel.d.ts","./node_modules/@types/node/dns.d.ts","./node_modules/@types/node/dns/promises.d.ts","./node_modules/@types/node/domain.d.ts","./node_modules/@types/node/dom-events.d.ts","./node_modules/@types/node/events.d.ts","./node_modules/@types/node/fs.d.ts","./node_modules/@types/node/fs/promises.d.ts","./node_modules/@types/node/http.d.ts","./node_modules/@types/node/http2.d.ts","./node_modules/@types/node/https.d.ts","./node_modules/@types/node/inspector.d.ts","./node_modules/@types/node/module.d.ts","./node_modules/@types/node/net.d.ts","./node_modules/@types/node/os.d.ts","./node_modules/@types/node/path.d.ts","./node_modules/@types/node/perf_hooks.d.ts","./node_modules/@types/node/process.d.ts","./node_modules/@types/node/punycode.d.ts","./node_modules/@types/node/querystring.d.ts","./node_modules/@types/node/readline.d.ts","./node_modules/@types/node/readline/promises.d.ts","./node_modules/@types/node/repl.d.ts","./node_modules/@types/node/sea.d.ts","./node_modules/@types/node/stream.d.ts","./node_modules/@types/node/stream/promises.d.ts","./node_modules/@types/node/stream/consumers.d.ts","./node_modules/@types/node/stream/web.d.ts","./node_modules/@types/node/string_decoder.d.ts","./node_modules/@types/node/test.d.ts","./node_modules/@types/node/timers.d.ts","./node_modules/@types/node/timers/promises.d.ts","./node_modules/@types/node/tls.d.ts","./node_modules/@types/node/trace_events.d.ts","./node_modules/@types/node/tty.d.ts","./node_modules/@types/node/url.d.ts","./node_modules/@types/node/util.d.ts","./node_modules/@types/node/v8.d.ts","./node_modules/@types/node/vm.d.ts","./node_modules/@types/node/wasi.d.ts","./node_modules/@types/node/worker_threads.d.ts","./node_modules/@types/node/zlib.d.ts","./node_modules/@types/node/index.d.ts","./node_modules/next/dist/server/get-page-files.d.ts","./node_modules/@types/react/canary.d.ts","./node_modules/@types/react/experimental.d.ts","./node_modules/next/dist/compiled/webpack/webpack.d.ts","./node_modules/next/dist/server/config.d.ts","./node_modules/next/dist/lib/load-custom-routes.d.ts","./node_modules/next/dist/shared/lib/image-config.d.ts","./node_modules/next/dist/build/webpack/plugins/subresource-integrity-plugin.d.ts","./node_modules/next/dist/server/body-streams.d.ts","./node_modules/next/dist/server/future/route-kind.d.ts","./node_modules/next/dist/server/future/route-definitions/route-definition.d.ts","./node_modules/next/dist/server/future/route-matches/route-match.d.ts","./node_modules/next/dist/client/components/app-router-headers.d.ts","./node_modules/next/dist/server/request-meta.d.ts","./node_modules/next/dist/server/lib/revalidate.d.ts","./node_modules/next/dist/server/config-shared.d.ts","./node_modules/next/dist/server/base-http/index.d.ts","./node_modules/next/dist/server/api-utils/index.d.ts","./node_modules/next/dist/server/node-environment.d.ts","./node_modules/next/dist/server/require-hook.d.ts","./node_modules/next/dist/server/node-polyfill-crypto.d.ts","./node_modules/next/dist/lib/page-types.d.ts","./node_modules/next/dist/build/analysis/get-page-static-info.d.ts","./node_modules/next/dist/build/webpack/loaders/get-module-build-info.d.ts","./node_modules/next/dist/build/webpack/plugins/middleware-plugin.d.ts","./node_modules/next/dist/server/render-result.d.ts","./node_modules/next/dist/server/future/helpers/i18n-provider.d.ts","./node_modules/next/dist/server/web/next-url.d.ts","./node_modules/next/dist/compiled/@edge-runtime/cookies/index.d.ts","./node_modules/next/dist/server/web/spec-extension/cookies.d.ts","./node_modules/next/dist/server/web/spec-extension/request.d.ts","./node_modules/next/dist/server/web/spec-extension/fetch-event.d.ts","./node_modules/next/dist/server/web/spec-extension/response.d.ts","./node_modules/next/dist/server/web/types.d.ts","./node_modules/next/dist/lib/setup-exception-listeners.d.ts","./node_modules/next/dist/lib/constants.d.ts","./node_modules/next/dist/build/index.d.ts","./node_modules/next/dist/build/webpack/plugins/pages-manifest-plugin.d.ts","./node_modules/next/dist/shared/lib/router/utils/route-regex.d.ts","./node_modules/next/dist/shared/lib/router/utils/route-matcher.d.ts","./node_modules/next/dist/shared/lib/router/utils/parse-url.d.ts","./node_modules/next/dist/server/base-http/node.d.ts","./node_modules/next/dist/server/font-utils.d.ts","./node_modules/next/dist/build/webpack/plugins/flight-manifest-plugin.d.ts","./node_modules/next/dist/server/future/route-modules/route-module.d.ts","./node_modules/next/dist/shared/lib/deep-readonly.d.ts","./node_modules/next/dist/server/load-components.d.ts","./node_modules/next/dist/shared/lib/router/utils/middleware-route-matcher.d.ts","./node_modules/next/dist/build/webpack/plugins/next-font-manifest-plugin.d.ts","./node_modules/next/dist/server/future/route-definitions/locale-route-definition.d.ts","./node_modules/next/dist/server/future/route-definitions/pages-route-definition.d.ts","./node_modules/next/dist/shared/lib/mitt.d.ts","./node_modules/next/dist/client/with-router.d.ts","./node_modules/next/dist/client/router.d.ts","./node_modules/next/dist/client/route-loader.d.ts","./node_modules/next/dist/client/page-loader.d.ts","./node_modules/next/dist/shared/lib/bloom-filter.d.ts","./node_modules/next/dist/shared/lib/router/router.d.ts","./node_modules/next/dist/shared/lib/router-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/loadable-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/loadable.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/image-config-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/hooks-client-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/head-manager-context.shared-runtime.d.ts","./node_modules/next/dist/server/future/route-definitions/app-page-route-definition.d.ts","./node_modules/next/dist/shared/lib/modern-browserslist-target.d.ts","./node_modules/next/dist/shared/lib/constants.d.ts","./node_modules/next/dist/build/webpack/loaders/metadata/types.d.ts","./node_modules/next/dist/build/page-extensions-type.d.ts","./node_modules/next/dist/build/webpack/loaders/next-app-loader.d.ts","./node_modules/next/dist/server/lib/app-dir-module.d.ts","./node_modules/next/dist/server/response-cache/types.d.ts","./node_modules/next/dist/server/response-cache/index.d.ts","./node_modules/next/dist/server/lib/incremental-cache/index.d.ts","./node_modules/next/dist/client/components/hooks-server-context.d.ts","./node_modules/next/dist/server/app-render/dynamic-rendering.d.ts","./node_modules/next/dist/client/components/static-generation-async-storage-instance.d.ts","./node_modules/next/dist/client/components/static-generation-async-storage.external.d.ts","./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.d.ts","./node_modules/next/dist/server/async-storage/draft-mode-provider.d.ts","./node_modules/next/dist/server/web/spec-extension/adapters/headers.d.ts","./node_modules/next/dist/client/components/request-async-storage-instance.d.ts","./node_modules/next/dist/client/components/request-async-storage.external.d.ts","./node_modules/next/dist/server/app-render/create-error-handler.d.ts","./node_modules/next/dist/server/app-render/app-render.d.ts","./node_modules/next/dist/shared/lib/server-inserted-html.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/amp-context.shared-runtime.d.ts","./node_modules/next/dist/server/future/route-modules/app-page/vendored/contexts/entrypoints.d.ts","./node_modules/next/dist/server/future/route-modules/app-page/module.compiled.d.ts","./node_modules/@types/react/jsx-runtime.d.ts","./node_modules/next/dist/client/components/error-boundary.d.ts","./node_modules/next/dist/client/components/router-reducer/create-initial-router-state.d.ts","./node_modules/next/dist/client/components/app-router.d.ts","./node_modules/next/dist/client/components/layout-router.d.ts","./node_modules/next/dist/client/components/render-from-template-context.d.ts","./node_modules/next/dist/client/components/action-async-storage-instance.d.ts","./node_modules/next/dist/client/components/action-async-storage.external.d.ts","./node_modules/next/dist/client/components/client-page.d.ts","./node_modules/next/dist/client/components/search-params.d.ts","./node_modules/next/dist/client/components/not-found-boundary.d.ts","./node_modules/next/dist/server/app-render/rsc/preloads.d.ts","./node_modules/next/dist/server/app-render/rsc/postpone.d.ts","./node_modules/next/dist/server/app-render/rsc/taint.d.ts","./node_modules/next/dist/server/app-render/entry-base.d.ts","./node_modules/next/dist/build/templates/app-page.d.ts","./node_modules/next/dist/server/future/route-modules/app-page/module.d.ts","./node_modules/next/dist/server/lib/builtin-request-context.d.ts","./node_modules/next/dist/server/app-render/types.d.ts","./node_modules/next/dist/client/components/router-reducer/fetch-server-response.d.ts","./node_modules/next/dist/client/components/router-reducer/router-reducer-types.d.ts","./node_modules/next/dist/shared/lib/app-router-context.shared-runtime.d.ts","./node_modules/next/dist/server/future/route-modules/pages/vendored/contexts/entrypoints.d.ts","./node_modules/next/dist/server/future/route-modules/pages/module.compiled.d.ts","./node_modules/next/dist/build/templates/pages.d.ts","./node_modules/next/dist/server/future/route-modules/pages/module.d.ts","./node_modules/next/dist/server/render.d.ts","./node_modules/next/dist/server/future/route-definitions/pages-api-route-definition.d.ts","./node_modules/next/dist/server/future/route-matches/pages-api-route-match.d.ts","./node_modules/next/dist/server/future/route-matchers/route-matcher.d.ts","./node_modules/next/dist/server/future/route-matcher-providers/route-matcher-provider.d.ts","./node_modules/next/dist/server/future/route-matcher-managers/route-matcher-manager.d.ts","./node_modules/next/dist/server/future/normalizers/normalizer.d.ts","./node_modules/next/dist/server/future/normalizers/locale-route-normalizer.d.ts","./node_modules/next/dist/server/future/normalizers/request/pathname-normalizer.d.ts","./node_modules/next/dist/server/future/normalizers/request/suffix.d.ts","./node_modules/next/dist/server/future/normalizers/request/rsc.d.ts","./node_modules/next/dist/server/future/normalizers/request/prefix.d.ts","./node_modules/next/dist/server/future/normalizers/request/postponed.d.ts","./node_modules/next/dist/server/future/normalizers/request/action.d.ts","./node_modules/next/dist/server/future/normalizers/request/prefetch-rsc.d.ts","./node_modules/next/dist/server/future/normalizers/request/next-data.d.ts","./node_modules/next/dist/server/base-server.d.ts","./node_modules/next/dist/server/image-optimizer.d.ts","./node_modules/next/dist/server/next-server.d.ts","./node_modules/next/dist/lib/coalesced-function.d.ts","./node_modules/next/dist/server/lib/router-utils/types.d.ts","./node_modules/next/dist/trace/types.d.ts","./node_modules/next/dist/trace/trace.d.ts","./node_modules/next/dist/trace/shared.d.ts","./node_modules/next/dist/trace/index.d.ts","./node_modules/next/dist/build/load-jsconfig.d.ts","./node_modules/next/dist/build/webpack-config.d.ts","./node_modules/next/dist/build/webpack/plugins/define-env-plugin.d.ts","./node_modules/next/dist/build/swc/index.d.ts","./node_modules/next/dist/server/dev/parse-version-info.d.ts","./node_modules/next/dist/server/dev/hot-reloader-types.d.ts","./node_modules/next/dist/telemetry/storage.d.ts","./node_modules/next/dist/server/lib/types.d.ts","./node_modules/next/dist/server/lib/render-server.d.ts","./node_modules/next/dist/server/lib/router-server.d.ts","./node_modules/next/dist/shared/lib/router/utils/path-match.d.ts","./node_modules/next/dist/server/lib/router-utils/filesystem.d.ts","./node_modules/next/dist/server/lib/router-utils/setup-dev-bundler.d.ts","./node_modules/next/dist/server/lib/dev-bundler-service.d.ts","./node_modules/next/dist/server/dev/static-paths-worker.d.ts","./node_modules/next/dist/server/dev/next-dev-server.d.ts","./node_modules/next/dist/server/next.d.ts","./node_modules/next/dist/lib/metadata/types/alternative-urls-types.d.ts","./node_modules/next/dist/lib/metadata/types/extra-types.d.ts","./node_modules/next/dist/lib/metadata/types/metadata-types.d.ts","./node_modules/next/dist/lib/metadata/types/manifest-types.d.ts","./node_modules/next/dist/lib/metadata/types/opengraph-types.d.ts","./node_modules/next/dist/lib/metadata/types/twitter-types.d.ts","./node_modules/next/dist/lib/metadata/types/metadata-interface.d.ts","./node_modules/next/types/index.d.ts","./node_modules/next/dist/shared/lib/html-context.shared-runtime.d.ts","./node_modules/@next/env/dist/index.d.ts","./node_modules/next/dist/shared/lib/utils.d.ts","./node_modules/next/dist/pages/_app.d.ts","./node_modules/next/app.d.ts","./node_modules/next/dist/server/web/spec-extension/unstable-cache.d.ts","./node_modules/next/dist/server/web/spec-extension/revalidate.d.ts","./node_modules/next/dist/server/web/spec-extension/unstable-no-store.d.ts","./node_modules/next/cache.d.ts","./node_modules/next/dist/shared/lib/runtime-config.external.d.ts","./node_modules/next/config.d.ts","./node_modules/next/dist/pages/_document.d.ts","./node_modules/next/document.d.ts","./node_modules/next/dist/shared/lib/dynamic.d.ts","./node_modules/next/dynamic.d.ts","./node_modules/next/dist/pages/_error.d.ts","./node_modules/next/error.d.ts","./node_modules/next/dist/shared/lib/head.d.ts","./node_modules/next/head.d.ts","./node_modules/next/dist/client/components/draft-mode.d.ts","./node_modules/next/dist/client/components/headers.d.ts","./node_modules/next/headers.d.ts","./node_modules/next/dist/shared/lib/get-img-props.d.ts","./node_modules/next/dist/client/image-component.d.ts","./node_modules/next/dist/shared/lib/image-external.d.ts","./node_modules/next/image.d.ts","./node_modules/next/dist/client/link.d.ts","./node_modules/next/link.d.ts","./node_modules/next/dist/client/components/redirect-status-code.d.ts","./node_modules/next/dist/client/components/redirect.d.ts","./node_modules/next/dist/client/components/not-found.d.ts","./node_modules/next/dist/client/components/navigation.react-server.d.ts","./node_modules/next/dist/client/components/navigation.d.ts","./node_modules/next/navigation.d.ts","./node_modules/next/router.d.ts","./node_modules/next/dist/client/script.d.ts","./node_modules/next/script.d.ts","./node_modules/next/dist/server/web/spec-extension/user-agent.d.ts","./node_modules/next/dist/compiled/@edge-runtime/primitives/url.d.ts","./node_modules/next/dist/server/web/spec-extension/image-response.d.ts","./node_modules/next/dist/compiled/@vercel/og/satori/index.d.ts","./node_modules/next/dist/compiled/@vercel/og/emoji/index.d.ts","./node_modules/next/dist/compiled/@vercel/og/types.d.ts","./node_modules/next/server.d.ts","./node_modules/next/types/global.d.ts","./node_modules/next/types/compiled.d.ts","./node_modules/next/index.d.ts","./node_modules/next/image-types/global.d.ts","./next-env.d.ts","./app/api/auth/mode/route.ts","./app/api/auth/session/route.ts","./app/api/auth/signin/route.ts","./types/evidence.ts","./components/authprovider.tsx","./app/api/proxy/[...path]/route.ts","./lib/auth.ts","./lib/api.ts","./types/gdpr.ts","./lib/gdpr.ts","./components/gdpr/gdprdashboard.tsx","./components/gdpr/dataexportdialog.tsx","./components/gdpr/datapurgedialog.tsx","./components/gdpr/auditlogviewer.tsx","./components/gdpr/index.ts","./node_modules/playwright-core/types/protocol.d.ts","./node_modules/playwright-core/types/structs.d.ts","./node_modules/playwright-core/types/types.d.ts","./node_modules/playwright-core/index.d.ts","./node_modules/playwright/types/test.d.ts","./node_modules/playwright/test.d.ts","./node_modules/@playwright/test/index.d.ts","./e2e/global-setup.ts","./e2e/global-teardown.ts","./e2e/playwright.config.ts","./e2e/test-utils/enterprise.ts","./e2e/test-utils/data-generators.ts","./e2e/test-utils.ts","./e2e/tests/aad-groups.spec.ts","./e2e/tests/admin-enterprise.spec.ts","./e2e/tests/auth-cleanup.spec.ts","./e2e/tests/auth-setup.spec.ts","./e2e/tests/auth.spec.ts","./e2e/tests/csf-grid.spec.ts","./e2e/tests/engagements.spec.ts","./e2e/tests/enterprise-cleanup.spec.ts","./e2e/tests/enterprise-setup.spec.ts","./e2e/tests/evidence.spec.ts","./e2e/tests/gdpr.spec.ts","./e2e/tests/integration.spec.ts","./e2e/tests/performance.spec.ts","./e2e/tests/rag-advanced.spec.ts","./e2e/tests/rag-integration.spec.ts","./e2e/tests/rag.spec.ts","./e2e/tests/rbac.spec.ts","./e2e/tests/smoke.spec.ts","./lib/assessments.ts","./types/csf.ts","./lib/csf.ts","./lib/docs.ts","./lib/evidence.ts","./lib/orchestration.ts","./lib/summary.ts","./types/auth.ts","./components/engagementswitcher.tsx","./components/topnav.tsx","./app/layout.tsx","./app/page.tsx","./app/403/page.tsx","./components/authdiagnostics.tsx","./app/admin/auth/page.tsx","./app/admin/gdpr/page.tsx","./app/admin/modes/page.tsx","./components/ragstatuspanel.tsx","./components/evidenceadminpanel.tsx","./app/admin/ops/page.tsx","./app/admin/presets/page.tsx","./node_modules/recharts/types/container/surface.d.ts","./node_modules/recharts/types/container/layer.d.ts","./node_modules/@types/d3-time/index.d.ts","./node_modules/@types/d3-scale/index.d.ts","./node_modules/victory-vendor/d3-scale.d.ts","./node_modules/recharts/types/cartesian/xaxis.d.ts","./node_modules/recharts/types/cartesian/yaxis.d.ts","./node_modules/recharts/types/util/types.d.ts","./node_modules/recharts/types/component/defaultlegendcontent.d.ts","./node_modules/recharts/types/util/payload/getuniqpayload.d.ts","./node_modules/recharts/types/component/legend.d.ts","./node_modules/recharts/types/component/defaulttooltipcontent.d.ts","./node_modules/recharts/types/component/tooltip.d.ts","./node_modules/recharts/types/component/responsivecontainer.d.ts","./node_modules/recharts/types/component/cell.d.ts","./node_modules/recharts/types/component/text.d.ts","./node_modules/recharts/types/component/label.d.ts","./node_modules/recharts/types/component/labellist.d.ts","./node_modules/recharts/types/component/customized.d.ts","./node_modules/recharts/types/shape/sector.d.ts","./node_modules/@types/d3-path/index.d.ts","./node_modules/@types/d3-shape/index.d.ts","./node_modules/victory-vendor/d3-shape.d.ts","./node_modules/recharts/types/shape/curve.d.ts","./node_modules/recharts/types/shape/rectangle.d.ts","./node_modules/recharts/types/shape/polygon.d.ts","./node_modules/recharts/types/shape/dot.d.ts","./node_modules/recharts/types/shape/cross.d.ts","./node_modules/recharts/types/shape/symbols.d.ts","./node_modules/recharts/types/polar/polargrid.d.ts","./node_modules/recharts/types/polar/polarradiusaxis.d.ts","./node_modules/recharts/types/polar/polarangleaxis.d.ts","./node_modules/recharts/types/polar/pie.d.ts","./node_modules/recharts/types/polar/radar.d.ts","./node_modules/recharts/types/polar/radialbar.d.ts","./node_modules/recharts/types/cartesian/brush.d.ts","./node_modules/recharts/types/util/ifoverflowmatches.d.ts","./node_modules/recharts/types/cartesian/referenceline.d.ts","./node_modules/recharts/types/cartesian/referencedot.d.ts","./node_modules/recharts/types/cartesian/referencearea.d.ts","./node_modules/recharts/types/cartesian/cartesianaxis.d.ts","./node_modules/recharts/types/cartesian/cartesiangrid.d.ts","./node_modules/recharts/types/cartesian/line.d.ts","./node_modules/recharts/types/cartesian/area.d.ts","./node_modules/recharts/types/util/barutils.d.ts","./node_modules/recharts/types/cartesian/bar.d.ts","./node_modules/recharts/types/cartesian/zaxis.d.ts","./node_modules/recharts/types/cartesian/errorbar.d.ts","./node_modules/recharts/types/cartesian/scatter.d.ts","./node_modules/recharts/types/util/getlegendprops.d.ts","./node_modules/recharts/types/util/chartutils.d.ts","./node_modules/recharts/types/chart/accessibilitymanager.d.ts","./node_modules/recharts/types/chart/types.d.ts","./node_modules/recharts/types/chart/generatecategoricalchart.d.ts","./node_modules/recharts/types/chart/linechart.d.ts","./node_modules/recharts/types/chart/barchart.d.ts","./node_modules/recharts/types/chart/piechart.d.ts","./node_modules/recharts/types/chart/treemap.d.ts","./node_modules/recharts/types/chart/sankey.d.ts","./node_modules/recharts/types/chart/radarchart.d.ts","./node_modules/recharts/types/chart/scatterchart.d.ts","./node_modules/recharts/types/chart/areachart.d.ts","./node_modules/recharts/types/chart/radialbarchart.d.ts","./node_modules/recharts/types/chart/composedchart.d.ts","./node_modules/recharts/types/chart/sunburstchart.d.ts","./node_modules/recharts/types/shape/trapezoid.d.ts","./node_modules/recharts/types/numberaxis/funnel.d.ts","./node_modules/recharts/types/chart/funnelchart.d.ts","./node_modules/recharts/types/util/global.d.ts","./node_modules/recharts/types/index.d.ts","./components/scoreradar.tsx","./components/evidenceuploader.tsx","./app/assessment/[id]/page.tsx","./components/questioncard.tsx","./app/assessment/draft/page.tsx","./app/demo-orchestration/page.tsx","./app/e/[engagementid]/assessment/page.tsx","./components/documentspanel.tsx","./components/evidencesearch.tsx","./components/ragtoggle.tsx","./components/citationslist.tsx","./components/analysiswithevidence.tsx","./app/e/[engagementid]/dashboard/page.tsx","./app/e/[engagementid]/demo/page.tsx","./app/e/[engagementid]/gdpr/page.tsx","./app/engagements/page.tsx","./app/new/page.tsx","./app/signin/page.tsx","./app/test-evidence/page.tsx","./components/enhancedevidencesearch.tsx","./components/ragsourcespanel.tsx","./.next/types/app/page.ts","./.next/types/app/403/page.ts","./.next/types/app/admin/auth/page.ts","./.next/types/app/admin/gdpr/page.ts","./.next/types/app/admin/modes/page.ts","./.next/types/app/admin/ops/page.ts","./.next/types/app/admin/presets/page.ts","./.next/types/app/api/auth/mode/route.ts","./.next/types/app/api/auth/session/route.ts","./.next/types/app/api/auth/signin/route.ts","./.next/types/app/api/proxy/[...path]/route.ts","./.next/types/app/assessment/[id]/page.ts","./.next/types/app/assessment/draft/page.ts","./.next/types/app/demo-orchestration/page.ts","./.next/types/app/e/[engagementid]/dashboard/page.ts","./.next/types/app/e/[engagementid]/demo/page.ts","./.next/types/app/e/[engagementid]/gdpr/page.ts","./.next/types/app/e/[engagementid]/workshops/page.ts","./.next/types/app/e/[engagementid]/workshops/[id]/page.ts","./.next/types/app/engagements/page.ts","./.next/types/app/new/page.ts","./.next/types/app/signin/page.ts","./.next/types/app/test-evidence/page.ts","./node_modules/@types/d3-array/index.d.ts","./node_modules/@types/d3-color/index.d.ts","./node_modules/@types/d3-ease/index.d.ts","./node_modules/@types/d3-interpolate/index.d.ts","./node_modules/@types/d3-timer/index.d.ts","./node_modules/@types/json5/index.d.ts"],"fileIdsList":[[99,141,354,463],[99,141,354,465],[99,141,354,466],[99,141,354,467],[99,141,354,470],[99,141,354,471],[99,141,399,405],[99,141,399,406],[99,141,399,407],[99,141,399,410],[99,141,354,544],[99,141,354,546],[99,141,354,547],[99,141,354,554],[99,141,354,555],[99,141,354,556],[99,141,354],[99,141,354,557],[99,141,354,558],[99,141,354,462],[99,141,354,559],[99,141,354,560],[99,141,389],[99,141,409,411,464],[87,99,141,409,411,413,414,418],[87,99,141,383,409],[87,99,141,409,411,412,469],[87,99,141,412],[99,141,399],[99,141,377,399],[99,141,399,409],[87,99,141,389,412,451,542,543],[87,99,141,412,545],[87,99,141,456],[87,99,141,389,409,452,453],[87,99,141,383,389,409,411,457,549,550,553],[87,99,141,389,411,412,454,456,459],[87,99,141,389,409,411,415,416,417,418],[87,99,141,377,383,389],[99,141,402,409,460],[87,99,141,389,412,451],[87,99,141,389,409],[87,99,141,389],[87,99,141,469,549,550,553],[87,99,141,389,408,455,551,552],[87,99,141,412,458],[87,99,141,389,408],[87,99,141,408,454],[87,99,141,389,408,411,454,455],[87,99,141,389,411,456],[87,99,141,389,408,454,455,551,552],[87,99,141,408,411,455,468],[87,99,141,389,408,454,455],[87,99,141],[87,99,141,413,414],[99,141,413,414,415,416,417,418],[87,99,141,389,408,468,551,552,561],[87,99,141,408,411],[87,99,141,408],[99,141,541],[87,99,141,370,383,389,409,459],[99,141,154,163,426],[99,141,426],[99,141,154,163,426,430,431],[99,141],[99,141,426,432],[99,141,154,163,426,432],[99,141,426,430,432],[99,141,411],[99,141,301,390],[99,141,412,452],[99,141,412],[99,141,408,412],[99,141,412,413],[99,141,402,403],[99,141,425],[99,141,587],[99,141,474],[99,141,492],[99,138,141],[99,140,141],[141],[99,141,146,175],[99,141,142,147,153,154,161,172,183],[99,141,142,143,153,161],[94,95,96,99,141],[99,141,144,184],[99,141,145,146,154,162],[99,141,146,172,180],[99,141,147,149,153,161],[99,140,141,148],[99,141,149,150],[99,141,151,153],[99,140,141,153],[99,141,153,154,155,172,183],[99,141,153,154,155,168,172,175],[99,136,141],[99,141,149,153,156,161,172,183],[99,141,153,154,156,157,161,172,180,183],[99,141,156,158,172,180,183],[97,98,99,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189],[99,141,153,159],[99,141,160,183,188],[99,141,149,153,161,172],[99,141,162],[99,141,163],[99,140,141,164],[99,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189],[99,141,166],[99,141,167],[99,141,153,168,169],[99,141,168,170,184,186],[99,141,153,172,173,175],[99,141,174,175],[99,141,172,173],[99,141,175],[99,141,176],[99,138,141,172,177],[99,141,153,178,179],[99,141,178,179],[99,141,146,161,172,180],[99,141,181],[99,141,161,182],[99,141,156,167,183],[99,141,146,184],[99,141,172,185],[99,141,160,186],[99,141,187],[99,141,153,155,164,172,175,183,186,188],[99,141,172,189],[87,91,99,141,193,355,398],[87,91,99,141,192,355,398],[84,85,86,99,141],[92,99,141],[99,141,359],[99,141,361,362,363],[99,141,365],[99,141,196,206,212,214,355],[99,141,196,203,205,208,226],[99,141,206],[99,141,206,208,333],[99,141,261,279,294,401],[99,141,303],[99,141,196,206,213,247,257,330,331,401],[99,141,213,401],[99,141,206,257,258,259,401],[99,141,206,213,247,401],[99,141,401],[99,141,196,213,214,401],[99,141,287],[99,140,141,190,286],[87,99,141,280,281,282,300,301],[87,99,141,280],[99,141,270],[99,141,269,271,375],[87,99,141,280,281,298],[99,141,276,301,387],[99,141,385,386],[99,141,220,384],[99,141,273],[99,140,141,190,220,236,269,270,271,272],[87,99,141,298,300,301],[99,141,298,300],[99,141,298,299,301],[99,141,167,190],[99,141,268],[99,140,141,190,205,207,264,265,266,267],[87,99,141,197,378],[87,99,141,183,190],[87,99,141,213,245],[87,99,141,213],[99,141,243,248],[87,99,141,244,358],[87,91,99,141,156,190,192,193,355,396,397],[99,141,355],[99,141,195],[99,141,348,349,350,351,352,353],[99,141,350],[87,99,141,244,280,358],[87,99,141,280,356,358],[87,99,141,280,358],[99,141,156,190,207,358],[99,141,156,190,204,205,216,234,236,268,273,274,296,298],[99,141,265,268,273,281,283,284,285,287,288,289,290,291,292,293,401],[99,141,266],[87,99,141,167,190,205,206,234,236,237,239,264,296,297,301,355,401],[99,141,156,190,207,208,220,221,269],[99,141,156,190,206,208],[99,141,156,172,190,204,207,208],[99,141,156,167,183,190,204,205,206,207,208,213,216,217,227,228,230,233,234,236,237,238,239,263,264,297,298,306,308,311,313,316,318,319,320,321],[99,141,156,172,190],[99,141,196,197,198,204,205,355,358,401],[99,141,156,172,183,190,201,332,334,335,401],[99,141,167,183,190,201,204,207,224,228,230,231,232,237,264,311,322,324,330,344,345],[99,141,206,210,264],[99,141,204,206],[99,141,217,312],[99,141,314,315],[99,141,314],[99,141,312],[99,141,314,317],[99,141,200,201],[99,141,200,240],[99,141,200],[99,141,202,217,310],[99,141,309],[99,141,201,202],[99,141,202,307],[99,141,201],[99,141,296],[99,141,156,190,204,216,235,255,261,275,278,295,298],[99,141,249,250,251,252,253,254,276,277,301,356],[99,141,305],[99,141,156,190,204,216,235,241,302,304,306,355,358],[99,141,156,183,190,197,204,206,263],[99,141,260],[99,141,156,190,338,343],[99,141,227,236,263,358],[99,141,326,330,344,347],[99,141,156,210,330,338,339,347],[99,141,196,206,227,238,341],[99,141,156,190,206,213,238,325,326,336,337,340,342],[99,141,191,234,235,236,355,358],[99,141,156,167,183,190,202,204,205,207,210,215,216,224,227,228,230,231,232,233,237,239,263,264,308,322,323,358],[99,141,156,190,204,206,210,324,346],[99,141,156,190,205,207],[87,99,141,156,167,190,195,197,204,205,208,216,233,234,236,237,239,305,355,358],[99,141,156,167,183,190,199,202,203,207],[99,141,200,262],[99,141,156,190,200,205,216],[99,141,156,190,206,217],[99,141,156,190],[99,141,220],[99,141,219],[99,141,221],[99,141,206,218,220,224],[99,141,206,218,220],[99,141,156,190,199,206,207,213,221,222,223],[87,99,141,298,299,300],[99,141,256],[87,99,141,197],[87,99,141,230],[87,99,141,191,233,236,239,355,358],[99,141,197,378,379],[87,99,141,248],[87,99,141,167,183,190,195,242,244,246,247,358],[99,141,207,213,230],[99,141,229],[87,99,141,154,156,167,190,195,248,257,355,356,357],[83,87,88,89,90,99,141,192,193,355,398],[99,141,146],[99,141,327,328,329],[99,141,327],[99,141,367],[99,141,369],[99,141,371],[99,141,373],[99,141,376],[99,141,380],[91,93,99,141,355,360,364,366,368,370,372,374,377,381,383,389,390,392,399,400,401],[99,141,382],[99,141,388],[99,141,244],[99,141,391],[99,140,141,221,222,223,224,393,394,395,398],[99,141,190],[87,91,99,141,156,158,167,190,192,193,195,208,347,354,358,398],[99,141,422],[99,141,142,154,172,420,421],[99,141,424],[99,141,423],[87,99,141,477,478,479,495,498],[87,99,141,477,478,479,488,496,516],[87,99,141,476,479],[87,99,141,479],[87,99,141,477,478,479],[87,99,141,477,478,479,514,517,520],[87,99,141,477,478,479,488,495,498],[87,99,141,477,478,479,488,496,508],[87,99,141,477,478,479,488,498,508],[87,99,141,477,478,479,488,508],[87,99,141,477,478,479,483,489,495,500,518,519],[99,141,479],[87,99,141,479,523,524,525],[87,99,141,479,522,523,524],[87,99,141,479,496],[87,99,141,479,522],[87,99,141,479,488],[87,99,141,479,480,481],[87,99,141,479,481,483],[99,141,472,473,477,478,479,480,482,483,484,485,486,487,488,489,490,491,495,496,497,498,499,500,501,502,503,504,505,506,507,509,510,511,512,513,514,515,517,518,519,520,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540],[87,99,141,479,537],[87,99,141,479,491],[87,99,141,479,498,502,503],[87,99,141,479,489,491],[87,99,141,479,494],[87,99,141,479,517],[87,99,141,479,494,521],[87,99,141,482,522],[87,99,141,476,477,478],[99,108,112,141,183],[99,108,141,172,183],[99,103,141],[99,105,108,141,180,183],[99,141,161,180],[99,103,141,190],[99,105,108,141,161,183],[99,100,101,104,107,141,153,172,183],[99,108,115,141],[99,100,106,141],[99,108,129,130,141],[99,104,108,141,175,183,190],[99,129,141,190],[99,102,103,141,190],[99,108,141],[99,102,103,104,105,106,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,141],[99,108,123,141],[99,108,115,116,141],[99,106,108,116,117,141],[99,107,141],[99,100,103,108,141],[99,108,112,116,117,141],[99,112,141],[99,106,108,111,141,183],[99,100,105,108,115,141],[99,141,172],[99,103,108,129,141,188,190],[99,141,475],[99,141,493]],"fileInfos":[{"version":"c430d44666289dae81f30fa7b2edebf186ecc91a2d4c71266ea6ae76388792e1","affectsGlobalScope":true,"impliedFormat":1},{"version":"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","impliedFormat":1},{"version":"3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","impliedFormat":1},{"version":"e44bb8bbac7f10ecc786703fe0a6a4b952189f908707980ba8f3c8975a760962","impliedFormat":1},{"version":"5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","impliedFormat":1},{"version":"68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","impliedFormat":1},{"version":"5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","impliedFormat":1},{"version":"feecb1be483ed332fad555aff858affd90a48ab19ba7272ee084704eb7167569","impliedFormat":1},{"version":"ee7bad0c15b58988daa84371e0b89d313b762ab83cb5b31b8a2d1162e8eb41c2","impliedFormat":1},{"version":"27bdc30a0e32783366a5abeda841bc22757c1797de8681bbe81fbc735eeb1c10","impliedFormat":1},{"version":"8fd575e12870e9944c7e1d62e1f5a73fcf23dd8d3a321f2a2c74c20d022283fe","impliedFormat":1},{"version":"2ab096661c711e4a81cc464fa1e6feb929a54f5340b46b0a07ac6bbf857471f0","impliedFormat":1},{"version":"080941d9f9ff9307f7e27a83bcd888b7c8270716c39af943532438932ec1d0b9","affectsGlobalScope":true,"impliedFormat":1},{"version":"2e80ee7a49e8ac312cc11b77f1475804bee36b3b2bc896bead8b6e1266befb43","affectsGlobalScope":true,"impliedFormat":1},{"version":"c57796738e7f83dbc4b8e65132f11a377649c00dd3eee333f672b8f0a6bea671","affectsGlobalScope":true,"impliedFormat":1},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true,"impliedFormat":1},{"version":"515d0b7b9bea2e31ea4ec968e9edd2c39d3eebf4a2d5cbd04e88639819ae3b71","affectsGlobalScope":true,"impliedFormat":1},{"version":"0559b1f683ac7505ae451f9a96ce4c3c92bdc71411651ca6ddb0e88baaaad6a3","affectsGlobalScope":true,"impliedFormat":1},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true,"impliedFormat":1},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true,"impliedFormat":1},{"version":"fb0f136d372979348d59b3f5020b4cdb81b5504192b1cacff5d1fbba29378aa1","affectsGlobalScope":true,"impliedFormat":1},{"version":"d15bea3d62cbbdb9797079416b8ac375ae99162a7fba5de2c6c505446486ac0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"68d18b664c9d32a7336a70235958b8997ebc1c3b8505f4f1ae2b7e7753b87618","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb3d66c8327153d8fa7dd03f9c58d351107fe824c79e9b56b462935176cdf12a","affectsGlobalScope":true,"impliedFormat":1},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true,"impliedFormat":1},{"version":"69ab18c3b76cd9b1be3d188eaf8bba06112ebbe2f47f6c322b5105a6fbc45a2e","affectsGlobalScope":true,"impliedFormat":1},{"version":"a680117f487a4d2f30ea46f1b4b7f58bef1480456e18ba53ee85c2746eeca012","affectsGlobalScope":true,"impliedFormat":1},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true,"impliedFormat":1},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true,"impliedFormat":1},{"version":"954296b30da6d508a104a3a0b5d96b76495c709785c1d11610908e63481ee667","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac9538681b19688c8eae65811b329d3744af679e0bdfa5d842d0e32524c73e1c","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a969edff4bd52585473d24995c5ef223f6652d6ef46193309b3921d65dd4376","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true,"impliedFormat":1},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true,"impliedFormat":1},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true,"impliedFormat":1},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true,"impliedFormat":1},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true,"impliedFormat":1},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true,"impliedFormat":1},{"version":"d6d7ae4d1f1f3772e2a3cde568ed08991a8ae34a080ff1151af28b7f798e22ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true,"impliedFormat":1},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true,"impliedFormat":1},{"version":"52ada8e0b6e0482b728070b7639ee42e83a9b1c22d205992756fe020fd9f4a47","affectsGlobalScope":true,"impliedFormat":1},{"version":"3bdefe1bfd4d6dee0e26f928f93ccc128f1b64d5d501ff4a8cf3c6371200e5e6","affectsGlobalScope":true,"impliedFormat":1},{"version":"59fb2c069260b4ba00b5643b907ef5d5341b167e7d1dbf58dfd895658bda2867","affectsGlobalScope":true,"impliedFormat":1},{"version":"639e512c0dfc3fad96a84caad71b8834d66329a1f28dc95e3946c9b58176c73a","affectsGlobalScope":true,"impliedFormat":1},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true,"impliedFormat":1},{"version":"af3dd424cf267428f30ccfc376f47a2c0114546b55c44d8c0f1d57d841e28d74","affectsGlobalScope":true,"impliedFormat":1},{"version":"995c005ab91a498455ea8dfb63aa9f83fa2ea793c3d8aa344be4a1678d06d399","affectsGlobalScope":true,"impliedFormat":1},{"version":"959d36cddf5e7d572a65045b876f2956c973a586da58e5d26cde519184fd9b8a","affectsGlobalScope":true,"impliedFormat":1},{"version":"965f36eae237dd74e6cca203a43e9ca801ce38824ead814728a2807b1910117d","affectsGlobalScope":true,"impliedFormat":1},{"version":"3925a6c820dcb1a06506c90b1577db1fdbf7705d65b62b99dce4be75c637e26b","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a3d63ef2b853447ec4f749d3f368ce642264246e02911fcb1590d8c161b8005","affectsGlobalScope":true,"impliedFormat":1},{"version":"8cdf8847677ac7d20486e54dd3fcf09eda95812ac8ace44b4418da1bbbab6eb8","affectsGlobalScope":true,"impliedFormat":1},{"version":"8444af78980e3b20b49324f4a16ba35024fef3ee069a0eb67616ea6ca821c47a","affectsGlobalScope":true,"impliedFormat":1},{"version":"3287d9d085fbd618c3971944b65b4be57859f5415f495b33a6adc994edd2f004","affectsGlobalScope":true,"impliedFormat":1},{"version":"b4b67b1a91182421f5df999988c690f14d813b9850b40acd06ed44691f6727ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"df83c2a6c73228b625b0beb6669c7ee2a09c914637e2d35170723ad49c0f5cd4","affectsGlobalScope":true,"impliedFormat":1},{"version":"436aaf437562f276ec2ddbee2f2cdedac7664c1e4c1d2c36839ddd582eeb3d0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e3c06ea092138bf9fa5e874a1fdbc9d54805d074bee1de31b99a11e2fec239d","affectsGlobalScope":true,"impliedFormat":1},{"version":"87dc0f382502f5bbce5129bdc0aea21e19a3abbc19259e0b43ae038a9fc4e326","affectsGlobalScope":true,"impliedFormat":1},{"version":"b1cb28af0c891c8c96b2d6b7be76bd394fddcfdb4709a20ba05a7c1605eea0f9","affectsGlobalScope":true,"impliedFormat":1},{"version":"2fef54945a13095fdb9b84f705f2b5994597640c46afeb2ce78352fab4cb3279","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac77cb3e8c6d3565793eb90a8373ee8033146315a3dbead3bde8db5eaf5e5ec6","affectsGlobalScope":true,"impliedFormat":1},{"version":"56e4ed5aab5f5920980066a9409bfaf53e6d21d3f8d020c17e4de584d29600ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ece9f17b3866cc077099c73f4983bddbcb1dc7ddb943227f1ec070f529dedd1","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a6282c8827e4b9a95f4bf4f5c205673ada31b982f50572d27103df8ceb8013c","affectsGlobalScope":true,"impliedFormat":1},{"version":"1c9319a09485199c1f7b0498f2988d6d2249793ef67edda49d1e584746be9032","affectsGlobalScope":true,"impliedFormat":1},{"version":"e3a2a0cee0f03ffdde24d89660eba2685bfbdeae955a6c67e8c4c9fd28928eeb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811c71eee4aa0ac5f7adf713323a5c41b0cf6c4e17367a34fbce379e12bbf0a4","affectsGlobalScope":true,"impliedFormat":1},{"version":"51ad4c928303041605b4d7ae32e0c1ee387d43a24cd6f1ebf4a2699e1076d4fa","affectsGlobalScope":true,"impliedFormat":1},{"version":"60037901da1a425516449b9a20073aa03386cce92f7a1fd902d7602be3a7c2e9","affectsGlobalScope":true,"impliedFormat":1},{"version":"d4b1d2c51d058fc21ec2629fff7a76249dec2e36e12960ea056e3ef89174080f","affectsGlobalScope":true,"impliedFormat":1},{"version":"22adec94ef7047a6c9d1af3cb96be87a335908bf9ef386ae9fd50eeb37f44c47","affectsGlobalScope":true,"impliedFormat":1},{"version":"4245fee526a7d1754529d19227ecbf3be066ff79ebb6a380d78e41648f2f224d","affectsGlobalScope":true,"impliedFormat":1},{"version":"73f78680d4c08509933daf80947902f6ff41b6230f94dd002ae372620adb0f60","affectsGlobalScope":true,"impliedFormat":1},{"version":"c5239f5c01bcfa9cd32f37c496cf19c61d69d37e48be9de612b541aac915805b","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e7f8264d0fb4c5339605a15daadb037bf238c10b654bb3eee14208f860a32ea","affectsGlobalScope":true,"impliedFormat":1},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true,"impliedFormat":1},{"version":"0990a7576222f248f0a3b888adcb7389f957928ce2afb1cd5128169086ff4d29","impliedFormat":1},{"version":"eb5b19b86227ace1d29ea4cf81387279d04bb34051e944bc53df69f58914b788","affectsGlobalScope":true,"impliedFormat":1},{"version":"8a8eb4ebffd85e589a1cc7c178e291626c359543403d58c9cd22b81fab5b1fb9","impliedFormat":1},{"version":"87d9d29dbc745f182683f63187bf3d53fd8673e5fca38ad5eaab69798ed29fbc","impliedFormat":1},{"version":"472f5aab7edc498a0a761096e8e254c5bc3323d07a1e7f5f8b8ec0d6395b60a0","affectsGlobalScope":true,"impliedFormat":1},{"version":"cc69795d9954ee4ad57545b10c7bf1a7260d990231b1685c147ea71a6faa265c","impliedFormat":1},{"version":"8bc6c94ff4f2af1f4023b7bb2379b08d3d7dd80c698c9f0b07431ea16101f05f","impliedFormat":1},{"version":"1b61d259de5350f8b1e5db06290d31eaebebc6baafd5f79d314b5af9256d7153","impliedFormat":1},{"version":"57194e1f007f3f2cbef26fa299d4c6b21f4623a2eddc63dfeef79e38e187a36e","impliedFormat":1},{"version":"0f6666b58e9276ac3a38fdc80993d19208442d6027ab885580d93aec76b4ef00","impliedFormat":1},{"version":"05fd364b8ef02fb1e174fbac8b825bdb1e5a36a016997c8e421f5fab0a6da0a0","impliedFormat":1},{"version":"70521b6ab0dcba37539e5303104f29b721bfb2940b2776da4cc818c07e1fefc1","affectsGlobalScope":true,"impliedFormat":1},{"version":"ab41ef1f2cdafb8df48be20cd969d875602483859dc194e9c97c8a576892c052","affectsGlobalScope":true,"impliedFormat":1},{"version":"d153a11543fd884b596587ccd97aebbeed950b26933ee000f94009f1ab142848","affectsGlobalScope":true,"impliedFormat":1},{"version":"21d819c173c0cf7cc3ce57c3276e77fd9a8a01d35a06ad87158781515c9a438a","impliedFormat":1},{"version":"a79e62f1e20467e11a904399b8b18b18c0c6eea6b50c1168bf215356d5bebfaf","affectsGlobalScope":true,"impliedFormat":1},{"version":"49a5a44f2e68241a1d2bd9ec894535797998841c09729e506a7cbfcaa40f2180","affectsGlobalScope":true,"impliedFormat":1},{"version":"5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","impliedFormat":1},{"version":"763fe0f42b3d79b440a9b6e51e9ba3f3f91352469c1e4b3b67bfa4ff6352f3f4","impliedFormat":1},{"version":"25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","impliedFormat":1},{"version":"c464d66b20788266e5353b48dc4aa6bc0dc4a707276df1e7152ab0c9ae21fad8","impliedFormat":1},{"version":"78d0d27c130d35c60b5e5566c9f1e5be77caf39804636bc1a40133919a949f21","impliedFormat":1},{"version":"c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","impliedFormat":1},{"version":"1d6e127068ea8e104a912e42fc0a110e2aa5a66a356a917a163e8cf9a65e4a75","impliedFormat":1},{"version":"5ded6427296cdf3b9542de4471d2aa8d3983671d4cac0f4bf9c637208d1ced43","impliedFormat":1},{"version":"7f182617db458e98fc18dfb272d40aa2fff3a353c44a89b2c0ccb3937709bfb5","impliedFormat":1},{"version":"cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","impliedFormat":1},{"version":"385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","impliedFormat":1},{"version":"9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","impliedFormat":1},{"version":"0b8a9268adaf4da35e7fa830c8981cfa22adbbe5b3f6f5ab91f6658899e657a7","impliedFormat":1},{"version":"11396ed8a44c02ab9798b7dca436009f866e8dae3c9c25e8c1fbc396880bf1bb","impliedFormat":1},{"version":"ba7bc87d01492633cb5a0e5da8a4a42a1c86270e7b3d2dea5d156828a84e4882","impliedFormat":1},{"version":"4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","impliedFormat":1},{"version":"c21dc52e277bcfc75fac0436ccb75c204f9e1b3fa5e12729670910639f27343e","impliedFormat":1},{"version":"13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","impliedFormat":1},{"version":"9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","impliedFormat":1},{"version":"4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","impliedFormat":1},{"version":"24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","impliedFormat":1},{"version":"ea0148f897b45a76544ae179784c95af1bd6721b8610af9ffa467a518a086a43","impliedFormat":1},{"version":"24c6a117721e606c9984335f71711877293a9651e44f59f3d21c1ea0856f9cc9","impliedFormat":1},{"version":"dd3273ead9fbde62a72949c97dbec2247ea08e0c6952e701a483d74ef92d6a17","impliedFormat":1},{"version":"405822be75ad3e4d162e07439bac80c6bcc6dbae1929e179cf467ec0b9ee4e2e","impliedFormat":1},{"version":"0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","impliedFormat":1},{"version":"e61be3f894b41b7baa1fbd6a66893f2579bfad01d208b4ff61daef21493ef0a8","impliedFormat":1},{"version":"bd0532fd6556073727d28da0edfd1736417a3f9f394877b6d5ef6ad88fba1d1a","impliedFormat":1},{"version":"89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","impliedFormat":1},{"version":"615ba88d0128ed16bf83ef8ccbb6aff05c3ee2db1cc0f89ab50a4939bfc1943f","impliedFormat":1},{"version":"a4d551dbf8746780194d550c88f26cf937caf8d56f102969a110cfaed4b06656","impliedFormat":1},{"version":"8bd86b8e8f6a6aa6c49b71e14c4ffe1211a0e97c80f08d2c8cc98838006e4b88","impliedFormat":1},{"version":"317e63deeb21ac07f3992f5b50cdca8338f10acd4fbb7257ebf56735bf52ab00","impliedFormat":1},{"version":"4732aec92b20fb28c5fe9ad99521fb59974289ed1e45aecb282616202184064f","impliedFormat":1},{"version":"2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","impliedFormat":1},{"version":"c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","impliedFormat":1},{"version":"bf67d53d168abc1298888693338cb82854bdb2e69ef83f8a0092093c2d562107","impliedFormat":1},{"version":"1ca84b44ad1d8e4576f24904d8b95dd23b94ea67e1575f89614ac90062fc67f4","affectsGlobalScope":true,"impliedFormat":1},{"version":"6d586db0a09a9495ebb5dece28f54df9684bfbd6e1f568426ca153126dac4a40","impliedFormat":1},{"version":"7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","impliedFormat":1},{"version":"8c0bcd6c6b67b4b503c11e91a1fb91522ed585900eab2ab1f61bba7d7caa9d6f","impliedFormat":1},{"version":"567b7f607f400873151d7bc63a049514b53c3c00f5f56e9e95695d93b66a138e","affectsGlobalScope":true,"impliedFormat":1},{"version":"f3e58c4c18a031cbb17abec7a4ad0bd5ae9fc70c1f4ba1e7fb921ad87c504aca","impliedFormat":1},{"version":"84c1930e33d1bb12ad01bcbe11d656f9646bd21b2fb2afd96e8e10615a021aef","impliedFormat":1},{"version":"35ec8b6760fd7138bbf5809b84551e31028fb2ba7b6dc91d95d098bf212ca8b4","affectsGlobalScope":true,"impliedFormat":1},{"version":"5524481e56c48ff486f42926778c0a3cce1cc85dc46683b92b1271865bcf015a","impliedFormat":1},{"version":"4b87f767c7bc841511113c876a6b8bf1fd0cb0b718c888ad84478b372ec486b1","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d04e3640dd9eb67f7f1e5bd3d0bf96c784666f7aefc8ac1537af6f2d38d4c29","impliedFormat":1},{"version":"9d19808c8c291a9010a6c788e8532a2da70f811adb431c97520803e0ec649991","impliedFormat":1},{"version":"2bf469abae4cc9c0f340d4e05d9d26e37f936f9c8ca8f007a6534f109dcc77e4","impliedFormat":1},{"version":"4aacb0dd020eeaef65426153686cc639a78ec2885dc72ad220be1d25f1a439df","impliedFormat":1},{"version":"f0bd7e6d931657b59605c44112eaf8b980ba7f957a5051ed21cb93d978cf2f45","impliedFormat":1},{"version":"71450bbc2d82821d24ca05699a533e72758964e9852062c53b30f31c36978ab8","affectsGlobalScope":true,"impliedFormat":1},{"version":"0ada07543808f3b967624645a8e1ccd446f8b01ade47842acf1328aec899fed0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4c21aaa8257d7950a5b75a251d9075b6a371208fc948c9c8402f6690ef3b5b55","impliedFormat":1},{"version":"b5895e6353a5d708f55d8685c38a235c3a6d8138e374dee8ceb8ffde5aa8002a","impliedFormat":1},{"version":"54c4f21f578864961efc94e8f42bc893a53509e886370ec7dd602e0151b9266c","impliedFormat":1},{"version":"de735eca2c51dd8b860254e9fdb6d9ec19fe402dfe597c23090841ce3937cfc5","impliedFormat":1},{"version":"4ff41188773cbf465807dd2f7059c7494cbee5115608efc297383832a1150c43","impliedFormat":1},{"version":"5650cf3dace09e7c25d384e3e6b818b938f68f4e8de96f52d9c5a1b3db068e86","impliedFormat":1},{"version":"1354ca5c38bd3fd3836a68e0f7c9f91f172582ba30ab15bb8c075891b91502b7","affectsGlobalScope":true,"impliedFormat":1},{"version":"5155da3047ef977944d791a2188ff6e6c225f6975cc1910ab7bb6838ab84cede","impliedFormat":1},{"version":"93f437e1398a4f06a984f441f7fa7a9f0535c04399619b5c22e0b87bdee182cb","impliedFormat":1},{"version":"afbe24ab0d74694372baa632ecb28bb375be53f3be53f9b07ecd7fc994907de5","impliedFormat":1},{"version":"e16d218a30f6a6810b57f7e968124eaa08c7bb366133ea34bbf01e7cd6b8c0ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb8692dea24c27821f77e397272d9ed2eda0b95e4a75beb0fdda31081d15a8ae","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e043a1bc8fbf2a255bccf9bf27e0f1caf916c3b0518ea34aa72357c0afd42ec","impliedFormat":1},{"version":"b4f70ec656a11d570e1a9edce07d118cd58d9760239e2ece99306ee9dfe61d02","impliedFormat":1},{"version":"3bc2f1e2c95c04048212c569ed38e338873f6a8593930cf5a7ef24ffb38fc3b6","impliedFormat":1},{"version":"8145e07aad6da5f23f2fcd8c8e4c5c13fb26ee986a79d03b0829b8fce152d8b2","impliedFormat":1},{"version":"f9d9d753d430ed050dc1bf2667a1bab711ccbb1c1507183d794cc195a5b085cc","impliedFormat":1},{"version":"9eece5e586312581ccd106d4853e861aaaa1a39f8e3ea672b8c3847eedd12f6e","impliedFormat":1},{"version":"5b6844ad931dcc1d3aca53268f4bd671428421464b1286746027aede398094f2","impliedFormat":1},{"version":"37ba7b45141a45ce6e80e66f2a96c8a5ab1bcef0fc2d0f56bb58df96ec67e972","impliedFormat":1},{"version":"125d792ec6c0c0f657d758055c494301cc5fdb327d9d9d5960b3f129aff76093","impliedFormat":1},{"version":"0225ecb9ed86bdb7a2c7fd01f1556906902929377b44483dc4b83e03b3ef227d","affectsGlobalScope":true,"impliedFormat":1},{"version":"1851a3b4db78664f83901bb9cac9e45e03a37bb5933cc5bf37e10bb7e91ab4eb","impliedFormat":1},{"version":"461e54289e6287e8494a0178ba18182acce51a02bca8dea219149bf2cf96f105","impliedFormat":1},{"version":"12ed4559eba17cd977aa0db658d25c4047067444b51acfdcbf38470630642b23","affectsGlobalScope":true,"impliedFormat":1},{"version":"f3ffabc95802521e1e4bcba4c88d8615176dc6e09111d920c7a213bdda6e1d65","impliedFormat":1},{"version":"e31e51c55800014d926e3f74208af49cb7352803619855c89296074d1ecbb524","impliedFormat":1},{"version":"ae56f65caf3be91108707bd8dfbccc2a57a91feb5daabf7165a06a945545ed26","impliedFormat":1},{"version":"a136d5de521da20f31631a0a96bf712370779d1c05b7015d7019a9b2a0446ca9","impliedFormat":1},{"version":"dfb96ba5177b68003deec9e773c47257da5c4c8a74053d8956389d832df72002","affectsGlobalScope":true,"impliedFormat":1},{"version":"92d3070580cf72b4bb80959b7f16ede9a3f39e6f4ef2ac87cfa4561844fdc69f","affectsGlobalScope":true,"impliedFormat":1},{"version":"d3dffd70e6375b872f0b4e152de4ae682d762c61a24881ecc5eb9f04c5caf76f","impliedFormat":1},{"version":"613deebaec53731ff6b74fe1a89f094b708033db6396b601df3e6d5ab0ec0a47","impliedFormat":1},{"version":"d91a7d8b5655c42986f1bdfe2105c4408f472831c8f20cf11a8c3345b6b56c8c","impliedFormat":1},{"version":"e56eb632f0281c9f8210eb8c86cc4839a427a4ffffcfd2a5e40b956050b3e042","affectsGlobalScope":true,"impliedFormat":1},{"version":"e8a979b8af001c9fc2e774e7809d233c8ca955a28756f52ee5dee88ccb0611d2","impliedFormat":1},{"version":"cac793cc47c29e26e4ac3601dcb00b4435ebed26203485790e44f2ad8b6ad847","impliedFormat":1},{"version":"8caa5c86be1b793cd5f599e27ecb34252c41e011980f7d61ae4989a149ff6ccc","impliedFormat":1},{"version":"3609e455ffcba8176c8ce0aa57f8258fe10cf03987e27f1fab68f702b4426521","impliedFormat":1},{"version":"d1bd4e51810d159899aad1660ccb859da54e27e08b8c9862b40cd36c1d9ff00f","impliedFormat":1},{"version":"db6d2d9daad8a6d83f281af12ce4355a20b9a3e71b82b9f57cddcca0a8964a96","impliedFormat":1},{"version":"cfe4ef4710c3786b6e23dae7c086c70b4f4835a2e4d77b75d39f9046106e83d3","impliedFormat":1},{"version":"cbea99888785d49bb630dcbb1613c73727f2b5a2cf02e1abcaab7bcf8d6bf3c5","impliedFormat":1},{"version":"3a8bddb66b659f6bd2ff641fc71df8a8165bafe0f4b799cc298be5cd3755bb20","impliedFormat":1},{"version":"a86f82d646a739041d6702101afa82dcb935c416dd93cbca7fd754fd0282ce1f","impliedFormat":1},{"version":"2dad084c67e649f0f354739ec7df7c7df0779a28a4f55c97c6b6883ae850d1ce","impliedFormat":1},{"version":"fa5bbc7ab4130dd8cdc55ea294ec39f76f2bc507a0f75f4f873e38631a836ca7","impliedFormat":1},{"version":"df45ca1176e6ac211eae7ddf51336dc075c5314bc5c253651bae639defd5eec5","impliedFormat":1},{"version":"cf86de1054b843e484a3c9300d62fbc8c97e77f168bbffb131d560ca0474d4a8","impliedFormat":1},{"version":"196c960b12253fde69b204aa4fbf69470b26daf7a430855d7f94107a16495ab0","impliedFormat":1},{"version":"ee15ea5dd7a9fc9f5013832e5843031817a880bf0f24f37a29fd8337981aae07","impliedFormat":1},{"version":"bf24f6d35f7318e246010ffe9924395893c4e96d34324cde77151a73f078b9ad","impliedFormat":1},{"version":"ea53732769832d0f127ae16620bd5345991d26bf0b74e85e41b61b27d74ea90f","impliedFormat":1},{"version":"10595c7ff5094dd5b6a959ccb1c00e6a06441b4e10a87bc09c15f23755d34439","impliedFormat":1},{"version":"9620c1ff645afb4a9ab4044c85c26676f0a93e8c0e4b593aea03a89ccb47b6d0","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"a9af0e608929aaf9ce96bd7a7b99c9360636c31d73670e4af09a09950df97841","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"c86fe861cf1b4c46a0fb7d74dffe596cf679a2e5e8b1456881313170f092e3fa","impliedFormat":1},{"version":"08ed0b3f0166787f84a6606f80aa3b1388c7518d78912571b203817406e471da","impliedFormat":1},{"version":"47e5af2a841356a961f815e7c55d72554db0c11b4cba4d0caab91f8717846a94","impliedFormat":1},{"version":"65f43099ded6073336e697512d9b80f2d4fec3182b7b2316abf712e84104db00","impliedFormat":1},{"version":"f5f541902bf7ae0512a177295de9b6bcd6809ea38307a2c0a18bfca72212f368","impliedFormat":1},{"version":"b0decf4b6da3ebc52ea0c96095bdfaa8503acc4ac8e9081c5f2b0824835dd3bd","impliedFormat":1},{"version":"ca1b882a105a1972f82cc58e3be491e7d750a1eb074ffd13b198269f57ed9e1b","impliedFormat":1},{"version":"fc3e1c87b39e5ba1142f27ec089d1966da168c04a859a4f6aab64dceae162c2b","impliedFormat":1},{"version":"3b414b99a73171e1c4b7b7714e26b87d6c5cb03d200352da5342ab4088a54c85","impliedFormat":1},{"version":"61888522cec948102eba94d831c873200aa97d00d8989fdfd2a3e0ee75ec65a2","impliedFormat":1},{"version":"4e10622f89fea7b05dd9b52fb65e1e2b5cbd96d4cca3d9e1a60bb7f8a9cb86a1","impliedFormat":1},{"version":"74b2a5e5197bd0f2e0077a1ea7c07455bbea67b87b0869d9786d55104006784f","impliedFormat":1},{"version":"59bf32919de37809e101acffc120596a9e45fdbab1a99de5087f31fdc36e2f11","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"faa03dffb64286e8304a2ca96dd1317a77db6bfc7b3fb385163648f67e535d77","impliedFormat":1},{"version":"c40c848daad198266370c1c72a7a8c3d18d2f50727c7859fcfefd3ff69a7f288","impliedFormat":1},{"version":"ac60bbee0d4235643cc52b57768b22de8c257c12bd8c2039860540cab1fa1d82","impliedFormat":1},{"version":"6428e6edd944ce6789afdf43f9376c1f2e4957eea34166177625aaff4c0da1a0","impliedFormat":1},{"version":"ada39cbb2748ab2873b7835c90c8d4620723aedf323550e8489f08220e477c7f","impliedFormat":1},{"version":"6e5f5cee603d67ee1ba6120815497909b73399842254fc1e77a0d5cdc51d8c9c","impliedFormat":1},{"version":"8dba67056cbb27628e9b9a1cba8e57036d359dceded0725c72a3abe4b6c79cd4","impliedFormat":1},{"version":"70f3814c457f54a7efe2d9ce9d2686de9250bb42eb7f4c539bd2280a42e52d33","impliedFormat":1},{"version":"154dd2e22e1e94d5bc4ff7726706bc0483760bae40506bdce780734f11f7ec47","impliedFormat":1},{"version":"ef61792acbfa8c27c9bd113f02731e66229f7d3a169e3c1993b508134f1a58e0","impliedFormat":1},{"version":"9c82171d836c47486074e4ca8e059735bf97b205e70b196535b5efd40cbe1bc5","impliedFormat":1},{"version":"0131e203d8560edb39678abe10db42564a068f98c4ebd1ed9ffe7279c78b3c81","impliedFormat":1},{"version":"f6404e7837b96da3ea4d38c4f1a3812c96c9dcdf264e93d5bdb199f983a3ef4b","impliedFormat":1},{"version":"c5426dbfc1cf90532f66965a7aa8c1136a78d4d0f96d8180ecbfc11d7722f1a5","impliedFormat":1},{"version":"65a15fc47900787c0bd18b603afb98d33ede930bed1798fc984d5ebb78b26cf9","impliedFormat":1},{"version":"9d202701f6e0744adb6314d03d2eb8fc994798fc83d91b691b75b07626a69801","impliedFormat":1},{"version":"de9d2df7663e64e3a91bf495f315a7577e23ba088f2949d5ce9ec96f44fba37d","impliedFormat":1},{"version":"c7af78a2ea7cb1cd009cfb5bdb48cd0b03dad3b54f6da7aab615c2e9e9d570c5","impliedFormat":1},{"version":"1ee45496b5f8bdee6f7abc233355898e5bf9bd51255db65f5ff7ede617ca0027","impliedFormat":1},{"version":"8b8f00491431fe82f060dfe8c7f2180a9fb239f3d851527db909b83230e75882","affectsGlobalScope":true,"impliedFormat":1},{"version":"db01d18853469bcb5601b9fc9826931cc84cc1a1944b33cad76fd6f1e3d8c544","affectsGlobalScope":true,"impliedFormat":1},{"version":"dba114fb6a32b355a9cfc26ca2276834d72fe0e94cd2c3494005547025015369","impliedFormat":1},{"version":"903e299a28282fa7b714586e28409ed73c3b63f5365519776bf78e8cf173db36","affectsGlobalScope":true,"impliedFormat":1},{"version":"fa6c12a7c0f6b84d512f200690bfc74819e99efae69e4c95c4cd30f6884c526e","impliedFormat":1},{"version":"f1c32f9ce9c497da4dc215c3bc84b722ea02497d35f9134db3bb40a8d918b92b","impliedFormat":1},{"version":"b73c319af2cc3ef8f6421308a250f328836531ea3761823b4cabbd133047aefa","affectsGlobalScope":true,"impliedFormat":1},{"version":"e433b0337b8106909e7953015e8fa3f2d30797cea27141d1c5b135365bb975a6","impliedFormat":1},{"version":"dd3900b24a6a8745efeb7ad27629c0f8a626470ac229c1d73f1fe29d67e44dca","impliedFormat":1},{"version":"ddff7fc6edbdc5163a09e22bf8df7bef75f75369ebd7ecea95ba55c4386e2441","impliedFormat":1},{"version":"106c6025f1d99fd468fd8bf6e5bda724e11e5905a4076c5d29790b6c3745e50c","impliedFormat":1},{"version":"ec29be0737d39268696edcec4f5e97ce26f449fa9b7afc2f0f99a86def34a418","impliedFormat":1},{"version":"aeab39e8e0b1a3b250434c3b2bb8f4d17bbec2a9dbce5f77e8a83569d3d2cbc2","impliedFormat":1},{"version":"ec6cba1c02c675e4dd173251b156792e8d3b0c816af6d6ad93f1a55d674591aa","impliedFormat":1},{"version":"b620391fe8060cf9bedc176a4d01366e6574d7a71e0ac0ab344a4e76576fcbb8","impliedFormat":1},{"version":"d729408dfde75b451530bcae944cf89ee8277e2a9df04d1f62f2abfd8b03c1e1","impliedFormat":1},{"version":"e15d3c84d5077bb4a3adee4c791022967b764dc41cb8fa3cfa44d4379b2c95f5","impliedFormat":1},{"version":"5f58e28cd22e8fc1ac1b3bc6b431869f1e7d0b39e2c21fbf79b9fa5195a85980","impliedFormat":1},{"version":"e1fc1a1045db5aa09366be2b330e4ce391550041fc3e925f60998ca0b647aa97","impliedFormat":1},{"version":"63533978dcda286422670f6e184ac516805a365fb37a086eeff4309e812f1402","impliedFormat":1},{"version":"43ba4f2fa8c698f5c304d21a3ef596741e8e85a810b7c1f9b692653791d8d97a","impliedFormat":1},{"version":"31fb49ef3aa3d76f0beb644984e01eab0ea222372ea9b49bb6533be5722d756c","impliedFormat":1},{"version":"33cd131e1461157e3e06b06916b5176e7a8ec3fce15a5cfe145e56de744e07d2","impliedFormat":1},{"version":"889ef863f90f4917221703781d9723278db4122d75596b01c429f7c363562b86","impliedFormat":1},{"version":"3556cfbab7b43da96d15a442ddbb970e1f2fc97876d055b6555d86d7ac57dae5","impliedFormat":1},{"version":"437751e0352c6e924ddf30e90849f1d9eb00ca78c94d58d6a37202ec84eb8393","impliedFormat":1},{"version":"48e8af7fdb2677a44522fd185d8c87deff4d36ee701ea003c6c780b1407a1397","impliedFormat":1},{"version":"d11308de5a36c7015bb73adb5ad1c1bdaac2baede4cc831a05cf85efa3cc7f2f","impliedFormat":1},{"version":"38e4684c22ed9319beda6765bab332c724103d3a966c2e5e1c5a49cf7007845f","impliedFormat":1},{"version":"f9812cfc220ecf7557183379531fa409acd249b9e5b9a145d0d52b76c20862de","affectsGlobalScope":true,"impliedFormat":1},{"version":"e650298721abc4f6ae851e60ae93ee8199791ceec4b544c3379862f81f43178c","impliedFormat":1},{"version":"2e4f37ffe8862b14d8e24ae8763daaa8340c0df0b859d9a9733def0eee7562d9","impliedFormat":1},{"version":"13283350547389802aa35d9f2188effaeac805499169a06ef5cd77ce2a0bd63f","impliedFormat":1},{"version":"680793958f6a70a44c8d9ae7d46b7a385361c69ac29dcab3ed761edce1c14ab8","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"42c169fb8c2d42f4f668c624a9a11e719d5d07dacbebb63cbcf7ef365b0a75b3","impliedFormat":1},{"version":"913ddbba170240070bd5921b8f33ea780021bdf42fbdfcd4fcb2691b1884ddde","impliedFormat":1},{"version":"b4e6d416466999ff40d3fe5ceb95f7a8bfb7ac2262580287ac1a8391e5362431","impliedFormat":1},{"version":"5fe23bd829e6be57d41929ac374ee9551ccc3c44cee893167b7b5b77be708014","impliedFormat":1},{"version":"0a626484617019fcfbfc3c1bc1f9e84e2913f1adb73692aa9075817404fb41a1","impliedFormat":1},{"version":"438c7513b1df91dcef49b13cd7a1c4720f91a36e88c1df731661608b7c055f10","impliedFormat":1},{"version":"cf185cc4a9a6d397f416dd28cca95c227b29f0f27b160060a95c0e5e36cda865","impliedFormat":1},{"version":"0086f3e4ad898fd7ca56bb223098acfacf3fa065595182aaf0f6c4a6a95e6fbd","impliedFormat":1},{"version":"efaa078e392f9abda3ee8ade3f3762ab77f9c50b184e6883063a911742a4c96a","impliedFormat":1},{"version":"54a8bb487e1dc04591a280e7a673cdfb272c83f61e28d8a64cf1ac2e63c35c51","impliedFormat":1},{"version":"021a9498000497497fd693dd315325484c58a71b5929e2bbb91f419b04b24cea","impliedFormat":1},{"version":"9385cdc09850950bc9b59cca445a3ceb6fcca32b54e7b626e746912e489e535e","impliedFormat":1},{"version":"2894c56cad581928bb37607810af011764a2f511f575d28c9f4af0f2ef02d1ab","impliedFormat":1},{"version":"0a72186f94215d020cb386f7dca81d7495ab6c17066eb07d0f44a5bf33c1b21a","impliedFormat":1},{"version":"84124384abae2f6f66b7fbfc03862d0c2c0b71b826f7dbf42c8085d31f1d3f95","impliedFormat":1},{"version":"63a8e96f65a22604eae82737e409d1536e69a467bb738bec505f4f97cce9d878","impliedFormat":1},{"version":"3fd78152a7031315478f159c6a5872c712ece6f01212c78ea82aef21cb0726e2","impliedFormat":1},{"version":"b01bd582a6e41457bc56e6f0f9de4cb17f33f5f3843a7cf8210ac9c18472fb0f","impliedFormat":1},{"version":"58b49e5c1def740360b5ae22ae2405cfac295fee74abd88d74ac4ea42502dc03","impliedFormat":1},{"version":"512fc15cca3a35b8dbbf6e23fe9d07e6f87ad03c895acffd3087ce09f352aad0","impliedFormat":1},{"version":"9a0946d15a005832e432ea0cd4da71b57797efb25b755cc07f32274296d62355","impliedFormat":1},{"version":"a52ff6c0a149e9f370372fc3c715d7f2beee1f3bab7980e271a7ab7d313ec677","impliedFormat":1},{"version":"fd933f824347f9edd919618a76cdb6a0c0085c538115d9a287fa0c7f59957ab3","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"6a1aa3e55bdc50503956c5cd09ae4cd72e3072692d742816f65c66ca14f4dfdd","impliedFormat":1},{"version":"ab75cfd9c4f93ffd601f7ca1753d6a9d953bbedfbd7a5b3f0436ac8a1de60dfa","impliedFormat":1},{"version":"f95180f03d827525ca4f990f49e17ec67198c316dd000afbe564655141f725cd","impliedFormat":1},{"version":"b73cbf0a72c8800cf8f96a9acfe94f3ad32ca71342a8908b8ae484d61113f647","impliedFormat":1},{"version":"bae6dd176832f6423966647382c0d7ba9e63f8c167522f09a982f086cd4e8b23","impliedFormat":1},{"version":"1364f64d2fb03bbb514edc42224abd576c064f89be6a990136774ecdd881a1da","impliedFormat":1},{"version":"c9958eb32126a3843deedda8c22fb97024aa5d6dd588b90af2d7f2bfac540f23","impliedFormat":1},{"version":"950fb67a59be4c2dbe69a5786292e60a5cb0e8612e0e223537784c731af55db1","impliedFormat":1},{"version":"e927c2c13c4eaf0a7f17e6022eee8519eb29ef42c4c13a31e81a611ab8c95577","impliedFormat":1},{"version":"07ca44e8d8288e69afdec7a31fa408ce6ab90d4f3d620006701d5544646da6aa","impliedFormat":1},{"version":"70246ad95ad8a22bdfe806cb5d383a26c0c6e58e7207ab9c431f1cb175aca657","impliedFormat":1},{"version":"f00f3aa5d64ff46e600648b55a79dcd1333458f7a10da2ed594d9f0a44b76d0b","impliedFormat":1},{"version":"772d8d5eb158b6c92412c03228bd9902ccb1457d7a705b8129814a5d1a6308fc","impliedFormat":1},{"version":"4e4475fba4ed93a72f167b061cd94a2e171b82695c56de9899275e880e06ba41","impliedFormat":1},{"version":"97c5f5d580ab2e4decd0a3135204050f9b97cd7908c5a8fbc041eadede79b2fa","impliedFormat":1},{"version":"c99a3a5f2215d5b9d735aa04cec6e61ed079d8c0263248e298ffe4604d4d0624","impliedFormat":1},{"version":"49b2375c586882c3ac7f57eba86680ff9742a8d8cb2fe25fe54d1b9673690d41","impliedFormat":1},{"version":"802e797bcab5663b2c9f63f51bdf67eff7c41bc64c0fd65e6da3e7941359e2f7","impliedFormat":1},{"version":"847e160d709c74cc714fbe1f99c41d3425b74cd47b1be133df1623cd87014089","impliedFormat":1},{"version":"9fee04f1e1afa50524862289b9f0b0fdc3735b80e2a0d684cec3b9ff3d94cecc","impliedFormat":1},{"version":"5cdc27fbc5c166fc5c763a30ac21cbac9859dc5ba795d3230db6d4e52a1965bb","impliedFormat":1},{"version":"6459054aabb306821a043e02b89d54da508e3a6966601a41e71c166e4ea1474f","impliedFormat":1},{"version":"f416c9c3eee9d47ff49132c34f96b9180e50485d435d5748f0e8b72521d28d2e","impliedFormat":1},{"version":"05c97cddbaf99978f83d96de2d8af86aded9332592f08ce4a284d72d0952c391","impliedFormat":1},{"version":"14e5cdec6f8ae82dfd0694e64903a0a54abdfe37e1d966de3d4128362acbf35f","impliedFormat":1},{"version":"bbc183d2d69f4b59fd4dd8799ffdf4eb91173d1c4ad71cce91a3811c021bf80c","impliedFormat":1},{"version":"7b6ff760c8a240b40dab6e4419b989f06a5b782f4710d2967e67c695ef3e93c4","impliedFormat":1},{"version":"8dbc4134a4b3623fc476be5f36de35c40f2768e2e3d9ed437e0d5f1c4cd850f6","impliedFormat":1},{"version":"4e06330a84dec7287f7ebdd64978f41a9f70a668d3b5edc69d5d4a50b9b376bb","impliedFormat":1},{"version":"65bfa72967fbe9fc33353e1ac03f0480aa2e2ea346d61ff3ea997dfd850f641a","impliedFormat":1},{"version":"c06f0bb92d1a1a5a6c6e4b5389a5664d96d09c31673296cb7da5fe945d54d786","impliedFormat":1},{"version":"f974e4a06953682a2c15d5bd5114c0284d5abf8bc0fe4da25cb9159427b70072","impliedFormat":1},{"version":"872caaa31423f4345983d643e4649fb30f548e9883a334d6d1c5fff68ede22d4","impliedFormat":1},{"version":"94404c4a878fe291e7578a2a80264c6f18e9f1933fbb57e48f0eb368672e389c","impliedFormat":1},{"version":"5c1b7f03aa88be854bc15810bfd5bd5a1943c5a7620e1c53eddd2a013996343e","impliedFormat":1},{"version":"09dfc64fcd6a2785867f2368419859a6cc5a8d4e73cbe2538f205b1642eb0f51","impliedFormat":1},{"version":"bcf6f0a323653e72199105a9316d91463ad4744c546d1271310818b8cef7c608","impliedFormat":1},{"version":"01aa917531e116485beca44a14970834687b857757159769c16b228eb1e49c5f","impliedFormat":1},{"version":"351475f9c874c62f9b45b1f0dc7e2704e80dfd5f1af83a3a9f841f9dfe5b2912","impliedFormat":1},{"version":"ac457ad39e531b7649e7b40ee5847606eac64e236efd76c5d12db95bf4eacd17","impliedFormat":1},{"version":"187a6fdbdecb972510b7555f3caacb44b58415da8d5825d03a583c4b73fde4cf","impliedFormat":1},{"version":"d4c3250105a612202289b3a266bb7e323db144f6b9414f9dea85c531c098b811","impliedFormat":1},{"version":"95b444b8c311f2084f0fb51c616163f950fb2e35f4eaa07878f313a2d36c98a4","impliedFormat":1},{"version":"741067675daa6d4334a2dc80a4452ca3850e89d5852e330db7cb2b5f867173b1","impliedFormat":1},{"version":"f8acecec1114f11690956e007d920044799aefeb3cece9e7f4b1f8a1d542b2c9","impliedFormat":1},{"version":"178071ccd043967a58c5d1a032db0ddf9bd139e7920766b537d9783e88eb615e","impliedFormat":1},{"version":"3a17f09634c50cce884721f54fd9e7b98e03ac505889c560876291fcf8a09e90","impliedFormat":1},{"version":"32531dfbb0cdc4525296648f53b2b5c39b64282791e2a8c765712e49e6461046","impliedFormat":1},{"version":"0ce1b2237c1c3df49748d61568160d780d7b26693bd9feb3acb0744a152cd86d","impliedFormat":1},{"version":"e489985388e2c71d3542612685b4a7db326922b57ac880f299da7026a4e8a117","impliedFormat":1},{"version":"5cad4158616d7793296dd41e22e1257440910ea8d01c7b75045d4dfb20c5a41a","impliedFormat":1},{"version":"04d3aad777b6af5bd000bfc409907a159fe77e190b9d368da4ba649cdc28d39e","affectsGlobalScope":true,"impliedFormat":1},{"version":"74efc1d6523bd57eb159c18d805db4ead810626bc5bc7002a2c7f483044b2e0f","impliedFormat":1},{"version":"19252079538942a69be1645e153f7dbbc1ef56b4f983c633bf31fe26aeac32cd","impliedFormat":1},{"version":"bc11f3ac00ac060462597add171220aed628c393f2782ac75dd29ff1e0db871c","impliedFormat":1},{"version":"616775f16134fa9d01fc677ad3f76e68c051a056c22ab552c64cc281a9686790","impliedFormat":1},{"version":"65c24a8baa2cca1de069a0ba9fba82a173690f52d7e2d0f1f7542d59d5eb4db0","impliedFormat":1},{"version":"f9fe6af238339a0e5f7563acee3178f51db37f32a2e7c09f85273098cee7ec49","impliedFormat":1},{"version":"3b0b1d352b8d2e47f1c4df4fb0678702aee071155b12ef0185fce9eb4fa4af1e","impliedFormat":1},{"version":"77e71242e71ebf8528c5802993697878f0533db8f2299b4d36aa015bae08a79c","impliedFormat":1},{"version":"a344403e7a7384e0e7093942533d309194ad0a53eca2a3100c0b0ab4d3932773","impliedFormat":1},{"version":"b7fff2d004c5879cae335db8f954eb1d61242d9f2d28515e67902032723caeab","impliedFormat":1},{"version":"5f3dc10ae646f375776b4e028d2bed039a93eebbba105694d8b910feebbe8b9c","impliedFormat":1},{"version":"bb18bf4a61a17b4a6199eb3938ecfa4a59eb7c40843ad4a82b975ab6f7e3d925","impliedFormat":1},{"version":"4545c1a1ceca170d5d83452dd7c4994644c35cf676a671412601689d9a62da35","impliedFormat":1},{"version":"e9b6fc05f536dfddcdc65dbcf04e09391b1c968ab967382e48924f5cb90d88e1","impliedFormat":1},{"version":"a2d648d333cf67b9aeac5d81a1a379d563a8ffa91ddd61c6179f68de724260ff","impliedFormat":1},{"version":"2b664c3cc544d0e35276e1fb2d4989f7d4b4027ffc64da34ec83a6ccf2e5c528","impliedFormat":1},{"version":"a3f41ed1b4f2fc3049394b945a68ae4fdefd49fa1739c32f149d32c0545d67f5","impliedFormat":1},{"version":"3cd8f0464e0939b47bfccbb9bb474a6d87d57210e304029cd8eb59c63a81935d","impliedFormat":1},{"version":"47699512e6d8bebf7be488182427189f999affe3addc1c87c882d36b7f2d0b0e","impliedFormat":1},{"version":"3026abd48e5e312f2328629ede6e0f770d21c3cd32cee705c450e589d015ee09","impliedFormat":1},{"version":"8b140b398a6afbd17cc97c38aea5274b2f7f39b1ae5b62952cfe65bf493e3e75","impliedFormat":1},{"version":"7663d2c19ce5ef8288c790edba3d45af54e58c84f1b37b1249f6d49d962f3d91","impliedFormat":1},{"version":"5cce3b975cdb72b57ae7de745b3c5de5790781ee88bcb41ba142f07c0fa02e97","impliedFormat":1},{"version":"00bd6ebe607246b45296aa2b805bd6a58c859acecda154bfa91f5334d7c175c6","impliedFormat":1},{"version":"ad036a85efcd9e5b4f7dd5c1a7362c8478f9a3b6c3554654ca24a29aa850a9c5","impliedFormat":1},{"version":"fedebeae32c5cdd1a85b4e0504a01996e4a8adf3dfa72876920d3dd6e42978e7","impliedFormat":1},{"version":"0d28b974a7605c4eda20c943b3fa9ae16cb452c1666fc9b8c341b879992c7612","impliedFormat":1},{"version":"cdf21eee8007e339b1b9945abf4a7b44930b1d695cc528459e68a3adc39a622e","impliedFormat":1},{"version":"db036c56f79186da50af66511d37d9fe77fa6793381927292d17f81f787bb195","impliedFormat":1},{"version":"87ac2fb61e629e777f4d161dff534c2023ee15afd9cb3b1589b9b1f014e75c58","impliedFormat":1},{"version":"13c8b4348db91e2f7d694adc17e7438e6776bc506d5c8f5de9ad9989707fa3fe","impliedFormat":1},{"version":"3c1051617aa50b38e9efaabce25e10a5dd9b1f42e372ef0e8a674076a68742ed","impliedFormat":1},{"version":"07a3e20cdcb0f1182f452c0410606711fbea922ca76929a41aacb01104bc0d27","impliedFormat":1},{"version":"1de80059b8078ea5749941c9f863aa970b4735bdbb003be4925c853a8b6b4450","impliedFormat":1},{"version":"1d079c37fa53e3c21ed3fa214a27507bda9991f2a41458705b19ed8c2b61173d","impliedFormat":1},{"version":"4cd4b6b1279e9d744a3825cbd7757bbefe7f0708f3f1069179ad535f19e8ed2c","impliedFormat":1},{"version":"5835a6e0d7cd2738e56b671af0e561e7c1b4fb77751383672f4b009f4e161d70","impliedFormat":1},{"version":"c0eeaaa67c85c3bb6c52b629ebbfd3b2292dc67e8c0ffda2fc6cd2f78dc471e6","impliedFormat":1},{"version":"4b7f74b772140395e7af67c4841be1ab867c11b3b82a51b1aeb692822b76c872","impliedFormat":1},{"version":"27be6622e2922a1b412eb057faa854831b95db9db5035c3f6d4b677b902ab3b7","impliedFormat":1},{"version":"b95a6f019095dd1d48fd04965b50dfd63e5743a6e75478343c46d2582a5132bf","impliedFormat":99},{"version":"c2008605e78208cfa9cd70bd29856b72dda7ad89df5dc895920f8e10bcb9cd0a","impliedFormat":99},{"version":"b97cb5616d2ab82a98ec9ada7b9e9cabb1f5da880ec50ea2b8dc5baa4cbf3c16","impliedFormat":99},{"version":"d23df9ff06ae8bf1dcb7cc933e97ae7da418ac77749fecee758bb43a8d69f840","affectsGlobalScope":true,"impliedFormat":1},{"version":"040c71dde2c406f869ad2f41e8d4ce579cc60c8dbe5aa0dd8962ac943b846572","affectsGlobalScope":true,"impliedFormat":1},{"version":"3586f5ea3cc27083a17bd5c9059ede9421d587286d5a47f4341a4c2d00e4fa91","impliedFormat":1},{"version":"a6df929821e62f4719551f7955b9f42c0cd53c1370aec2dd322e24196a7dfe33","impliedFormat":1},{"version":"b789bf89eb19c777ed1e956dbad0925ca795701552d22e68fd130a032008b9f9","impliedFormat":1},"9dd9d642cdb87d4d5b3173217e0c45429b3e47a6f5cf5fb0ead6c644ec5fed01","cd0727eecd4c684e070b1f008c6f3526e1f8621b6a5decc8fe816d29423fbb49","3964ec916e57df4b5acd6ff08e9f742a29d27f2cc083a0379af26e38244bc5d8",{"version":"22207f500196d38d1fe1bc51d574bd393814a420698194aaa2fadb4239f93ca7","signature":"9e37d7b89a0b20c5f09c3c72855312f6524d78de1034d726e01ebce11345eb87"},"065fe32de041a59e0350caee68c052d7f941dece54d21f8ac34d94c77217e3a3","dd9747becc6dd9c9f99bdf17e53a584b5e908c9ef32556eb3e3b9a9ce1459f69","d4f31678774e81267da06d164078d32c244ed3b58f6b78e38a0a7aca93983fec","ed9c80af93d5fe88aab2e1fee980905d226be77a0f1c8f37f1315a5bab4c680e","a9ae01514d3c2f6a4f78a2046d8564d93c1f0dbb3a98fbafeb30501fa314bf0d","df2bf1c6a7c0d36e9cc615ffeb4661b176ebc6bbc21c55fb15582d8c64694c98","ed6811228d5a3a4d174dc175626ffe1ffecd8726802ca76847e4dba1b87cd6f4","d2ed83f5c1198f444a909c3d9a7fa7ceccfd2e2fc31b9637d038686568228b9f","e9daa8b54dc9ea0a2661695771827bc661cfae31d62dba145fb94ad2aa18e65b","033aa77757345317df572a1b09d979dcee4e81af0b8208a894d5552ae1251bc7","4485f031e139bb983e1e78e1382b1980eafb6d873cff12866a5638598ad8856a","1efbf0f9ab4ad73740e2d1770a660cdc6bdfb4c959519432f67c61da84d91b0b",{"version":"4e197213bcb33cc8bb1b018c504280c2b96438ddf3b9118705ffbb0c529fe940","impliedFormat":1},{"version":"32727845ab5bd8a9ef3e4844c567c09f6d418fcf0f90d381c00652a6f23e7f6e","impliedFormat":1},{"version":"bfe983b83684d7cf87147b9e94d4e77bd3ec348a3c76e209937f5f764f7d313d","impliedFormat":1},{"version":"7a8ec10b0834eb7183e4bfcd929838ac77583828e343211bb73676d1e47f6f01","impliedFormat":1},{"version":"63e97099b491288a8dbdefd8a951e1abc707d54441bea47920bedfb97f4f618c","affectsGlobalScope":true,"impliedFormat":1},{"version":"3f00324f263189b385c3a9383b1f4dae6237697bcf0801f96aa35c340512d79c","impliedFormat":1},{"version":"ec8997c2e5cea26befc76e7bf990750e96babb16977673a9ff3b5c0575d01e48","impliedFormat":1},"5c6ca83e2c0b3470b6b511f82d23f96c508c012806bfb8176d95ef9acd657ec3","dc4bba01da90f24494cbae429c651a86b9bdd1feaffd7a2051bf505503df65e2","a6a3dbe644f3f8146690ccf86ddbaf2c9e4010845d9c7547a783b73384973ed8",{"version":"0ea69f4c9fc2e9e8920a1477fd1feb7fd7db7ac844614ed05a2d7537f57dd8e6","affectsGlobalScope":true},"37610c790edaf57abe5293cf0ddebc8dd42f030456b3588023263caa89ed5fe2",{"version":"a3a8988dd42c8fcee7434d7a8815f7afd0865eea3edb31d2ba22fbe24c0b399c","signature":"865d900d03012035360a8937387e205352f786494371eeb09b82bdbb19d13a28"},"822b0789b9f2ce724df7d51e016a58ae9bccc47f475539c67e9dc08177a87dc2","d4a5e0ba041424154daa28ac4864ca327a73b0ff0725aca494c56f2d717d9116","fca30cd6956a0e0ea16313731d7ada9ecd00ad8253d2869e7f1e61ac6f66ac55","ed3422279000881e431de0d5a35240ccbe52b834c362326ac0015d8e6a54d031","9e6548c8a37f367886802cd90953003b1907b56b008f2c3ac951a6d2d400f3f4",{"version":"762bd9b8dd76468f05723afaf3de4ec618412128c314e03b18a1f937aed9d39c","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"9c29bb5d56c87e517bfd65d2f660caa84e40b5b1c60b729b624357469bf4db93","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"9bd6eb60d1fe54cbf6fc76eaec40c461069d3961378cba01f86ecd126ddbba50",{"version":"251c766f0ed7a4a5049e0eab09a5c89fe912d4387913b195ac33d16ebb9aae9c","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"d24a1513ec11d1417920bc9edadd053de88743fc817406e519bc7d0a71e628dc","2b7b5cec18a35a7b1c76cefd3bec0acd090099d58108ff84413db01ff15de1d9","e1a092e0a908bc52d4c8cfc7150cf51476317be233d40cb777eabd3ec58580b9",{"version":"ffa59a1faaf9c9518388abf11d8af90465d53e1467e2f6bde517759104b377d3","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"6db9f267cba7e70cf58938ac8837a4b1bfbb82cdf5c08ebe30ac4b544ddc13bb","d4645b1e0df8f99e7138a72fec88be0a80ae39eab9bb2d6a1afb4fc7d6d97f25","95eb753c666144867dbf97ac8ba630e86b20872cdd8a2233ba96bc07bfacbf3b",{"version":"3fb45ca66a79e7f96cbefd653f9fd1154d45039d90e7a2a1737f2c01cbc29894","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"fad7767395c08ee2d1025e25ad16739bd5b8e97144fad4f490ade21bb0f2d46a","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"ef27ca82d3cfa46dd5346c1867b5e1c88692421d6ff54e1e8c7848b2fbbbd184",{"version":"72fd1b840999e3d20cb51f6ab21aabe779204f9c144a53a0ec468703f60616c8","signature":"691008484c87974a216281493d4dc6b2be212b9f75648e2142152d2b17131d25"},{"version":"48bdc8928b2fdef0d086712369fc40f262fbda9c8bef9306dc304aa42972d2f7","signature":"ebf65055164861a868f13ee547bfaa7515136c57d744822602aee18754132546"},"aa449e122f1214d89ce5d7148d89e75b8ebdd025d69c025ab030276c77088fef","4c53baebb1ccabd24b13f9c95d3bd27f6b37d6318803367638916cea53103261","756629177f31e2ac30b2d5fc635329f19438bb3baf996337d5e396d521ef7f6e","89e0268c46639b57d631d796e606627e918ca2a1787a0b638be930b6b844b66b","0a5d1ec67b1d7c2ef84667b3f25e007949d51c7fe2b21c358bedffa6cd3df355","059b8af79002b83097b8ff3d46414a5b754bb20aa1187506ad53e409af07df9a","4bb710583177cac56dd8d2d795955f902d17798d64fbd50b92d9f69ebc971cd4","5c9a5dd9d64785be6e5dcb8259c1a33649a74f93da1a6ecc8175cb2cfab0af91","0f64d0afd06cbc7f3d87c614d3deed830fe94e9c131e1cfefa4ececcb437e9bc",{"version":"fcd1fd8a3e239de137187a82a3209d48e6154ebdeea67211e8cb58d9c323df44","signature":"7ea26840bca67fb07966011a93a9a063a1535cfee2b01bf4d4d712ef9e0aa36a"},"f58cf522a72eed44c5851acdd7bd72e0b41095d0bde244ec53a3e193c9c51634","785ef51321ba41d9695ddf6a52b23eec1191966d547fa766db28c64ea7b8db87","1bc17c39663509a20d0006f145f72cd1bce1baafb145fc05397b75e4a83b64c4","f3a98e6bb1d1e61b272f87907fa62ca1c68f4674379a3035b712dc15db690837","2318b011bf83a618a47a554b287c6986345e447f672a4e3d847de46e4151e047","fe61bb700ab0e0edcec3325a01f2018baa6d507446deb844dd6f77d6e9c8572a","9fee76762f4e1ee5c27869c01246b1580322d6baff940ea557ec821a8a32f639","602b9885936ac3bc5fac68aa13f06524659ec6c7e8988846785709676c3752d1",{"version":"7e3373dde2bba74076250204bd2af3aa44225717435e46396ef076b1954d2729","impliedFormat":1},{"version":"1c3dfad66ff0ba98b41c98c6f41af096fc56e959150bc3f44b2141fb278082fd","impliedFormat":1},{"version":"56208c500dcb5f42be7e18e8cb578f257a1a89b94b3280c506818fed06391805","impliedFormat":1},{"version":"0c94c2e497e1b9bcfda66aea239d5d36cd980d12a6d9d59e66f4be1fa3da5d5a","impliedFormat":1},{"version":"eb9271b3c585ea9dc7b19b906a921bf93f30f22330408ffec6df6a22057f3296","impliedFormat":1},{"version":"0205ee059bd2c4e12dcadc8e2cbd0132e27aeba84082a632681bd6c6c61db710","impliedFormat":1},{"version":"a694d38afadc2f7c20a8b1d150c68ac44d1d6c0229195c4d52947a89980126bc","impliedFormat":1},{"version":"9f1e00eab512de990ba27afa8634ca07362192063315be1f8166bc3dcc7f0e0f","impliedFormat":1},{"version":"9674788d4c5fcbd55c938e6719177ac932c304c94e0906551cc57a7942d2b53b","impliedFormat":1},{"version":"86dac6ce3fcd0a069b67a1ac9abdbce28588ea547fd2b42d73c1a2b7841cf182","impliedFormat":1},{"version":"4d34fbeadba0009ed3a1a5e77c99a1feedec65d88c4d9640910ff905e4e679f7","impliedFormat":1},{"version":"9d90361f495ed7057462bcaa9ae8d8dbad441147c27716d53b3dfeaea5bb7fc8","impliedFormat":1},{"version":"8fcc5571404796a8fe56e5c4d05049acdeac9c7a72205ac15b35cb463916d614","impliedFormat":1},{"version":"a3b3a1712610260c7ab96e270aad82bd7b28a53e5776f25a9a538831057ff44c","impliedFormat":1},{"version":"33a2af54111b3888415e1d81a7a803d37fada1ed2f419c427413742de3948ff5","impliedFormat":1},{"version":"d5a4fca3b69f2f740e447efb9565eecdbbe4e13f170b74dd4a829c5c9a5b8ebf","impliedFormat":1},{"version":"56f1e1a0c56efce87b94501a354729d0a0898508197cb50ab3e18322eb822199","impliedFormat":1},{"version":"8960e8c1730aa7efb87fcf1c02886865229fdbf3a8120dd08bb2305d2241bd7e","impliedFormat":1},{"version":"27bf82d1d38ea76a590cbe56873846103958cae2b6f4023dc59dd8282b66a38a","impliedFormat":1},{"version":"0daaab2afb95d5e1b75f87f59ee26f85a5f8d3005a799ac48b38976b9b521e69","impliedFormat":1},{"version":"2c378d9368abcd2eba8c29b294d40909845f68557bc0b38117e4f04fc56e5f9c","impliedFormat":1},{"version":"bb220eaac1677e2ad82ac4e7fd3e609a0c7b6f2d6d9c673a35068c97f9fcd5cd","affectsGlobalScope":true,"impliedFormat":1},{"version":"c60b14c297cc569c648ddaea70bc1540903b7f4da416edd46687e88a543515a1","impliedFormat":1},{"version":"94a802503ca276212549e04e4c6b11c4c14f4fa78722f90f7f0682e8847af434","impliedFormat":1},{"version":"9c0217750253e3bf9c7e3821e51cff04551c00e63258d5e190cf8bd3181d5d4a","impliedFormat":1},{"version":"5c2e7f800b757863f3ddf1a98d7521b8da892a95c1b2eafb48d652a782891677","impliedFormat":1},{"version":"21317aac25f94069dbcaa54492c014574c7e4d680b3b99423510b51c4e36035f","impliedFormat":1},{"version":"c61d8275c35a76cb12c271b5fa8707bb46b1e5778a370fd6037c244c4df6a725","impliedFormat":1},{"version":"c7793cb5cd2bef461059ca340fbcd19d7ddac7ab3dcc6cd1c90432fca260a6ae","impliedFormat":1},{"version":"fd3bf6d545e796ebd31acc33c3b20255a5bc61d963787fc8473035ea1c09d870","impliedFormat":1},{"version":"c7af51101b509721c540c86bb5fc952094404d22e8a18ced30c38a79619916fa","impliedFormat":1},{"version":"59c8f7d68f79c6e3015f8aee218282d47d3f15b85e5defc2d9d1961b6ffed7a0","impliedFormat":1},{"version":"93a2049cbc80c66aa33582ec2648e1df2df59d2b353d6b4a97c9afcbb111ccab","impliedFormat":1},{"version":"d04d359e40db3ae8a8c23d0f096ad3f9f73a9ef980f7cb252a1fdc1e7b3a2fb9","impliedFormat":1},{"version":"84aa4f0c33c729557185805aae6e0df3bd084e311da67a10972bbcf400321ff0","impliedFormat":1},{"version":"cf6cbe50e3f87b2f4fd1f39c0dc746b452d7ce41b48aadfdb724f44da5b6f6ed","impliedFormat":1},{"version":"3cf494506a50b60bf506175dead23f43716a088c031d3aa00f7220b3fbcd56c9","impliedFormat":1},{"version":"f2d47126f1544c40f2b16fc82a66f97a97beac2085053cf89b49730a0e34d231","impliedFormat":1},{"version":"724ac138ba41e752ae562072920ddee03ba69fe4de5dafb812e0a35ef7fb2c7e","impliedFormat":1},{"version":"e4eb3f8a4e2728c3f2c3cb8e6b60cadeb9a189605ee53184d02d265e2820865c","impliedFormat":1},{"version":"f16cb1b503f1a64b371d80a0018949135fbe06fb4c5f78d4f637b17921a49ee8","impliedFormat":1},{"version":"f4808c828723e236a4b35a1415f8f550ff5dec621f81deea79bf3a051a84ffd0","impliedFormat":1},{"version":"3b810aa3410a680b1850ab478d479c2f03ed4318d1e5bf7972b49c4d82bacd8d","impliedFormat":1},{"version":"0ce7166bff5669fcb826bc6b54b246b1cf559837ea9cc87c3414cc70858e6097","impliedFormat":1},{"version":"6ea095c807bc7cc36bc1774bc2a0ef7174bf1c6f7a4f6b499170b802ce214bfe","impliedFormat":1},{"version":"3549400d56ee2625bb5cc51074d3237702f1f9ffa984d61d9a2db2a116786c22","impliedFormat":1},{"version":"5327f9a620d003b202eff5db6be0b44e22079793c9a926e0a7a251b1dbbdd33f","impliedFormat":1},{"version":"b60f6734309d20efb9b0e0c7e6e68282ee451592b9c079dd1a988bb7a5eeb5e7","impliedFormat":1},{"version":"f4187a4e2973251fd9655598aa7e6e8bba879939a73188ee3290bb090cc46b15","impliedFormat":1},{"version":"44c1a26f578277f8ccef3215a4bd642a0a4fbbaf187cf9ae3053591c891fdc9c","impliedFormat":1},{"version":"a5989cd5e1e4ca9b327d2f93f43e7c981f25ee12a81c2ebde85ec7eb30f34213","impliedFormat":1},{"version":"f65b8fa1532dfe0ef2c261d63e72c46fe5f089b28edcd35b3526328d42b412b8","impliedFormat":1},{"version":"1060083aacfc46e7b7b766557bff5dafb99de3128e7bab772240877e5bfe849d","impliedFormat":1},{"version":"d61a3fa4243c8795139e7352694102315f7a6d815ad0aeb29074cfea1eb67e93","impliedFormat":1},{"version":"1f66b80bad5fa29d9597276821375ddf482c84cfb12e8adb718dc893ffce79e0","impliedFormat":1},{"version":"1ed8606c7b3612e15ff2b6541e5a926985cbb4d028813e969c1976b7f4133d73","impliedFormat":1},{"version":"c086ab778e9ba4b8dbb2829f42ef78e2b28204fc1a483e42f54e45d7a96e5737","impliedFormat":1},{"version":"dd0b9b00a39436c1d9f7358be8b1f32571b327c05b5ed0e88cc91f9d6b6bc3c9","impliedFormat":1},{"version":"a951a7b2224a4e48963762f155f5ad44ca1145f23655dde623ae312d8faeb2f2","impliedFormat":1},{"version":"cd960c347c006ace9a821d0a3cffb1d3fbc2518a4630fb3d77fe95f7fd0758b8","impliedFormat":1},{"version":"fe1f3b21a6cc1a6bc37276453bd2ac85910a8bdc16842dc49b711588e89b1b77","impliedFormat":1},{"version":"1a6a21ff41d509ab631dbe1ea14397c518b8551f040e78819f9718ef80f13975","impliedFormat":1},{"version":"0a55c554e9e858e243f714ce25caebb089e5cc7468d5fd022c1e8fa3d8e8173d","impliedFormat":1},{"version":"3a5e0fe9dcd4b1a9af657c487519a3c39b92a67b1b21073ff20e37f7d7852e32","impliedFormat":1},{"version":"977aeb024f773799d20985c6817a4c0db8fed3f601982a52d4093e0c60aba85f","impliedFormat":1},{"version":"d59cf5116848e162c7d3d954694f215b276ad10047c2854ed2ee6d14a481411f","impliedFormat":1},{"version":"50098be78e7cbfc324dfc04983571c80539e55e11a0428f83a090c13c41824a2","impliedFormat":1},{"version":"08e767d9d3a7e704a9ea5f057b0f020fd5880bc63fbb4aa6ffee73be36690014","impliedFormat":1},{"version":"dd6051c7b02af0d521857069c49897adb8595d1f0e94487d53ebc157294ef864","impliedFormat":1},{"version":"79c6a11f75a62151848da39f6098549af0dd13b22206244961048326f451b2a8","impliedFormat":1},"e74c78bc42431bc8129e78f0dfc837d08c9892742778978ab2e1b069b03a4186","4576cbcd950c906ac16558316501209834b56f5bfa8a3f79287aee10f40e7f79","ae45170ddbaab386920babfab5864963cd5d56d3452418ca16754f099f70ff07","9c575eb500e5a354c60d1056d2f7091914ddc0fc1c26b98c2b0afbef69477878","eff221cea7674eb54f18297244edfd30e60a496b2fd0a5760d52866861abfc71","4338d8f47c15c4fe8739dadfb83f6665e7973e062b9a2af451306622c99e83c0",{"version":"1f7154f9fbbbbd86c9a378b19aeaa01d9477344135ca4d1ad89a4a486a5154b2","signature":"68f91c0853f0fba0637fcbda2bf53defd0d06d88e7aafe055619388924edfd51"},"9079af79fd5b01662eeb3ad81c0139dc3ea5fda709995a09467eedfc2323ea38","f55b8e0164932c540602959adc41de821741ca718472455395be9002b31e9c60","8939270ac3724c70cfe9d863cb04d3b7241f3b5ec21cb53d901a8616242cf179","9204354e935700eecd0fd487817ccee3aa1de839857fbffddcc6dbbf4e261559","b52b098a094ec02d2fd22fb2eb6ae64ac3ee3b6b7b0d51a82fd8a887b8bfd3b9","9b12b3cd535a854dd11ec9d2bd336524f0256df3961bf2f9270c1b5bbc693e2e","4097de76ef56e56bf536585458d1587ffdc20f86b912d5f6aa95bcf9bdd5bfb5","a8ea2a8a123e7b451e1143d3f9babaafff47e4e7471b537c1bd967584f9a5b7d",{"version":"b058758f9ce8ba5e93e791324a159c6732d24100da4293ff85c39e6b414402d0","signature":"1fb523a10a1efec2e7579fd68372532a2b1c6bcafaf572b3a723db470ac0711c"},"78b18ca175b4d7084537ba72c44cece4458dddfc23ba726d802483bf0c647f0a",{"version":"d3a79dcc37e94518948144b68c3008a7105622d186e4bfda44996bb4774c431f","signature":"b80e655a8a687f886b2b54800fd11f34adb4e9589131ffce5678533705c6bf1a"},"d3bb349695180361a621f13fc728805c00c20a4c94e1f1fa5715421bbf23901d","8c02dade975de0d32e1e1750bbbb03ba82f47606a0dbdafaf140dcf78b4403ae","24de7867c99cdb0b43c51b8477ea84e866b33bee732836a47859fc4eb23a7eb8",{"version":"5630732ab034095be12287b9734977f342125bfcb828cc768d48131bec84796d","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"314ad8757cfcca4d2e8180cdff333ef3053aa8be59ded782e391b4e7d8e5be4c","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"ab59eec7136b60fbf05ef0676ba10cdbc82803de44a8083dc1f25130ff2fc633","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"17f723079550d3c348df452364d8e5fd7d60b1b54322b9af1a63c3262eb72208","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"494cf71750fd1dc277b1b2784812b6f0a2c571380ac7b342ded73e6367eafe13","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"b08bc36799fa9e8d471da720dfb69b9b98a1caaa8d97acb6c0e6717c82065de9","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"92bc81cdf88e429075ee0f549c15c152a05c678d352df115d26a4bb1cff767eb","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"aa64f82a631e7d7651713de2e66086924784435119195b22209b64219c7c9beb","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"cf2f06301667e1b6416a60b5fbdd7f9eb53f1c848d75ba40bb08af314e204e99","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"dd6fb73000ffaf77f6a31712c103b8ba3245ba8f72448cf66d5b07132311b340","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"15a7d2e9a1834c1a2c485edd0860f793fbb7a8437c33fc2e0fc96078c8988c07","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"202efcb491654dab23ececc7c2d7339b1e9ea68e97d5d4a1d6e429ac95059bf7","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"fe0435ab2a5808d757a6f2d2f8a62dc06ecb01762d7e16242e0c5e0982932e13","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"fe9ded23857147fbbdb86fb82dea4d593ceb3c03ae38b9bf36b7c7b24fcfd204","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"2dc2dffa0e4694aceb470a3f273a935c7225ebc5dee66376534697cf29c12717","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"703cebfc47ba7eb8a851f27dd2a9032ba211be6d50e745d04f7e7ff16a783e44","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"bb88a05928c9593a97f7633eae161786274c17fea6e696feceed3b29cc72e9fa","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"a88e9c8a3ea03457052c697e9b34893d79dc74229e139cbf6a3bfea2f47c8330","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"19da015d108e623a5749289f1888e358868ecea0b546d79fbd1c38f6ea19f607","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"12dbbeee83ecb700bb2c44a95b15627fb70e3d1cb6e587a04c8e154b74780428","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"dbc7355ce0c301f753858de54e8134e36d52a0c585473c4456de632ca095772e","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"7ca9872347680eaba25ca007e7dadabbc53ffdcdb984c44e2a0f167a6e7a4bf0","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"f7bf0f0994ceaa083aaa36a660e6b94c194e0e2d9d3076f957540336e2dd08d7","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"e0c868a08451c879984ccf4d4e3c1240b3be15af8988d230214977a3a3dad4ce","impliedFormat":1},{"version":"6fc1a4f64372593767a9b7b774e9b3b92bf04e8785c3f9ea98973aa9f4bbe490","impliedFormat":1},{"version":"ff09b6fbdcf74d8af4e131b8866925c5e18d225540b9b19ce9485ca93e574d84","impliedFormat":1},{"version":"d5895252efa27a50f134a9b580aa61f7def5ab73d0a8071f9b5bf9a317c01c2d","impliedFormat":1},{"version":"1f366bde16e0513fa7b64f87f86689c4d36efd85afce7eb24753e9c99b91c319","impliedFormat":1},{"version":"96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","impliedFormat":1}],"root":[[404,419],[427,471],[542,585]],"options":{"allowJs":true,"esModuleInterop":true,"jsx":1,"module":99,"skipLibCheck":true,"strict":true,"target":4},"referencedMap":[[564,1],[565,2],[566,3],[567,4],[568,5],[569,6],[570,7],[571,8],[572,9],[573,10],[574,11],[575,12],[576,13],[577,14],[578,15],[579,16],[581,17],[580,17],[582,18],[583,19],[563,20],[584,21],[585,22],[463,23],[465,24],[466,25],[467,26],[470,27],[471,28],[405,29],[406,29],[407,30],[410,31],[544,32],[546,33],[547,34],[548,35],[554,36],[555,37],[556,38],[557,39],[461,40],[558,41],[462,42],[559,43],[560,44],[553,45],[464,46],[409,47],[552,48],[549,49],[459,50],[561,51],[469,52],[550,53],[543,54],[418,55],[416,55],[417,55],[415,55],[419,56],[545,54],[562,57],[468,58],[551,59],[542,60],[460,61],[427,62],[428,62],[429,63],[432,64],[431,65],[430,66],[433,66],[434,66],[435,67],[436,67],[437,63],[438,66],[439,63],[440,66],[441,68],[442,62],[443,66],[444,63],[445,66],[446,66],[447,66],[448,66],[449,66],[450,66],[412,69],[451,65],[411,70],[453,71],[454,72],[455,73],[414,74],[456,69],[457,72],[404,75],[357,65],[426,76],[586,65],[587,65],[588,65],[589,77],[492,65],[475,78],[493,79],[474,65],[590,65],[591,65],[138,80],[139,80],[140,81],[99,82],[141,83],[142,84],[143,85],[94,65],[97,86],[95,65],[96,65],[144,87],[145,88],[146,89],[147,90],[148,91],[149,92],[150,92],[152,65],[151,93],[153,94],[154,95],[155,96],[137,97],[98,65],[156,98],[157,99],[158,100],[190,101],[159,102],[160,103],[161,104],[162,105],[163,106],[164,107],[165,108],[166,109],[167,110],[168,111],[169,111],[170,112],[171,65],[172,113],[174,114],[173,115],[175,116],[176,117],[177,118],[178,119],[179,120],[180,121],[181,122],[182,123],[183,124],[184,125],[185,126],[186,127],[187,128],[188,129],[189,130],[86,65],[192,131],[193,132],[84,65],[87,133],[280,54],[85,65],[93,134],[360,135],[364,136],[366,137],[213,138],[227,139],[331,140],[259,65],[334,141],[295,142],[304,143],[332,144],[214,145],[258,65],[260,146],[333,147],[234,148],[215,149],[239,148],[228,148],[198,148],[286,150],[287,151],[203,65],[283,152],[288,153],[375,154],[281,153],[376,155],[265,65],[284,156],[388,157],[387,158],[290,153],[386,65],[384,65],[385,159],[285,54],[272,160],[273,161],[282,162],[299,163],[300,164],[289,165],[267,166],[268,167],[379,168],[382,169],[246,170],[245,171],[244,172],[391,54],[243,173],[219,65],[394,65],[397,65],[396,54],[398,174],[194,65],[325,65],[226,175],[196,176],[348,65],[349,65],[351,65],[354,177],[350,65],[352,178],[353,178],[212,65],[225,65],[359,179],[367,180],[371,181],[208,182],[275,183],[274,65],[266,166],[294,184],[292,185],[291,65],[293,65],[298,186],[270,187],[207,188],[232,189],[322,190],[199,191],[206,192],[195,140],[336,193],[346,194],[335,65],[345,195],[233,65],[217,196],[313,197],[312,65],[319,198],[321,199],[314,200],[318,201],[320,198],[317,200],[316,198],[315,200],[255,202],[240,202],[307,203],[241,203],[201,204],[200,65],[311,205],[310,206],[309,207],[308,208],[202,209],[279,210],[296,211],[278,212],[303,213],[305,214],[302,212],[235,209],[191,65],[323,215],[261,216],[297,65],[344,217],[264,218],[339,219],[205,65],[340,220],[342,221],[343,222],[326,65],[338,191],[237,223],[324,224],[347,225],[209,65],[211,65],[216,226],[306,227],[204,228],[210,65],[263,229],[262,230],[218,231],[271,232],[269,233],[220,234],[222,235],[395,65],[221,236],[223,237],[362,65],[361,65],[363,65],[393,65],[224,238],[277,54],[92,65],[301,239],[247,65],[257,240],[236,65],[369,54],[378,241],[254,54],[373,153],[253,242],[356,243],[252,241],[197,65],[380,244],[250,54],[251,54],[242,65],[256,65],[249,245],[248,246],[238,247],[231,165],[341,65],[230,248],[229,65],[365,65],[276,54],[358,249],[83,65],[91,250],[88,54],[89,65],[90,65],[337,251],[330,252],[329,65],[328,253],[327,65],[368,254],[370,255],[372,256],[374,257],[377,258],[403,259],[381,259],[402,260],[383,261],[389,262],[390,263],[392,264],[399,265],[401,65],[400,266],[355,267],[423,268],[420,65],[421,268],[422,269],[425,270],[424,271],[515,272],[517,273],[507,274],[512,275],[513,276],[519,277],[514,278],[511,279],[510,280],[509,281],[520,282],[477,275],[478,275],[518,275],[523,283],[533,284],[527,284],[535,284],[539,284],[525,285],[526,284],[528,284],[531,284],[534,284],[530,286],[532,284],[536,54],[529,275],[524,287],[486,54],[490,54],[480,275],[483,54],[488,275],[489,288],[482,289],[485,54],[487,54],[484,290],[473,54],[472,54],[541,291],[538,292],[504,293],[503,275],[501,54],[502,275],[505,294],[506,295],[499,54],[495,296],[498,275],[497,275],[496,275],[491,275],[500,296],[537,275],[516,297],[522,298],[521,299],[540,65],[508,65],[481,65],[479,300],[81,65],[82,65],[13,65],[14,65],[16,65],[15,65],[2,65],[17,65],[18,65],[19,65],[20,65],[21,65],[22,65],[23,65],[24,65],[3,65],[25,65],[26,65],[4,65],[27,65],[31,65],[28,65],[29,65],[30,65],[32,65],[33,65],[34,65],[5,65],[35,65],[36,65],[37,65],[38,65],[6,65],[42,65],[39,65],[40,65],[41,65],[43,65],[7,65],[44,65],[49,65],[50,65],[45,65],[46,65],[47,65],[48,65],[8,65],[54,65],[51,65],[52,65],[53,65],[55,65],[9,65],[56,65],[57,65],[58,65],[60,65],[59,65],[61,65],[62,65],[10,65],[63,65],[64,65],[65,65],[11,65],[66,65],[67,65],[68,65],[69,65],[70,65],[1,65],[71,65],[72,65],[12,65],[76,65],[74,65],[79,65],[78,65],[73,65],[77,65],[75,65],[80,65],[115,301],[125,302],[114,301],[135,303],[106,304],[105,305],[134,266],[128,306],[133,307],[108,308],[122,309],[107,310],[131,311],[103,312],[102,266],[132,313],[104,314],[109,315],[110,65],[113,315],[100,65],[136,316],[126,317],[117,318],[118,319],[120,320],[116,321],[119,322],[129,266],[111,323],[112,324],[121,325],[101,326],[124,317],[123,315],[127,65],[130,327],[476,328],[494,329],[458,65],[452,65],[408,65],[413,65]],"semanticDiagnosticsPerFile":[[580,[{"start":132,"length":58,"messageText":"Cannot find module '../../../../../../app/e/[engagementId]/workshops/page.js' or its corresponding type declarations.","category":1,"code":2307},{"start":331,"length":58,"messageText":"Cannot find module '../../../../../../app/e/[engagementId]/workshops/page.js' or its corresponding type declarations.","category":1,"code":2307}]],[581,[{"start":137,"length":66,"messageText":"Cannot find module '../../../../../../../app/e/[engagementId]/workshops/[id]/page.js' or its corresponding type declarations.","category":1,"code":2307},{"start":344,"length":66,"messageText":"Cannot find module '../../../../../../../app/e/[engagementId]/workshops/[id]/page.js' or its corresponding type declarations.","category":1,"code":2307}]]],"affectedFilesPendingEmit":[564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,581,580,582,583,563,584,585,463,465,466,467,470,471,405,406,407,410,544,546,547,548,554,555,556,557,461,558,462,559,560,553,464,409,552,549,459,561,469,550,543,418,416,417,415,419,545,562,468,551,542,460,427,428,429,432,431,430,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,412,451,411,453,454,455,414,456,457,458,452,408,413],"version":"5.9.2"}
\ No newline at end of file
diff --git a/web/types/workshops.ts b/web/types/workshops.ts
new file mode 100644
index 0000000000000000000000000000000000000000..8342ea26f50eff1877b02d6c012b69f43d21bd8b
--- /dev/null
+++ b/web/types/workshops.ts
@@ -0,0 +1,56 @@
+// Workshop types matching backend API schemas
+
+export interface WorkshopAttendee {
+  id: string;
+  user_id: string;
+  email: string;
+  role: string;
+  consent?: ConsentRecord;
+}
+
+export interface ConsentRecord {
+  by: string;
+  user_id: string;
+  timestamp: string; // ISO string
+}
+
+export interface Workshop {
+  id: string;
+  engagement_id: string;
+  title: string;
+  start_ts?: string; // ISO string
+  attendees: WorkshopAttendee[];
+  created_by: string;
+  created_at: string; // ISO string
+  started: boolean;
+  started_at?: string; // ISO string
+}
+
+export interface WorkshopListResponse {
+  workshops: Workshop[];
+  total_count: number;
+  page: number;
+  page_size: number;
+  has_more: boolean;
+}
+
+// Form types for UI
+export interface CreateWorkshopFormData {
+  title: string;
+  start_ts?: string;
+  attendees: {
+    user_id: string;
+    email: string;
+    role: string;
+  }[];
+}
+
+export interface ConsentRequestData {
+  attendee_id: string;
+  consent: boolean;
+}
+
+export interface StartWorkshopResponse {
+  workshop: Workshop;
+  message: string;
+}
\ No newline at end of file
