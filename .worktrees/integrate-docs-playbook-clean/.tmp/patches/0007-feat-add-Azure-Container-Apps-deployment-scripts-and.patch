From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Valerii Sysoiev <valsysoiev@gmail.com>
Date: Wed, 13 Aug 2025 17:30:45 -0600
Subject: [PATCH 07/90] feat: add Azure Container Apps deployment scripts and
 documentation

- Add deployment scripts:
  - scripts/deploy_admin.sh: Main deployment using ACR admin credentials
  - scripts/print_urls.sh: Display deployed app URLs
  - scripts/smoke.sh: API health check

- Update CORS to allow all origins for demo (app/api/main.py)

- Add deployment documentation to README:
  - ACR admin deployment instructions
  - Steps to switch to Managed Identity

- Update Makefile with deployment shortcuts:
  - make deploy-admin
  - make urls
  - make smoke

diff --git a/Makefile b/Makefile
index 10ff1e9f5b87a9a061d12495455b509f1e529c0b..a100b51e2f0afbf1c7f81fa868c3518b6fe8a068 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,5 @@
 SHELL := /bin/bash
-.PHONY: venv deps dev
+.PHONY: venv deps dev deploy-admin urls smoke
 
 venv:
 	python3 -m venv .venv
@@ -12,3 +12,12 @@ deps:
 dev:
 	[ -f .env ] || cp .env.example .env; \
 	. .venv/bin/activate && honcho start
+
+deploy-admin:
+	chmod +x scripts/deploy_admin.sh && ./scripts/deploy_admin.sh
+
+urls:
+	scripts/print_urls.sh
+
+smoke:
+	scripts/smoke.sh
diff --git a/README.md b/README.md
index edbf55d333a8f8cbf74f17221dcccfac2dd94cbc..6be0192f78fd7d636593bdff7c8d05ee222680d2 100644
--- a/README.md
+++ b/README.md
@@ -316,3 +316,67 @@ The application uses SQLite for persistence:
 - Contains assessments and answers tables
 
 ---
+
+## Deploy with ACR Admin (Temporary)
+
+This section describes how to deploy the application to Azure Container Apps using ACR admin credentials as a temporary measure.
+
+### Prerequisites
+
+- Azure CLI (`az`) installed and configured
+- Docker installed and running
+- Access to the Azure subscription
+
+### Deployment Steps
+
+1. **Make scripts executable and run deployment:**
+   ```bash
+   chmod +x scripts/deploy_admin.sh && ./scripts/deploy_admin.sh
+   ```
+
+2. **Get the deployed application URLs:**
+   ```bash
+   scripts/print_urls.sh
+   ```
+
+3. **Run smoke test to verify API health:**
+   ```bash
+   scripts/smoke.sh
+   ```
+
+⚠️ **Important:** Don't re-apply Terraform that touches Container Apps while using admin credentials, as it will wipe the runtime registry credentials.
+
+### Switch to Managed Identity (Recommended)
+
+Once RBAC permissions are granted, switch from ACR admin credentials to Managed Identity:
+
+1. **Grant required roles to the User-Assigned Identities:**
+   
+   For the API identity:
+   - AcrPull (on ACR)
+   - Storage Blob Data Contributor (on Storage Account)
+   - Storage Blob Data Delegator (on Storage Account)
+   - Key Vault Secrets User (on Key Vault)
+   
+   For the Web identity:
+   - AcrPull (on ACR)
+
+2. **Enable Managed Identity for storage in the API:**
+   ```bash
+   az containerapp update -g rg-aaa-demo -n api-aaa-demo --set-env-vars USE_MANAGED_IDENTITY=true
+   ```
+
+3. **Remove admin credentials from Container Apps:**
+   ```bash
+   az containerapp registry remove -g rg-aaa-demo -n api-aaa-demo --server acraaademo9lyu53.azurecr.io
+   az containerapp registry remove -g rg-aaa-demo -n web-aaa-demo --server acraaademo9lyu53.azurecr.io
+   ```
+
+4. **Disable ACR admin access:**
+   ```bash
+   az acr update -n acraaademo9lyu53 --admin-enabled false
+   ```
+
+After these steps, the Container Apps will use their Managed Identities to pull images from ACR and the API will use its identity for Azure Storage operations.
+
+---
diff --git a/app/api/main.py b/app/api/main.py
index 500151d4dcf5ee2fcfafbf3eddb1811d2d4bf40d..2c69e5311f199f7eefbd34be7aa68bba2df617a3 100644
--- a/app/api/main.py
+++ b/app/api/main.py
@@ -21,7 +21,7 @@ def on_startup():
 # Configure CORS
 app.add_middleware(
     CORSMiddleware,
-    allow_origins=["http://localhost:3000"],
+    allow_origins=["*"],    # TODO: swap to [WEB_URL] later
     allow_credentials=True,
     allow_methods=["*"],
     allow_headers=["*"],
diff --git a/scripts/deploy_admin.sh b/scripts/deploy_admin.sh
new file mode 100755
index 0000000000000000000000000000000000000000..7cca882982a13ca80a5b4953f3e8d538de1b6aa1
--- /dev/null
+++ b/scripts/deploy_admin.sh
@@ -0,0 +1,96 @@
+#!/usr/bin/env bash
+set -euo pipefail
+
+# ---------- Config ----------
+SUBSCRIPTION="10233675-d493-4a97-9c81-4001e353a7bb"
+RG="rg-aaa-demo"
+ACR_NAME="acraaademo9lyu53"
+ACR_SERVER="${ACR_NAME}.azurecr.io"
+ACA_ENV_NAME="${ACA_ENV_NAME:-}"     # allow override via env
+APP_API_NAME="${APP_API_NAME:-api-aaa-demo}"
+APP_WEB_NAME="${APP_WEB_NAME:-web-aaa-demo}"
+STORAGE_ACCOUNT="${STORAGE_ACCOUNT:-staaademo6jshgh}"
+STORAGE_CONTAINER="${STORAGE_CONTAINER:-docs}"
+
+# ---------- Preconditions ----------
+command -v az >/dev/null || { echo "Azure CLI not found"; exit 1; }
+command -v docker >/dev/null || { echo "Docker not found"; exit 1; }
+
+az account set --subscription "$SUBSCRIPTION"
+az extension add --name containerapp -y >/dev/null 2>&1 || az extension update --name containerapp -y >/dev/null 2>&1
+
+if [[ -z "${ACA_ENV_NAME}" ]]; then
+  ACA_ENV_NAME="$(az containerapp env list -g "$RG" --query '[0].name' -o tsv 2>/dev/null || true)"
+fi
+if [[ -z "${ACA_ENV_NAME}" || "${ACA_ENV_NAME}" == "null" ]]; then
+  echo "No Container Apps environment found in $RG. Set ACA_ENV_NAME env var or create an environment first."
+  exit 1
+fi
+
+# ---------- ACR admin creds (in-memory only) ----------
+az acr update -n "$ACR_NAME" --admin-enabled true >/dev/null
+ACR_USER="$(az acr credential show -n "$ACR_NAME" --query "username" -o tsv)"
+ACR_PASS="$(az acr credential show -n "$ACR_NAME" --query "passwords[0].value" -o tsv)"
+
+echo "Logging into ACR $ACR_SERVER as $ACR_USER"
+echo "$ACR_PASS" | docker login "$ACR_SERVER" -u "$ACR_USER" --password-stdin
+
+# ---------- Build & Push API ----------
+echo "Building API image..."
+docker buildx build --platform linux/amd64 -t "$ACR_SERVER/ai-maturity-api:0.1.0" -f app/Dockerfile .
+docker push "$ACR_SERVER/ai-maturity-api:0.1.0"
+
+# ---------- Create/Update API Container App ----------
+if az containerapp show -g "$RG" -n "$APP_API_NAME" >/dev/null 2>&1; then
+  echo "Updating Container App: $APP_API_NAME"
+  az containerapp update -g "$RG" -n "$APP_API_NAME" \
+    --image "$ACR_SERVER/ai-maturity-api:0.1.0" \
+    --registry-server "$ACR_SERVER" --registry-username "$ACR_USER" --registry-password "$ACR_PASS" \
+    --set-env-vars USE_MANAGED_IDENTITY=false AZURE_STORAGE_ACCOUNT="$STORAGE_ACCOUNT" AZURE_STORAGE_CONTAINER="$STORAGE_CONTAINER" >/dev/null
+else
+  echo "Creating Container App: $APP_API_NAME"
+  az containerapp create -g "$RG" -n "$APP_API_NAME" \
+    --environment "$ACA_ENV_NAME" \
+    --image "$ACR_SERVER/ai-maturity-api:0.1.0" \
+    --target-port 8000 --ingress external \
+    --registry-server "$ACR_SERVER" --registry-username "$ACR_USER" --registry-password "$ACR_PASS" \
+    --cpu 0.25 --memory 0.5Gi \
+    --env-vars USE_MANAGED_IDENTITY=false AZURE_STORAGE_ACCOUNT="$STORAGE_ACCOUNT" AZURE_STORAGE_CONTAINER="$STORAGE_CONTAINER" >/dev/null
+fi
+
+API_FQDN="$(az containerapp show -g "$RG" -n "$APP_API_NAME" --query properties.configuration.ingress.fqdn -o tsv)"
+API_URL="https://${API_FQDN}"
+echo "API_URL=$API_URL"
+
+# ---------- Build & Push Web (bakes API_URL) ----------
+echo "Building Web image with NEXT_PUBLIC_API_BASE_URL=$API_URL ..."
+docker buildx build --platform linux/amd64 \
+  -t "$ACR_SERVER/ai-maturity-web:0.1.1" \
+  -f web/Dockerfile \
+  --build-arg NEXT_PUBLIC_API_BASE_URL="$API_URL" \
+  .
+docker push "$ACR_SERVER/ai-maturity-web:0.1.1"
+
+# ---------- Create/Update Web Container App ----------
+if az containerapp show -g "$RG" -n "$APP_WEB_NAME" >/dev/null 2>&1; then
+  echo "Updating Container App: $APP_WEB_NAME"
+  az containerapp update -g "$RG" -n "$APP_WEB_NAME" \
+    --image "$ACR_SERVER/ai-maturity-web:0.1.1" \
+    --registry-server "$ACR_SERVER" --registry-username "$ACR_USER" --registry-password "$ACR_PASS" >/dev/null
+else
+  echo "Creating Container App: $APP_WEB_NAME"
+  az containerapp create -g "$RG" -n "$APP_WEB_NAME" \
+    --environment "$ACA_ENV_NAME" \
+    --image "$ACR_SERVER/ai-maturity-web:0.1.1" \
+    --target-port 3000 --ingress external \
+    --registry-server "$ACR_SERVER" --registry-username "$ACR_USER" --registry-password "$ACR_PASS" \
+    --cpu 0.25 --memory 0.5Gi >/dev/null
+fi
+
+WEB_FQDN="$(az containerapp show -g "$RG" -n "$APP_WEB_NAME" --query properties.configuration.ingress.fqdn -o tsv)"
+WEB_URL="https://${WEB_FQDN}"
+echo "WEB_URL=$WEB_URL"
+
+# ---------- Health ----------
+echo "API health:"
+curl -s "$API_URL/health" || true
diff --git a/scripts/print_urls.sh b/scripts/print_urls.sh
new file mode 100755
index 0000000000000000000000000000000000000000..2390a16e668799b59e0cdd1a1d47f370f9433ccb
--- /dev/null
+++ b/scripts/print_urls.sh
@@ -0,0 +1,9 @@
+#!/usr/bin/env bash
+set -euo pipefail
+RG="${RG:-rg-aaa-demo}"
+API="api-aaa-demo"
+WEB="web-aaa-demo"
+API_URL="https://$(az containerapp show -g "$RG" -n "$API" --query properties.configuration.ingress.fqdn -o tsv)"
+WEB_URL="https://$(az containerapp show -g "$RG" -n "$WEB" --query properties.configuration.ingress.fqdn -o tsv)"
+echo "API_URL=$API_URL"
+echo "WEB_URL=$WEB_URL"
diff --git a/scripts/smoke.sh b/scripts/smoke.sh
new file mode 100755
index 0000000000000000000000000000000000000000..a8827bec411e2a727d622ed80487420c3a4f5240
--- /dev/null
+++ b/scripts/smoke.sh
@@ -0,0 +1,7 @@
+#!/usr/bin/env bash
+set -euo pipefail
+RG="${RG:-rg-aaa-demo}"
+API="api-aaa-demo"
+API_URL="https://$(az containerapp show -g "$RG" -n "$API" --query properties.configuration.ingress.fqdn -o tsv)"
+echo "GET $API_URL/health"
+curl -s "$API_URL/health" || true
