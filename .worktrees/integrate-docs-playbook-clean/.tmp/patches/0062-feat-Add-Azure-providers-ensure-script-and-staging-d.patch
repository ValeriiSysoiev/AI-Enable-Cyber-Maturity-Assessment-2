From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Valerii Sysoiev <valsysoiev@gmail.com>
Date: Mon, 18 Aug 2025 07:10:53 -0600
Subject: [PATCH 62/90] feat: Add Azure providers ensure script and staging
 deployment guide
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- Add scripts/azure/providers_ensure.sh with idempotent resource group creation and provider registration
- Implements bounded execution with 480s timeout and clear error handling
- Registers Microsoft.OperationalInsights and Microsoft.Insights providers
- Add docs/DEPLOY_STAGING.md explaining provider registration requirements and troubleshooting

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

diff --git a/docs/DEPLOY_STAGING.md b/docs/DEPLOY_STAGING.md
new file mode 100644
index 0000000000000000000000000000000000000000..b4fc8375de3b14b259bf934b7584b597f1e135c3
--- /dev/null
+++ b/docs/DEPLOY_STAGING.md
@@ -0,0 +1,180 @@
+# Azure Staging Deployment Guide
+
+This guide covers the prerequisites and setup required for deploying the Cyber Maturity Assessment application to Azure staging environments.
+
+## Prerequisites
+
+### Azure Subscription Requirements
+
+Before deploying to Azure, ensure your subscription and environment meet these requirements:
+
+1. **Active Azure Subscription** with sufficient quota
+2. **Required Permissions** on the subscription:
+   - `Owner` or `Contributor` role for resource management
+   - `User Access Administrator` for managed identity role assignments
+3. **Azure CLI** installed and authenticated
+
+### Required Azure Resource Providers
+
+The following Azure resource providers must be registered in your subscription:
+
+- `Microsoft.OperationalInsights` - For Log Analytics workspaces and monitoring
+- `Microsoft.Insights` - For Application Insights and alert rules
+- `Microsoft.ContainerRegistry` - For Azure Container Registry
+- `Microsoft.App` - For Container Apps
+- `Microsoft.Storage` - For storage accounts
+- `Microsoft.DocumentDB` - For Cosmos DB
+- `Microsoft.Search` - For Azure Cognitive Search
+- `Microsoft.CognitiveServices` - For Azure OpenAI Service
+- `Microsoft.KeyVault` - For Azure Key Vault
+
+## Provider Registration
+
+### Automatic Registration
+
+Use the provided script to automatically ensure required providers are registered:
+
+```bash
+# Set environment variables
+export AZURE_RESOURCE_GROUP="rg-cybermaturity-staging"
+export AZURE_LOCATION="East US"
+
+# Run the providers ensure script
+./scripts/azure/providers_ensure.sh
+```
+
+### Script Features
+
+The `providers_ensure.sh` script provides:
+
+- **Idempotent Operation**: Safe to run multiple times
+- **Resource Group Management**: Creates resource group if it doesn't exist
+- **Provider Registration**: Registers Microsoft.OperationalInsights and Microsoft.Insights
+- **Bounded Execution**: Maximum wait time of 480 seconds (8 minutes) with timeout handling
+- **Clear Error Messages**: Detailed error reporting with remediation guidance
+- **Permission Validation**: Checks for Azure CLI authentication and subscription access
+
+### Environment Variables
+
+| Variable | Description | Default |
+|----------|-------------|---------|
+| `AZURE_RESOURCE_GROUP` | Target resource group name | None (optional) |
+| `AZURE_LOCATION` | Azure region for resource group | "East US" |
+| `MAX_WAIT` | Maximum wait time for provider registration (seconds) | 480 |
+
+### Manual Provider Registration
+
+If you prefer to register providers manually:
+
+```bash
+# Check current provider status
+az provider show --namespace Microsoft.OperationalInsights --query 'registrationState'
+az provider show --namespace Microsoft.Insights --query 'registrationState'
+
+# Register providers if needed
+az provider register --namespace Microsoft.OperationalInsights
+az provider register --namespace Microsoft.Insights
+
+# Monitor registration progress
+az provider show --namespace Microsoft.OperationalInsights --query 'registrationState'
+az provider show --namespace Microsoft.Insights --query 'registrationState'
+```
+
+## Permission Requirements
+
+### Subscription-Level Permissions
+
+Your account or service principal needs these permissions:
+
+1. **Resource Management**:
+   - Create and manage resource groups
+   - Deploy Azure resources (Container Apps, Cosmos DB, etc.)
+   - Configure networking and security settings
+
+2. **Identity and Access Management**:
+   - Create and manage managed identities
+   - Assign roles to managed identities
+   - Configure RBAC for resources
+
+3. **Monitoring and Logging**:
+   - Create Log Analytics workspaces
+   - Configure diagnostic settings
+   - Set up alert rules
+
+### Required Azure Roles
+
+For deployment, assign one of these roles to your account:
+
+- **Owner** (Recommended for staging): Full access to all resources and role assignments
+- **Contributor + User Access Administrator**: Resource management + role assignment capabilities
+
+### Service Principal Setup (CI/CD)
+
+For automated deployments, create a service principal with appropriate permissions:
+
+```bash
+# Create service principal
+az ad sp create-for-rbac --name "sp-cybermaturity-staging" \
+  --role "Contributor" \
+  --scopes "/subscriptions/{subscription-id}"
+
+# Add User Access Administrator role for managed identity assignments
+az role assignment create \
+  --assignee {service-principal-id} \
+  --role "User Access Administrator" \
+  --scope "/subscriptions/{subscription-id}"
+```
+
+## Troubleshooting
+
+### Provider Registration Issues
+
+**Problem**: Provider registration times out or fails
+
+**Solutions**:
+1. **Check Permissions**: Ensure you have `Contributor` or `Owner` role
+2. **Verify Subscription**: Confirm subscription is active and not disabled
+3. **Regional Issues**: Try a different Azure region if registration consistently fails
+4. **Service Health**: Check [Azure Service Health](https://status.azure.com/) for known issues
+5. **Increase Timeout**: Set `MAX_WAIT=900` for slower regions
+
+**Example**:
+```bash
+# Increase timeout for slow regions
+export MAX_WAIT=900
+./scripts/azure/providers_ensure.sh
+```
+
+### Common Error Messages
+
+#### "Failed to get subscription information"
+- **Cause**: Azure CLI not authenticated or no active subscription
+- **Solution**: Run `az login` and `az account set --subscription {id}`
+
+#### "Failed to create resource group"
+- **Cause**: Insufficient permissions or invalid location
+- **Solution**: Verify `Contributor` role and valid Azure region name
+
+#### "Provider registration timed out"
+- **Cause**: Provider registration can take 10-15 minutes in some regions
+- **Solution**: Wait and re-run, or increase `MAX_WAIT` value
+
+## Next Steps
+
+After successful provider registration:
+
+1. **Configure Terraform Variables**: Set up `terraform.tfvars` with your environment values
+2. **Initialize Terraform**: Run `terraform init` in the `/infra` directory  
+3. **Plan Deployment**: Run `terraform plan` to review changes
+4. **Deploy Infrastructure**: Run `terraform apply` to create resources
+5. **Configure Applications**: Deploy and configure the API and web applications
+
+## Security Considerations
+
+- **Never commit secrets** to version control
+- **Use managed identities** for service-to-service authentication
+- **Enable audit logging** for all resource changes
+- **Apply least privilege** principles for all role assignments
+- **Regular access reviews** for service principals and user accounts
+
+For additional security guidance, see [SECURITY.md](./SECURITY.md).
\ No newline at end of file
diff --git a/scripts/azure/providers_ensure.sh b/scripts/azure/providers_ensure.sh
new file mode 100755
index 0000000000000000000000000000000000000000..2d47bd0a732453f9b0496acdeeee767e887c2d3d
--- /dev/null
+++ b/scripts/azure/providers_ensure.sh
@@ -0,0 +1,289 @@
+#!/bin/bash
+
+# Azure Providers Ensure Script
+# Ensures resource group exists and registers required Azure providers
+# Idempotent and bounded with proper error handling
+
+set -euo pipefail
+
+# Configuration
+MAX_WAIT=${MAX_WAIT:-480}  # Maximum wait time in seconds (8 minutes)
+REQUIRED_PROVIDERS=(
+    "Microsoft.OperationalInsights"
+    "Microsoft.Insights"
+)
+
+# Colors for output
+RED='\033[0;31m'
+GREEN='\033[0;32m'
+YELLOW='\033[1;33m'
+BLUE='\033[0;34m'
+NC='\033[0m' # No Color
+
+# Logging functions
+log_info() {
+    echo -e "${BLUE}[INFO]${NC} $1" >&2
+}
+
+log_success() {
+    echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
+}
+
+log_warning() {
+    echo -e "${YELLOW}[WARNING]${NC} $1" >&2
+}
+
+log_error() {
+    echo -e "${RED}[ERROR]${NC} $1" >&2
+}
+
+# Check if Azure CLI is installed and authenticated
+check_azure_cli() {
+    if ! command -v az &> /dev/null; then
+        log_error "Azure CLI is not installed. Please install it first."
+        log_error "Visit: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
+        exit 1
+    fi
+
+    if ! az account show &> /dev/null; then
+        log_error "Azure CLI is not authenticated. Please run 'az login' first."
+        exit 1
+    fi
+}
+
+# Get current subscription info
+get_subscription_info() {
+    local sub_info
+    sub_info=$(az account show --query '{id:id,name:name,tenantId:tenantId}' -o json 2>/dev/null)
+    
+    if [[ $? -ne 0 ]]; then
+        log_error "Failed to get subscription information"
+        exit 1
+    fi
+    
+    echo "$sub_info"
+}
+
+# Print subscription details
+print_subscription_info() {
+    local sub_info="$1"
+    local sub_id sub_name tenant_id
+    
+    sub_id=$(echo "$sub_info" | jq -r '.id')
+    sub_name=$(echo "$sub_info" | jq -r '.name')
+    tenant_id=$(echo "$sub_info" | jq -r '.tenantId')
+    
+    log_info "Subscription ID: $sub_id"
+    log_info "Subscription Name: $sub_name"
+    log_info "Tenant ID: $tenant_id"
+}
+
+# Ensure resource group exists
+ensure_resource_group() {
+    local rg_name="$1"
+    local location="$2"
+    
+    log_info "Checking resource group: $rg_name"
+    
+    if az group show --name "$rg_name" &> /dev/null; then
+        log_success "Resource group '$rg_name' already exists"
+        return 0
+    fi
+    
+    log_info "Creating resource group: $rg_name in $location"
+    
+    if az group create --name "$rg_name" --location "$location" &> /dev/null; then
+        log_success "Resource group '$rg_name' created successfully"
+    else
+        log_error "Failed to create resource group '$rg_name'"
+        log_error "Check if you have Contributor permissions on the subscription"
+        exit 1
+    fi
+}
+
+# Check provider registration status
+check_provider_status() {
+    local provider="$1"
+    local status
+    
+    status=$(az provider show --namespace "$provider" --query 'registrationState' -o tsv 2>/dev/null)
+    echo "$status"
+}
+
+# Register a provider
+register_provider() {
+    local provider="$1"
+    
+    log_info "Registering provider: $provider"
+    
+    if az provider register --namespace "$provider" &> /dev/null; then
+        log_info "Provider registration initiated: $provider"
+        return 0
+    else
+        log_error "Failed to register provider: $provider"
+        return 1
+    fi
+}
+
+# Wait for provider registration with timeout
+wait_for_provider_registration() {
+    local provider="$1"
+    local start_time end_time elapsed
+    
+    start_time=$(date +%s)
+    end_time=$((start_time + MAX_WAIT))
+    
+    log_info "Waiting for $provider registration (max ${MAX_WAIT}s)..."
+    
+    while true; do
+        local status
+        status=$(check_provider_status "$provider")
+        
+        case "$status" in
+            "Registered")
+                log_success "Provider $provider is registered"
+                return 0
+                ;;
+            "Registering")
+                elapsed=$(($(date +%s) - start_time))
+                if [[ $elapsed -ge $MAX_WAIT ]]; then
+                    log_error "Timeout waiting for $provider registration (${MAX_WAIT}s)"
+                    return 2
+                fi
+                log_info "Provider $provider is still registering... (${elapsed}s elapsed)"
+                sleep 10
+                ;;
+            "NotRegistered")
+                log_warning "Provider $provider registration failed, retrying..."
+                if ! register_provider "$provider"; then
+                    return 1
+                fi
+                sleep 5
+                ;;
+            *)
+                log_error "Unknown provider status: $status"
+                return 1
+                ;;
+        esac
+    done
+}
+
+# Ensure all required providers are registered
+ensure_providers() {
+    local failed_providers=()
+    local timeout_providers=()
+    
+    for provider in "${REQUIRED_PROVIDERS[@]}"; do
+        local status
+        status=$(check_provider_status "$provider")
+        
+        log_info "Provider $provider status: $status"
+        
+        case "$status" in
+            "Registered")
+                log_success "Provider $provider is already registered"
+                ;;
+            "Registering")
+                if ! wait_for_provider_registration "$provider"; then
+                    case $? in
+                        2) timeout_providers+=("$provider") ;;
+                        *) failed_providers+=("$provider") ;;
+                    esac
+                fi
+                ;;
+            "NotRegistered")
+                if register_provider "$provider"; then
+                    if ! wait_for_provider_registration "$provider"; then
+                        case $? in
+                            2) timeout_providers+=("$provider") ;;
+                            *) failed_providers+=("$provider") ;;
+                        esac
+                    fi
+                else
+                    failed_providers+=("$provider")
+                fi
+                ;;
+            *)
+                log_error "Unknown status '$status' for provider $provider"
+                failed_providers+=("$provider")
+                ;;
+        esac
+    done
+    
+    # Handle failures and timeouts
+    if [[ ${#timeout_providers[@]} -gt 0 ]]; then
+        log_error "Provider registration timed out for: ${timeout_providers[*]}"
+        log_error ""
+        log_error "REMEDIATION TIPS:"
+        log_error "1. Provider registration can take 10-15 minutes in some regions"
+        log_error "2. Check Azure Service Health for any ongoing issues"
+        log_error "3. Verify you have Owner or Contributor role on the subscription"
+        log_error "4. Re-run this script later or increase MAX_WAIT environment variable"
+        log_error "5. Check provider status manually: az provider show --namespace <provider>"
+        return 2
+    fi
+    
+    if [[ ${#failed_providers[@]} -gt 0 ]]; then
+        log_error "Failed to register providers: ${failed_providers[*]}"
+        log_error ""
+        log_error "REMEDIATION TIPS:"
+        log_error "1. Check if you have sufficient permissions (Owner or Contributor role)"
+        log_error "2. Verify subscription is active and not disabled"
+        log_error "3. Contact Azure support if the issue persists"
+        log_error "4. Check Azure Service Health for provider-specific issues"
+        return 1
+    fi
+    
+    log_success "All required providers are registered successfully"
+    return 0
+}
+
+# Main function
+main() {
+    local resource_group_name="${AZURE_RESOURCE_GROUP:-}"
+    local location="${AZURE_LOCATION:-East US}"
+    
+    log_info "Azure Providers Ensure Script Starting..."
+    log_info "Max wait time: ${MAX_WAIT}s"
+    
+    # Check prerequisites
+    check_azure_cli
+    
+    # Get and display subscription info
+    local sub_info
+    sub_info=$(get_subscription_info)
+    print_subscription_info "$sub_info"
+    
+    # Ensure resource group if specified
+    if [[ -n "$resource_group_name" ]]; then
+        ensure_resource_group "$resource_group_name" "$location"
+    else
+        log_info "AZURE_RESOURCE_GROUP not set, skipping resource group creation"
+    fi
+    
+    # Ensure providers are registered
+    log_info "Ensuring required Azure providers are registered..."
+    if ensure_providers; then
+        log_success "All operations completed successfully!"
+        exit 0
+    else
+        case $? in
+            2)
+                log_error "Script exited due to timeout"
+                exit 2
+                ;;
+            *)
+                log_error "Script exited due to errors"
+                exit 1
+                ;;
+        esac
+    fi
+}
+
+# Handle script interruption
+trap 'log_error "Script interrupted by user"; exit 130' INT TERM
+
+# Run main function if script is executed directly
+if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
+    main "$@"
+fi
\ No newline at end of file
