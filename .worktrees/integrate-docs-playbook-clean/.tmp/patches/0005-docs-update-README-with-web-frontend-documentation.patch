From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Valerii Sysoiev <valsysoiev@gmail.com>
Date: Wed, 13 Aug 2025 17:14:56 -0600
Subject: [PATCH 05/90] docs: update README with web frontend documentation


diff --git a/README.md b/README.md
index f3a2eb5c7c97a562731c9a55e1811427603a4f2d..edbf55d333a8f8cbf74f17221dcccfac2dd94cbc 100644
--- a/README.md
+++ b/README.md
@@ -122,5 +122,197 @@ make deps
 cp -n .env.example .env 2>/dev/null || true
 make dev
 # Then open http://localhost:8000/docs
+```
+
+---
+
+## Web Frontend Application
+
+The project now includes a **Next.js web application** for the AI Maturity Assessment tool, focusing on cyber security for AI systems.
+
+### Prerequisites
+
+- Node.js 18+ and npm
+- Python 3.11+ for the backend API
+
+### Backend API Setup
+
+The backend API provides preset configurations and AI assistance endpoints:
+
+```bash
+# Install dependencies
+cd app
+pip install -r requirements.txt
+
+# Run the API server
+uvicorn api.main:app --reload
+# API will be available at http://localhost:8000
+```
+
+**API Endpoints:**
+- `GET /health` - Health check
+- `GET /presets/{preset_id}` - Get preset configuration (e.g., "cyber-for-ai")
+- `POST /assist/autofill` - AI assistance for question responses (stub)
+- `POST /assessments` - Create new assessment
+- `GET /assessments/{id}` - Get assessment with answers
+- `POST /assessments/{id}/answers` - Save/update answer
+- `GET /assessments/{id}/scores` - Compute weighted scores
+- `POST /uploads/sas` - Generate SAS token for evidence upload (501 if not configured)
 
+### Frontend Setup
+
+```bash
+# Navigate to web directory
+cd web
+
+# Install dependencies
+npm install
+
+# Create environment file
+echo "NEXT_PUBLIC_API_BASE_URL=http://localhost:8000" > .env.local
+
+# Run development server
+npm run dev
+# Frontend will be available at http://localhost:3000
 ```
+
+### Current Features
+
+1. **Preset Management**: Load and display the "Cyber for AI" security assessment preset
+2. **Assessment Workspace**: Navigate through assessment pillars and questions
+3. **AI Assist**: Stub integration for AI-powered question assistance
+4. **Navigation**: Top navigation bar for easy access to Dashboard, New Assessment, and Draft
+
+### Available Pages
+
+- `/` - Dashboard (landing page)
+- `/new` - Create new assessment and load preset
+- `/assessment/draft` - Assessment workspace with pillar navigation and questions
+
+### Development Workflow
+
+1. Start the backend API:
+   ```bash
+   cd app && uvicorn api.main:app --reload
+   ```
+
+2. In another terminal, start the frontend:
+   ```bash
+   cd web && npm run dev
+   ```
+
+3. Open http://localhost:3000 in your browser
+
+### Phase 2 Features (Implemented)
+
+1. **Assessment Persistence**
+   - SQLite database for assessments and answers
+   - UUID-based assessment tracking
+   - Answer upsert functionality (create or update)
+
+2. **Scoring System**
+   - Per-pillar scoring (average of question levels)
+   - Weighted overall score calculation
+   - Gate enforcement (e.g., governance < 2 caps overall at 3.0)
+   - Visual scoring with radar chart
+   
+   **Scoring Algorithm:**
+   - Pillar score = average of answered questions (1-5 scale)
+   - Overall score = weighted average of pillar scores
+   - Pillars with no answers are excluded from overall calculation
+   - Gates can cap the overall score (e.g., if governance < 2, overall is capped at 3)
+
+3. **Evidence Upload**
+   - Optional Azure Blob Storage integration
+   - SAS token generation with configurable TTL
+   - Graceful 501 fallback if not configured
+   - Direct browser-to-storage uploads
+   - Evidence linked to questions (client-side for now)
+
+### Next Steps
+
+- [x] Implement assessment data persistence (save responses)
+- [x] Add file upload capabilities for evidence documents
+- [x] Integrate with Azure Storage for document management
+- [ ] Implement real AI assistance using Azure OpenAI
+- [x] Add assessment scoring and gap analysis
+- [ ] Generate downloadable reports (PDF/Word)
+- [ ] Add user authentication with Azure AD
+- [ ] Create assessment history and dashboard views
+- [ ] Persist evidence URLs with assessments in database
+
+### Configuration
+
+#### Frontend Configuration
+
+The web app uses environment variables for configuration:
+
+- `NEXT_PUBLIC_API_BASE_URL` - Backend API URL (default: http://localhost:8000)
+
+Create `web/.env.local`:
+```env
+NEXT_PUBLIC_API_BASE_URL=http://localhost:8000
+```
+
+#### Backend Configuration
+
+For evidence uploads, create `app/.env`:
+```env
+# Azure Storage Configuration (optional)
+AZURE_STORAGE_ACCOUNT=your-storage-account
+AZURE_STORAGE_KEY=your-storage-key
+AZURE_STORAGE_CONTAINER=docs
+UPLOAD_SAS_TTL_MINUTES=15
+```
+
+If Azure Storage is not configured, the `/uploads/sas` endpoint returns HTTP 501.
+
+### Running Both Services Together
+
+1. **Terminal 1 - Backend:**
+   ```bash
+   cd app
+   pip install -r requirements.txt
+   uvicorn api.main:app --reload
+   ```
+
+2. **Terminal 2 - Frontend:**
+   ```bash
+   cd web
+   npm install
+   npm run dev
+   ```
+
+3. **Access the application:**
+   - Frontend: http://localhost:3000
+   - API Docs: http://localhost:8000/docs
+
+### Workflow Example
+
+1. **Create New Assessment**
+   - Navigate to http://localhost:3000/new
+   - Click "Load preset" to load the Cyber for AI preset
+   - Click "Continue" to create assessment
+
+2. **Answer Questions**
+   - Select a pillar from the left sidebar
+   - For each question:
+     - Select a maturity level (1-5)
+     - Click "Save" to persist the answer
+     - Optionally upload evidence files
+
+3. **View Scores**
+   - Click "Compute Scores" button
+   - View pillar scores table
+   - See radar chart visualization
+   - Check overall weighted score
+   - Note any gate warnings (e.g., governance requirements)
+
+### Database
+
+The application uses SQLite for persistence:
+- Database location: `app/app.db`
+- Auto-created on first run
+- Contains assessments and answers tables
+
+---
