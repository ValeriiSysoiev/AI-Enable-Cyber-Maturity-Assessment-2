From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Valerii Sysoiev <valsysoiev@gmail.com>
Date: Mon, 18 Aug 2025 07:44:28 -0600
Subject: [PATCH 65/90] docs: Add evidence ingestion ADR, security policies,
 and operational procedures
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- Add ADR-003 documenting evidence ingestion architecture decisions
  - SAS token TTL strategy (15 minutes max)
  - File size caps (50MB documents, 10MB images, 5MB text)
  - MIME type allow-list for security
  - Checksum verification and PII scanning approach
  - Storage isolation with engagement-scoped paths

- Update SECURITY.md with evidence upload security policies
  - Write-only SAS token configuration
  - Allowed file types and validation rules
  - Maximum file size enforcement
  - Secret management best practices

- Enhance README.md with operational procedures
  - Azurite local development setup
  - Verify Live environment health checks
  - Staging deployment quickstart guide

Total changes: 289 LOC (under 300 limit)

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

diff --git a/README.md b/README.md
index 436c2684f201c84403bf8e2d8954278599ace559..8242c845b36b8b3818b9956dde9d09e1fadb9df7 100644
--- a/README.md
+++ b/README.md
@@ -294,6 +294,28 @@ UPLOAD_SAS_TTL_MINUTES=15
 
 If Azure Storage is not configured, the `/uploads/sas` endpoint returns HTTP 501.
 
+### Local Development with Azurite
+
+For local evidence upload testing without Azure Storage:
+
+1. **Install and start Azurite:**
+   ```bash
+   npm install -g azurite
+   azurite --silent --location ./azurite-data --blobPort 10000
+   ```
+
+2. **Configure local storage in `app/.env`:**
+   ```env
+   AZURE_STORAGE_CONNECTION_STRING="DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1"
+   AZURE_STORAGE_CONTAINER=evidence
+   UPLOAD_SAS_TTL_MINUTES=15
+   ```
+
+3. **Create container:**
+   ```bash
+   az storage container create --name evidence --connection-string "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1"
+   ```
+
 ### Running Both Services Together
 
 1. **Terminal 1 - Backend:**
@@ -310,9 +332,15 @@ If Azure Storage is not configured, the `/uploads/sas` endpoint returns HTTP 501
    npm run dev
    ```
 
-3. **Access the application:**
+3. **Terminal 3 - Azurite (optional for uploads):**
+   ```bash
+   azurite --silent --location ./azurite-data
+   ```
+
+4. **Access the application:**
    - Frontend: http://localhost:3000
    - API Docs: http://localhost:8000/docs
+   - Azurite Explorer: Use Azure Storage Explorer to view local blobs
 
 ### Workflow Example
 
@@ -408,6 +436,85 @@ After these steps, the Container Apps will use their Managed Identities to pull
 
 ---
 
+## Verify Live Environment
+
+After deployment, verify the environment health and configuration:
+
+```bash
+# Run comprehensive verification
+scripts/verify_live.sh
+
+# Check specific components
+scripts/verify_live.sh --api-only
+scripts/verify_live.sh --web-only
+scripts/verify_live.sh --storage-only
+```
+
+**Verification Checks:**
+- ✅ API health and authentication
+- ✅ Web application accessibility
+- ✅ Storage SAS token generation
+- ✅ Database connectivity
+- ✅ CORS configuration
+- ✅ Security headers
+
+**Common Issues:**
+- **SAS 501:** Storage not configured - check Azure Storage connection
+- **CORS errors:** Verify allowed origins in Container App settings
+- **Auth failures:** Ensure JWT configuration matches between services
+
+---
+
+## Staging Deployment Quickstart
+
+Deploy to a staging environment for testing:
+
+1. **Prerequisites:**
+   ```bash
+   # Set staging environment
+   export ENVIRONMENT=staging
+   export RESOURCE_GROUP=rg-aaa-staging
+   export ACR_NAME=acraaastaging
+   ```
+
+2. **Deploy infrastructure:**
+   ```bash
+   # Create resource group
+   az group create -n $RESOURCE_GROUP -l eastus2
+   
+   # Deploy with staging configuration
+   scripts/deploy_mvp.sh --env staging
+   ```
+
+3. **Configure secrets:**
+   ```bash
+   # Set required secrets
+   az keyvault secret set --vault-name kv-aaa-staging \
+     --name storage-key --value "$(az storage account keys list \
+     -n staaastaging --query '[0].value' -o tsv)"
+   ```
+
+4. **Deploy applications:**
+   ```bash
+   # Build and deploy
+   scripts/build_acr_tasks.sh
+   scripts/deploy_containerapps.sh
+   ```
+
+5. **Verify deployment:**
+   ```bash
+   scripts/verify_live.sh --env staging
+   ```
+
+**Staging Features:**
+- Isolated resource group
+- Separate storage account
+- Independent Key Vault
+- Test data isolation
+- Lower SKU tiers for cost optimization
+
+---
+
 ## Build & Deploy via ACR Tasks (no Docker Desktop)
 
 This section describes how to build container images using Azure Container Registry (ACR) Tasks, eliminating the need for Docker Desktop.
diff --git a/docs/ADR-003-evidence-ingest.md b/docs/ADR-003-evidence-ingest.md
new file mode 100644
index 0000000000000000000000000000000000000000..12519ebfed291bafb32c5dd5d583315f5430a506
--- /dev/null
+++ b/docs/ADR-003-evidence-ingest.md
@@ -0,0 +1,101 @@
+# ADR-003: Evidence Ingestion Architecture
+
+**Status:** ✅ Implemented  
+**Date:** 2025-08-18  
+**Sprint:** Phase 3  
+
+## Context
+
+The assessment platform requires secure evidence upload capabilities to support maturity evaluations. Evidence files must be handled with appropriate security controls while maintaining usability and performance.
+
+## Decision
+
+We implement a write-only SAS token architecture with client-direct uploads to Azure Blob Storage, bypassing the API for file transfers while maintaining security controls.
+
+### Architecture Components
+
+#### 1. **SAS Token Generation**
+- **TTL:** 15 minutes maximum lifetime
+- **Permissions:** Write-only (wca: write, create, add)
+- **Scope:** Container-level with unique blob paths
+- **Validation:** Server-side token generation with audit logging
+
+#### 2. **File Size Caps**
+- **Maximum Size:** 50MB per file
+- **Enforcement:** Client-side validation + Azure Storage limits
+- **Rationale:** Prevents storage abuse and DoS attacks
+- **Monitoring:** Track upload patterns for anomaly detection
+
+#### 3. **MIME Type Allow-list**
+- **Allowed Types:**
+  - Documents: `application/pdf`, `application/vnd.openxmlformats-officedocument.*`
+  - Images: `image/jpeg`, `image/png`, `image/gif`
+  - Text: `text/plain`, `text/csv`
+- **Validation:** Client-side pre-flight + server-side verification
+- **Rejection:** Non-allowed types blocked at SAS generation
+
+#### 4. **Checksum & PII Controls**
+- **Checksum:** MD5 validation for integrity verification
+- **PII Scanning:** Deferred to Phase 4 (pattern matching implementation)
+- **Encryption:** Azure Storage encryption-at-rest enabled
+- **Access Logs:** Blob access tracking for compliance
+
+#### 5. **Storage Isolation**
+- **Container Strategy:** Separate containers per environment
+- **Path Structure:** `/evidence/{engagement_id}/{assessment_id}/{file_id}`
+- **Access Control:** Managed Identity with least-privilege RBAC
+- **Retention:** 90-day automatic deletion policy
+
+## Implementation Details
+
+### Upload Flow
+
+```mermaid
+sequenceDiagram
+    participant Client
+    participant API
+    participant Storage
+    
+    Client->>API: Request SAS token
+    API->>API: Validate file metadata
+    API->>API: Generate write-only SAS
+    API->>Client: Return SAS URL (15min TTL)
+    Client->>Storage: Direct upload with SAS
+    Storage->>Client: Upload confirmation
+    Client->>API: Register evidence metadata
+```
+
+### Security Controls
+
+| Control | Implementation | Risk Mitigation |
+|---------|---------------|-----------------|
+| **Short TTL** | 15-minute expiry | Limits exposure window |
+| **Write-Only** | No read/list/delete | Prevents data exfiltration |
+| **Size Limits** | 50MB cap | DoS protection |
+| **Type Filtering** | MIME allow-list | Malware prevention |
+| **Path Isolation** | Unique blob paths | Cross-tenant protection |
+
+## Consequences
+
+### Positive
+✅ **Performance:** Direct client uploads reduce API load  
+✅ **Security:** Write-only tokens prevent data leaks  
+✅ **Scalability:** Azure Storage handles concurrent uploads  
+✅ **Auditability:** Comprehensive logging of all operations  
+
+### Negative
+⚠️ **Complexity:** Client-side upload orchestration required  
+⚠️ **Cost:** Storage costs scale with usage  
+⚠️ **PII Risk:** Manual review needed until scanning implemented  
+
+## Alternatives Considered
+
+1. **API Proxy Upload:** Rejected due to performance and memory constraints
+2. **Permanent SAS Tokens:** Rejected due to security exposure risk
+3. **Public Container:** Rejected due to data confidentiality requirements
+
+## References
+
+- [Azure SAS Best Practices](https://docs.microsoft.com/azure/storage/common/storage-sas-overview)
+- [Security Implementation](./SECURITY.md#evidence-upload-security)
+- [Storage Configuration](../app/storage/blob_store.py)
\ No newline at end of file
diff --git a/docs/SECURITY.md b/docs/SECURITY.md
index 93ebe3d22f5d430bb678d95439eddc846bc3dee7..6e5a91082453e9c151b2c4a69b947c2975cfbf8f 100644
--- a/docs/SECURITY.md
+++ b/docs/SECURITY.md
@@ -314,6 +314,84 @@ test('insufficient permissions shows 403', async ({ page }) => {
 **Vulnerability Disclosure:** Follow responsible disclosure process  
 **Emergency Contact:** Escalate to team leads for critical issues
 
+## Evidence Upload Security
+
+### SAS Token Policy
+
+**Implementation:** Write-only Shared Access Signatures  
+**Location:** `/app/api/routes/sas_upload.py`
+
+**Security Configuration:**
+```python
+# SAS Token Generation
+permissions = BlobSasPermissions(
+    write=True,     # Allow write
+    create=True,    # Allow create
+    add=True,       # Allow append
+    read=False,     # DENY read
+    delete=False,   # DENY delete
+    list=False      # DENY list
+)
+```
+
+**Security Controls:**
+- ✅ **Write-Only Access:** No read, delete, or list permissions
+- ✅ **Short TTL:** 15-minute maximum token lifetime
+- ✅ **Unique Paths:** Engagement-scoped blob paths prevent cross-tenant access
+- ✅ **Audit Logging:** All SAS generation logged with correlation IDs
+
+### File Type Restrictions
+
+**Allowed MIME Types:**
+```python
+ALLOWED_MIME_TYPES = [
+    # Documents
+    'application/pdf',
+    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
+    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
+    'application/vnd.openxmlformats-officedocument.presentationml.presentation',
+    # Images
+    'image/jpeg',
+    'image/png',
+    'image/gif',
+    # Text
+    'text/plain',
+    'text/csv'
+]
+```
+
+**Validation Requirements:**
+- ✅ Client-side MIME type validation before upload
+- ✅ Server-side validation during SAS token request
+- ✅ Azure Storage content-type header enforcement
+- ✅ Rejection of executable and script file types
+
+### Upload Size Limits
+
+**Maximum File Sizes:**
+| File Type | Max Size | Rationale |
+|-----------|----------|-----------|
+| Documents | 50MB | Typical evidence documents |
+| Images | 10MB | Screenshots and diagrams |
+| CSV/Text | 5MB | Configuration and log files |
+
+**Enforcement:**
+- ✅ Client-side validation before upload attempt
+- ✅ API validation during SAS token generation
+- ✅ Azure Storage service-level limits
+- ✅ Monitoring alerts for unusual upload patterns
+
+### Secret Management
+
+**Storage Access Keys:**
+- ❌ **NEVER** commit storage keys to repository
+- ❌ **NEVER** log SAS tokens or connection strings
+- ❌ **NEVER** expose keys in error messages
+- ✅ Use Azure Key Vault for production secrets
+- ✅ Use Managed Identity where possible
+- ✅ Rotate storage keys quarterly
+- ✅ Monitor key usage for anomalies
+
 ## Compliance
 
 **Frameworks Supported:**
@@ -330,4 +408,4 @@ test('insufficient permissions shows 403', async ({ page }) => {
 
 ---
 
-**Note:** This security implementation represents Sprint S1 baseline security. Additional security controls will be implemented in subsequent sprints based on production requirements and compliance needs.
\ No newline at end of file
+**Note:** This security implementation represents Sprint S1 baseline security with Phase 3 evidence upload enhancements. Additional security controls will be implemented in subsequent sprints based on production requirements and compliance needs.
\ No newline at end of file
