From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Valerii Sysoiev <valsysoiev@gmail.com>
Date: Sun, 17 Aug 2025 00:02:43 -0600
Subject: [PATCH 32/90] Fix Next.js application connectivity issues in E2E
 tests
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

🔧 Application Startup Fixes:
- Use 'npx next start -H 0.0.0.0' to bind to all interfaces (not just localhost)
- Add comprehensive health check with multiple connection methods
- Try both localhost and 127.0.0.1 endpoints
- Check if port 3000 is listening using netstat
- Capture application logs for debugging

🔍 Enhanced Debugging:
- Log application output to app.log for troubleshooting
- Show process status, network status, and application logs on failure
- Add verbose curl output for connection debugging
- Reduce retry attempts from 30 to 20 (40 seconds total)

Resolves issue where Next.js reports 'Ready' but curl cannot connect to the application.

diff --git a/.github/workflows/e2e.yml b/.github/workflows/e2e.yml
index 193a07032060d47c18c995262097ed40d97a79b1..3afbeaf47daa946ff74ab117839cfd10bf1a0e5d 100644
--- a/.github/workflows/e2e.yml
+++ b/.github/workflows/e2e.yml
@@ -98,23 +98,47 @@ jobs:
         cd web
         if [ "${{ vars.WEB_BASE_URL }}" = "" ]; then
           echo "Starting local application for testing..."
-          npm start &
+          
+          # Start the application and capture output (bind to all interfaces)
+          npx next start -H 0.0.0.0 -p 3000 > app.log 2>&1 &
           APP_PID=$!
           echo "Application started with PID: $APP_PID"
           
+          # Give the application a moment to initialize
+          sleep 3
+          
           # Wait for application to be ready with better error handling
           echo "Waiting for application to be ready..."
-          for i in {1..30}; do
-            if curl -f -s http://localhost:3000 >/dev/null 2>&1; then
-              echo "✅ Application is ready after ${i} attempts"
+          for i in {1..20}; do
+            # Try multiple connection methods
+            if curl -f -s --connect-timeout 5 --max-time 10 http://localhost:3000 >/dev/null 2>&1; then
+              echo "✅ Application is ready after ${i} attempts (curl success)"
+              break
+            elif curl -f -s --connect-timeout 5 --max-time 10 http://127.0.0.1:3000 >/dev/null 2>&1; then
+              echo "✅ Application is ready after ${i} attempts (127.0.0.1 success)"
+              break
+            elif netstat -tln | grep -q ":3000 "; then
+              echo "✅ Application is ready after ${i} attempts (port 3000 is listening)"
               break
-            elif [ $i -eq 30 ]; then
-              echo "❌ Application failed to start after 60 seconds"
-              echo "Checking application logs..."
-              ps aux | grep node || true
+            elif [ $i -eq 20 ]; then
+              echo "❌ Application failed to start after 40 seconds"
+              echo ""
+              echo "=== Debugging Information ==="
+              echo "Process status:"
+              ps aux | grep -E "(node|next)" | grep -v grep || echo "No node processes found"
+              echo ""
+              echo "Network status:"
+              netstat -tln | grep -E "(3000|LISTEN)" || echo "No listening ports found"
+              echo ""
+              echo "Application logs (last 20 lines):"
+              tail -20 app.log 2>/dev/null || echo "No application logs found"
+              echo ""
+              echo "Curl test results:"
+              curl -v http://localhost:3000 2>&1 | head -10 || echo "Curl failed"
+              echo "=========================="
               exit 1
             else
-              echo "Attempt $i/30: Application not ready yet, waiting 2 seconds..."
+              echo "Attempt $i/20: Application not ready yet, waiting 2 seconds..."
               sleep 2
             fi
           done
