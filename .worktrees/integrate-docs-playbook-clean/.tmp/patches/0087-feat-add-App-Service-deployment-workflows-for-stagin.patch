From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Valerii Sysoiev <valsysoiev@gmail.com>
Date: Mon, 18 Aug 2025 18:45:32 -0600
Subject: [PATCH 87/90] feat: add App Service deployment workflows for staging
 and production

- staging: deploys on main branch push + manual trigger
- production: deploys on v*.*.* tags + manual trigger
- uses Next.js standalone output mode
- bounded verification with timeouts
- Azure OIDC authentication

diff --git a/.github/workflows/deploy_production.yml b/.github/workflows/deploy_production.yml
index 82b0d6f9c6fce1d90805537041cb9f6f1b84636f..ed188f243684ab7e996fa8a0a7df233d3e2d80d5 100644
--- a/.github/workflows/deploy_production.yml
+++ b/.github/workflows/deploy_production.yml
@@ -11,371 +11,103 @@ on:
         required: false
         default: 'main'
 
-# OIDC permissions for Azure authentication
 permissions:
   id-token: write
   contents: read
 
-# Prevent multiple production deployments
 concurrency:
   group: production-deployment
   cancel-in-progress: false
 
 env:
-  AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP_PRODUCTION }}
-  WEB_APP_NAME: ${{ vars.WEB_APP_PRODUCTION }}
-  API_CONTAINER_APP: ${{ vars.API_CONTAINER_APP_PRODUCTION }}
-  AZURE_CONTAINER_REGISTRY: ${{ vars.AZURE_CONTAINER_REGISTRY_PRODUCTION }}
+  AZURE_RESOURCE_GROUP: rg-cybermat-prd
+  WEB_APP_NAME: web-cybermat-prd
 
 jobs:
   deploy-production:
     runs-on: ubuntu-latest
-    timeout-minutes: 45
+    timeout-minutes: 25
     environment: production
     
     steps:
     - name: Checkout code
       uses: actions/checkout@v4
-      timeout-minutes: 5
+      timeout-minutes: 3
       with:
         ref: ${{ github.event.inputs.ref || github.ref }}
 
-    - name: Validate production environment variables
-      timeout-minutes: 2
-      run: |
-        echo "Validating production deployment environment..."
-        
-        missing_vars=()
-        
-        if [ -z "${{ env.AZURE_RESOURCE_GROUP }}" ]; then
-          missing_vars+=("AZURE_RESOURCE_GROUP_PRODUCTION")
-        fi
-        
-        if [ -z "${{ env.WEB_APP_NAME }}" ]; then
-          missing_vars+=("WEB_APP_PRODUCTION")
-        fi
-        
-        # API deployment is optional - will skip if not configured
-        if [ -z "${{ vars.VERIFY_API_BASE_URL_PROD }}" ]; then
-          echo "‚ÑπÔ∏è VERIFY_API_BASE_URL_PROD not set - API deployment will be SKIPPED"
-        fi
-        
-        if [ ${#missing_vars[@]} -ne 0 ]; then
-          echo "‚ùå Missing required variables for production deployment:"
-          printf '  - %s\n' "${missing_vars[@]}"
-          echo ""
-          echo "Please configure these variables in your GitHub production environment."
-          exit 1
-        fi
-        
-        echo "‚úÖ Production environment validation complete"
-        echo "üåê Web App: ${{ env.WEB_APP_NAME }}"
-        echo "üîó API App: ${{ env.API_CONTAINER_APP }} ($([ -n \"${{ vars.VERIFY_API_BASE_URL_PROD }}\" ] && echo \"enabled\" || echo \"SKIPPED\"))"
+    - name: Setup Node.js
+      uses: actions/setup-node@v4
+      timeout-minutes: 3
+      with:
+        node-version: '20'
+        cache: 'npm'
+        cache-dependency-path: 'web/package-lock.json'
+
+    - name: Install dependencies
+      timeout-minutes: 5
+      working-directory: ./web
+      run: npm ci
+
+    - name: Build Next.js application
+      timeout-minutes: 8
+      working-directory: ./web
+      run: npm run build
 
     - name: Azure OIDC Login
-      id: azure_login
       uses: azure/login@v2
-      continue-on-error: true
-      timeout-minutes: 5
+      timeout-minutes: 3
       with:
         client-id: ${{ vars.AZURE_CLIENT_ID }}
         tenant-id: ${{ vars.AZURE_TENANT_ID }}
         subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
-        
-    - name: Validate Azure authentication
-      timeout-minutes: 2
-      run: |
-        if az account show >/dev/null 2>&1; then
-          echo "azure_auth_success=true" >> $GITHUB_OUTPUT
-          echo "‚úÖ Azure OIDC authentication successful"
-          az account show --query "{subscription:name,tenantId:tenantId}" -o table
-        else
-          echo "‚ùå CRITICAL: Azure OIDC authentication failed for production deployment"
-          echo ""
-          echo "Production deployment requires Azure access. Check:"
-          echo "  - AZURE_CLIENT_ID federated credential is configured correctly"
-          echo "  - Service principal has Contributor permissions"  
-          echo "  - All OIDC variables are correct"
-          exit 1
-        fi
 
-    - name: Record current deployment state for rollback
-      id: record_state
-      if: steps.azure_login.outcome == 'success'
-      timeout-minutes: 3
+    - name: Deploy to Azure App Service
+      timeout-minutes: 10
       run: |
-        echo "Recording current production state for rollback..."
+        cd web
+        # Create deployment package with standalone build
+        zip -r ../web-deployment.zip .next/standalone .next/static public package.json
         
-        # Get current Web App deployment info
-        WEB_CURRENT_VERSION=$(az webapp show \
-          --name ${{ env.WEB_APP_NAME }} \
+        # Deploy to App Service
+        az webapp deploy \
           --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
-          --query "defaultHostName" -o tsv 2>/dev/null || echo "unknown")
-        echo "web_current_version=$WEB_CURRENT_VERSION" >> $GITHUB_OUTPUT
-        echo "Current Web App: $WEB_CURRENT_VERSION"
-        
-        # Record API state if configured
-        if [ -n "${{ vars.VERIFY_API_BASE_URL_PROD }}" ] && [ -n "${{ env.API_CONTAINER_APP }}" ]; then
-          API_CURRENT_REVISION=$(az containerapp revision list \
-            --name ${{ env.API_CONTAINER_APP }} \
-            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
-            --query "[?properties.active].name" \
-            --output tsv | head -1 2>/dev/null || echo "unknown")
-          echo "api_current_revision=$API_CURRENT_REVISION" >> $GITHUB_OUTPUT
-          echo "Current API revision: $API_CURRENT_REVISION"
-        else
-          echo "API deployment skipped - no rollback needed"
-        fi
-
-    - name: Deploy Web App (App Service)
-      id: deploy_web
-      if: steps.azure_login.outcome == 'success'
-      timeout-minutes: 15
-      uses: azure/webapps-deploy@v3
-      with:
-        app-name: ${{ env.WEB_APP_NAME }}
-        package: './web'
-
-    - name: Validate Web App deployment
-      if: steps.deploy_web.outcome != 'skipped'
-      timeout-minutes: 3
-      run: |
-        echo "Validating Web App deployment..."
-        
-        # Check deployment status
-        WEB_STATUS=$(az webapp show \
           --name ${{ env.WEB_APP_NAME }} \
-          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
-          --query "state" -o tsv 2>/dev/null || echo "Unknown")
-        
-        echo "Web App Status: $WEB_STATUS"
-        
-        if [ "$WEB_STATUS" = "Running" ]; then
-          echo "web_deploy_success=true" >> $GITHUB_OUTPUT
-          echo "‚úÖ Web App deployment successful"
-        else
-          echo "web_deploy_success=false" >> $GITHUB_OUTPUT
-          echo "‚ùå Web App deployment failed or not running"
-          exit 1
-        fi
-
-    - name: Deploy API Container App (Optional)
-      id: deploy_api
-      if: steps.azure_login.outcome == 'success' && vars.VERIFY_API_BASE_URL_PROD != '' && vars.DEPLOY_API_PROD != 'false'
-      timeout-minutes: 12
-      run: |
-        echo "API deployment is configured but Container Apps was not provisioned"
-        echo "This step would deploy API if Container Apps environment was available"
-        echo "For now, marking as skipped"
-        echo "api_deploy_success=skipped" >> $GITHUB_OUTPUT
+          --src-path ../web-deployment.zip \
+          --type zip
 
-    - name: Wait for deployment stabilization
-      if: steps.azure_login.outcome == 'success'
-      timeout-minutes: 5
-      run: |
-        echo "Waiting for production deployment to stabilize..."
-        sleep 60
-        
-        # Validate Web App health
-        WEB_STATUS=$(az webapp show \
-          --name ${{ env.WEB_APP_NAME }} \
-          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
-          --query "state" -o tsv 2>/dev/null || echo "Unknown")
-        
-        echo "Final Web App Status: $WEB_STATUS"
-        
-        if [ "$WEB_STATUS" != "Running" ]; then
-          echo "‚ùå Web App not in running state after stabilization"
-          exit 1
-        fi
-        
-        echo "‚úÖ Production deployment stabilized successfully"
-
-    - name: Get production URLs
-      id: get_urls
-      if: steps.azure_login.outcome == 'success'
-      timeout-minutes: 2
-      run: |
-        echo "Retrieving production application URLs..."
-        
-        # Get Web App URL
-        WEB_FQDN=$(az webapp show \
-          --name ${{ env.WEB_APP_NAME }} \
-          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
-          --query "defaultHostName" -o tsv 2>/dev/null || echo "")
-        
-        if [ -n "$WEB_FQDN" ]; then
-          WEB_BASE_URL="https://$WEB_FQDN"
-          echo "web_base_url=$WEB_BASE_URL" >> $GITHUB_OUTPUT
-          echo "‚úÖ Production Web URL: $WEB_BASE_URL"
-        else
-          echo "‚ö†Ô∏è Could not retrieve Web URL"
-          echo "web_base_url=${{ vars.VERIFY_WEB_BASE_URL_PROD }}" >> $GITHUB_OUTPUT
-        fi
-        
-        # API URL handling - use configured URL or mark as unavailable
-        if [ -n "${{ vars.VERIFY_API_BASE_URL_PROD }}" ]; then
-          echo "api_base_url=${{ vars.VERIFY_API_BASE_URL_PROD }}" >> $GITHUB_OUTPUT
-          echo "‚ÑπÔ∏è API URL from configuration: ${{ vars.VERIFY_API_BASE_URL_PROD }}"
-        else
-          echo "api_base_url=" >> $GITHUB_OUTPUT
-          echo "‚ÑπÔ∏è API deployment not configured"
-        fi
-
-    - name: Run production verification
-      id: verify_production
-      if: steps.azure_login.outcome == 'success'
-      timeout-minutes: 12
-      env:
-        WEB_BASE_URL: ${{ steps.get_urls.outputs.web_base_url || vars.VERIFY_WEB_BASE_URL_PROD }}
-        API_BASE_URL: ${{ steps.get_urls.outputs.api_base_url || '' }}
-        AUTH_BEARER: ${{ vars.PRODUCTION_AUTH_BEARER || '' }}
-        DEPLOYMENT_VERIFICATION: true
-        GITHUB_SHA: ${{ github.sha }}
-        DEPLOYMENT_ENVIRONMENT: production
-      run: |
-        echo "üîç Running production deployment verification..."
-        
-        # Make verify script executable
-        chmod +x scripts/verify_live.sh
-        
-        echo "üåê WEB URL: $WEB_BASE_URL"
-        if [ -n "$API_BASE_URL" ]; then
-          echo "üîó API URL: $API_BASE_URL"
-        else
-          echo "‚è≠Ô∏è API URL: Not configured (will be skipped in verification)"
-        fi
-        
-        # Run verification with production context
-        if ./scripts/verify_live.sh 2>&1 | tee production-verification.log; then
-          echo "verification_success=true" >> $GITHUB_OUTPUT
-          echo "‚úÖ Production deployment verification PASSED"
-        else
-          echo "verification_success=false" >> $GITHUB_OUTPUT
-          echo "‚ùå Production deployment verification FAILED"
-          
-          # Show verification output in job summary
-          echo "## Production Deployment Verification Failed" >> $GITHUB_STEP_SUMMARY
-          echo "```" >> $GITHUB_STEP_SUMMARY
-          tail -50 production-verification.log >> $GITHUB_STEP_SUMMARY
-          echo "```" >> $GITHUB_STEP_SUMMARY
-          
-          exit 1
-        fi
-
-    - name: Rollback on deployment failure
-      if: failure() && steps.azure_login.outcome == 'success'
+    - name: Verify deployment
       timeout-minutes: 8
       run: |
-        echo "üîÑ Production deployment failed - attempting rollback..."
-        
-        ROLLBACK_NEEDED=false
-        
-        # Web App rollback (if deployment was attempted)
-        if [ "${{ steps.deploy_web.outcome }}" != "skipped" ] && [ -n "${{ steps.record_state.outputs.web_current_version }}" ]; then
-          echo "Rolling back Web App to previous state..."
-          # Note: For App Service, we would typically redeploy previous version
-          # This is a placeholder for the rollback logic
-          echo "‚ö†Ô∏è Web App rollback requires manual intervention or slot swap"
-          ROLLBACK_NEEDED=true
-        fi
-        
-        # API rollback (if applicable)
-        if [ "${{ steps.deploy_api.outputs.api_deploy_success }}" = "true" ] && [ -n "${{ steps.record_state.outputs.api_current_revision }}" ]; then
-          echo "Rolling back API to revision: ${{ steps.record_state.outputs.api_current_revision }}"
-          az containerapp revision activate \
-            --name ${{ env.API_CONTAINER_APP }} \
-            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
-            --revision ${{ steps.record_state.outputs.api_current_revision }}
-        fi
-        
-        if [ "$ROLLBACK_NEEDED" = "true" ]; then
-          echo "‚ùå CRITICAL: Production deployment failed and requires manual rollback intervention"
-          echo "Contact operations team immediately"
-        fi
-        
-        exit 1  # Fail the job to indicate production deployment failure
-
-    - name: Generate production deployment summary
-      if: always()
-      timeout-minutes: 3
-      run: |
-        echo "üìã Generating production deployment summary..."
-        
-        DEPLOY_STATUS="${{ job.status }}"
-        WEB_URL="${{ steps.get_urls.outputs.web_base_url || vars.VERIFY_WEB_BASE_URL_PROD }}"
-        API_URL="${{ steps.get_urls.outputs.api_base_url || 'Not configured' }}"
-        
-        cat > production-deployment-summary.md << EOF
-        # üöÄ Production Deployment Summary
-        
-        **Status:** $DEPLOY_STATUS
-        **Tag/Ref:** ${{ github.ref_name || github.event.inputs.ref }}
-        **Commit:** ${{ github.sha }}
-        **Timestamp:** $(date -u)
-        
-        ## Deployment Results
-        - **Web App:** ${{ env.WEB_APP_NAME }}
-        - **API App:** ${{ env.API_CONTAINER_APP }} ($([ -n "${{ vars.VERIFY_API_BASE_URL_PROD }}" ] && echo "configured" || echo "SKIPPED"))
-        - **Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}
-        - **Environment:** production
-        
-        ## Application URLs
-        - **Web Application:** $WEB_URL
-        - **API Endpoint:** $API_URL
+        echo "üîç Verifying production deployment..."
         
-        ## Verification Results
-        - **Authentication:** ‚úÖ Azure OIDC successful
-        - **Web Deployment:** ${{ steps.deploy_web.outcome == 'success' && '‚úÖ Successful' || steps.deploy_web.outcome == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}
-        - **API Deployment:** ${{ steps.deploy_api.outcome == 'success' && '‚úÖ Successful' || steps.deploy_api.outcome == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed or N/A' }}
-        - **Verification:** ${{ steps.verify_production.outputs.verification_success == 'true' && '‚úÖ Passed' || '‚ùå Failed' }}
-        
-        ## Production Status
-        **Overall:** $([ "$DEPLOY_STATUS" = "success" ] && echo "‚úÖ PRODUCTION DEPLOYMENT SUCCESSFUL" || echo "‚ùå PRODUCTION DEPLOYMENT FAILED")
-        
-        EOF
-        
-        cat production-deployment-summary.md >> $GITHUB_STEP_SUMMARY
-
-    - name: Upload deployment artifacts
-      uses: actions/upload-artifact@v4
-      if: always()
-      timeout-minutes: 3
-      with:
-        name: production-deployment-logs-${{ github.run_id }}
-        path: |
-          production-verification.log
-          production-deployment-summary.md
-        retention-days: 30
-
-    - name: Tag successful production deployment
-      if: success()
-      timeout-minutes: 2
-      run: |
-        echo "üè∑Ô∏è Tagging successful production deployment..."
+        # Wait for restart
+        sleep 45
         
-        git config user.name "GitHub Actions"
-        git config user.email "actions@github.com"
+        # Test endpoint
+        PRODUCTION_URL="https://web-cybermat-prd.azurewebsites.net"
         
-        PRODUCTION_TAG="production-deploy-$(date +%Y%m%d-%H%M%S)"
-        git tag -a "$PRODUCTION_TAG" -m "Production deployment $PRODUCTION_TAG - commit ${{ github.sha }}"
+        for i in {1..8}; do
+          if curl -s --connect-timeout 15 --max-time 30 "$PRODUCTION_URL" >/dev/null; then
+            echo "‚úÖ Production deployment verified"
+            exit 0
+          fi
+          echo "Attempt $i/8 failed, retrying in 15s..."
+          sleep 15
+        done
         
-        echo "‚úÖ Created production tag: $PRODUCTION_TAG"
-        echo "production_tag=$PRODUCTION_TAG" >> $GITHUB_OUTPUT
+        echo "‚ùå Production verification failed after 8 attempts"
+        exit 1
 
-    - name: Log final production status
+    - name: Generate deployment summary
       if: always()
-      timeout-minutes: 1
       run: |
-        echo "üìã Final Production Deployment Status:"
-        echo ""
-        echo "Infrastructure:"
-        echo "- Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
-        echo "- Web App: ${{ env.WEB_APP_NAME }}"
-        echo "- API App: ${{ env.API_CONTAINER_APP }} ($([ -n "${{ vars.VERIFY_API_BASE_URL_PROD }}" ] && echo "configured" || echo "SKIPPED"))"
-        echo ""
-        echo "URLs:"
-        echo "- Web: ${{ steps.get_urls.outputs.web_base_url || vars.VERIFY_WEB_BASE_URL_PROD }}"
-        echo "- API: ${{ steps.get_urls.outputs.api_base_url || 'Not configured' }}"
-        echo ""
-        echo "üéØ Production Deployment: $([ "${{ job.status }}" = "success" ] && echo "‚úÖ SUCCESSFUL" || echo "‚ùå FAILED")"
\ No newline at end of file
+        echo "## Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
+        echo "" >> $GITHUB_STEP_SUMMARY
+        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
+        echo "**Environment:** production" >> $GITHUB_STEP_SUMMARY
+        echo "**App Service:** ${{ env.WEB_APP_NAME }}" >> $GITHUB_STEP_SUMMARY
+        echo "**Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
+        echo "**URL:** https://web-cybermat-prd.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
+        echo "" >> $GITHUB_STEP_SUMMARY
+        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
\ No newline at end of file
diff --git a/.github/workflows/deploy_staging.yml b/.github/workflows/deploy_staging.yml
index c9045cc32b553722edc9c0bc4f2f679a150946bd..54472bafdaad82cde5fd44e4e9a55f30440064aa 100644
--- a/.github/workflows/deploy_staging.yml
+++ b/.github/workflows/deploy_staging.yml
@@ -1,530 +1,105 @@
 name: Deploy to Staging
 
 on:
-  push:
-    tags:
-      - 'v*.*.*-rc*'
   workflow_dispatch:
+  push:
+    branches: [main]
 
-# OIDC permissions for Azure authentication
 permissions:
   id-token: write
   contents: read
 
-# Prevent multiple staging deployments
 concurrency:
-  group: staging-deployment
+  group: deploy-staging
   cancel-in-progress: false
 
 env:
-  AZURE_CONTAINER_REGISTRY: ${{ vars.AZURE_CONTAINER_REGISTRY_STAGING }}
-  AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP_STAGING }}
-  API_CONTAINER_APP: ${{ vars.API_CONTAINER_APP_STAGING }}
-  WEB_CONTAINER_APP: ${{ vars.WEB_CONTAINER_APP_STAGING }}
+  AZURE_RESOURCE_GROUP: rg-cybermat-stg
+  WEB_APP_NAME: web-cybermat-stg
 
 jobs:
   deploy-staging:
     runs-on: ubuntu-latest
-    timeout-minutes: 45
+    timeout-minutes: 20
     environment: staging
     
     steps:
     - name: Checkout code
       uses: actions/checkout@v4
+      timeout-minutes: 3
+
+    - name: Setup Node.js
+      uses: actions/setup-node@v4
+      timeout-minutes: 3
+      with:
+        node-version: '20'
+        cache: 'npm'
+        cache-dependency-path: 'web/package-lock.json'
+
+    - name: Install dependencies
       timeout-minutes: 5
+      working-directory: ./web
+      run: npm ci
 
-    - name: Validate required environment variables
-      timeout-minutes: 2
-      run: |
-        echo "Validating required environment variables for staging deployment..."
-        
-        missing_vars=()
-        
-        if [ -z "${{ env.AZURE_RESOURCE_GROUP }}" ]; then
-          missing_vars+=("AZURE_RESOURCE_GROUP_STAGING")
-        fi
-        
-        if [ -z "${{ env.API_CONTAINER_APP }}" ]; then
-          missing_vars+=("API_CONTAINER_APP_STAGING")
-        fi
-        
-        if [ -z "${{ env.WEB_CONTAINER_APP }}" ]; then
-          missing_vars+=("WEB_CONTAINER_APP_STAGING")
-        fi
-        
-        # ACR is optional - skip if not configured
-        if [ -z "${{ env.AZURE_CONTAINER_REGISTRY }}" ]; then
-          echo "‚ö†Ô∏è AZURE_CONTAINER_REGISTRY_STAGING not set - skipping image build"
-        fi
-        
-        if [ ${#missing_vars[@]} -ne 0 ]; then
-          echo "‚ùå Missing required secrets for staging deployment:"
-          printf '  - %s\n' "${missing_vars[@]}"
-          echo ""
-          echo "Please configure these secrets in your GitHub repository settings."
-          echo "See docs/ENVIRONMENT_SECRETS.md for details."
-          exit 1
-        fi
-        
-        echo "‚úÖ All required environment variables are configured for staging"
+    - name: Build Next.js application
+      timeout-minutes: 8
+      working-directory: ./web
+      run: npm run build
 
     - name: Azure OIDC Login
-      id: azure_login
       uses: azure/login@v2
-      continue-on-error: true
       timeout-minutes: 3
       with:
         client-id: ${{ vars.AZURE_CLIENT_ID }}
         tenant-id: ${{ vars.AZURE_TENANT_ID }}
         subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
-        
-    - name: Check Azure authentication
-      timeout-minutes: 1
-      run: |
-        # Check if Azure login succeeded
-        if az account show >/dev/null 2>&1; then
-          echo "azure_auth_success=true" >> $GITHUB_OUTPUT
-          echo "‚úÖ Azure OIDC authentication successful"
-          az account show --query "{subscription:name,tenantId:tenantId,user:user.name}" -o table
-        else
-          echo "azure_auth_success=false" >> $GITHUB_OUTPUT
-          echo "‚ö†Ô∏è Azure OIDC authentication failed"
-          echo ""
-          echo "This is expected for staging environments without Azure access configured."
-          echo "The workflow will skip all Azure operations and focus on configuration validation."
-          echo ""
-          echo "PO Action Required:"
-          echo "  - Verify AZURE_CLIENT_ID has federated credential configured"  
-          echo "  - Verify service principal has Contributor permissions on subscription"
-          echo "  - Verify AZURE_SUBSCRIPTION_ID is correct"
-        fi
-
-    - name: Login to Azure Container Registry
-      id: acr_login
-      if: env.AZURE_CONTAINER_REGISTRY != '' && steps.azure_login.outcome == 'success'
-      timeout-minutes: 3
-      continue-on-error: true
-      run: |
-        echo "Logging into ACR: ${{ env.AZURE_CONTAINER_REGISTRY }}"
-        if az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}; then
-          echo "acr_login_success=true" >> $GITHUB_OUTPUT
-          echo "‚úÖ ACR login successful"
-        else
-          echo "acr_login_success=false" >> $GITHUB_OUTPUT
-          echo "‚ö†Ô∏è ACR login failed - Container Apps deployment will be skipped"
-          exit 0  # Continue workflow but mark as failed for conditional steps
-        fi
-
-    - name: Build and push API image
-      if: env.AZURE_CONTAINER_REGISTRY != '' && steps.acr_login.outputs.acr_login_success == 'true'
-      timeout-minutes: 15
-      run: |
-        echo "Building API image for staging..."
-        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/api:${{ github.sha }} ./app
-        echo "Pushing API image to registry..."
-        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/api:${{ github.sha }}
-        
-        # Also tag as staging-latest
-        docker tag ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/api:${{ github.sha }} \
-          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/api:staging-latest
-        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/api:staging-latest
 
-    - name: Build and push WEB image
-      if: env.AZURE_CONTAINER_REGISTRY != '' && steps.acr_login.outputs.acr_login_success == 'true'
-      timeout-minutes: 15
+    - name: Deploy to Azure App Service
+      timeout-minutes: 8
       run: |
-        echo "Building WEB image for staging..."
-        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/web:${{ github.sha }} ./web
-        echo "Pushing WEB image to registry..."
-        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/web:${{ github.sha }}
+        cd web
+        # Create deployment package with standalone build
+        zip -r ../web-deployment.zip .next/standalone .next/static public package.json
         
-        # Also tag as staging-latest
-        docker tag ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/web:${{ github.sha }} \
-          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/web:staging-latest
-        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/web:staging-latest
-
-    - name: Record current revisions for rollback
-      id: record_revisions
-      if: steps.azure_login.outcome == 'success'
-      timeout-minutes: 3
-      run: |
-        echo "Recording current revisions for rollback purposes..."
-        
-        # Get current API revision
-        API_CURRENT_REVISION=$(az containerapp revision list \
-          --name ${{ env.API_CONTAINER_APP }} \
-          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
-          --query "[?properties.active].name" \
-          --output tsv | head -1)
-        echo "api_current_revision=$API_CURRENT_REVISION" >> $GITHUB_OUTPUT
-        echo "Current API revision: $API_CURRENT_REVISION"
-        
-        # Get current WEB revision
-        WEB_CURRENT_REVISION=$(az containerapp revision list \
-          --name ${{ env.WEB_CONTAINER_APP }} \
+        # Deploy to App Service
+        az webapp deploy \
           --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
-          --query "[?properties.active].name" \
-          --output tsv | head -1)
-        echo "web_current_revision=$WEB_CURRENT_REVISION" >> $GITHUB_OUTPUT
-        echo "Current WEB revision: $WEB_CURRENT_REVISION"
+          --name ${{ env.WEB_APP_NAME }} \
+          --src-path ../web-deployment.zip \
+          --type zip
 
-    - name: Skip deployment message
-      run: |
-        echo "üìã Deployment Skip Analysis:"
-        
-        # Check Azure authentication
-        if [ "${{ steps.azure_login.outcome }}" != "success" ]; then
-          echo "‚ö†Ô∏è SKIPPING all Azure deployments - Azure OIDC authentication failed"
-          echo "  This is expected for staging environments without Azure access"
-        else
-          echo "‚úÖ Azure authentication successful - deployments enabled"
-        fi
-        
-        # Analyze WEB deployment
-        if [ "${{ vars.VERIFY_WEB_BASE_URL }}" == "" ]; then
-          echo "‚ö†Ô∏è SKIPPING WEB deployment - VERIFY_WEB_BASE_URL not configured"
-        elif [ "${{ steps.azure_login.outcome }}" != "success" ]; then
-          echo "‚ö†Ô∏è SKIPPING WEB deployment - requires Azure authentication"
-        else
-          echo "‚úÖ WEB deployment enabled - using App Service"
-        fi
-        
-        # Analyze API deployment 
-        if [ "${{ vars.VERIFY_API_BASE_URL }}" == "" ]; then
-          echo "‚ö†Ô∏è SKIPPING API deployment - VERIFY_API_BASE_URL not configured"
-        elif [ "${{ steps.azure_login.outcome }}" != "success" ]; then
-          echo "‚ö†Ô∏è SKIPPING API deployment - requires Azure authentication"
-        elif [ "${{ steps.acr_login.outputs.acr_login_success }}" != "true" ]; then
-          echo "‚ö†Ô∏è SKIPPING API deployment - ACR access required for Container Apps"
-          if [ "${{ env.AZURE_CONTAINER_REGISTRY }}" == "" ]; then
-            echo "  Reason: AZURE_CONTAINER_REGISTRY_STAGING not configured"
-          else
-            echo "  Reason: ACR '${{ env.AZURE_CONTAINER_REGISTRY }}' not accessible"
-          fi
-        else
-          echo "‚úÖ API deployment enabled - using Container Apps"
-        fi
-        
-        echo "deployment_analysis=complete" >> $GITHUB_OUTPUT
-
-    - name: Deploy API Container App
-      id: deploy_api
-      if: vars.VERIFY_API_BASE_URL != '' && steps.acr_login.outputs.acr_login_success == 'true'
-      timeout-minutes: 10
-      run: |
-        echo "Deploying API container app to staging..."
-        az containerapp update \
-          --name ${{ env.API_CONTAINER_APP }} \
-          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
-          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/api:${{ github.sha }}
-        
-        # Capture deployment success
-        if [ $? -eq 0 ]; then
-          echo "api_deploy_success=true" >> $GITHUB_OUTPUT
-          echo "‚úÖ API deployment successful"
-        else
-          echo "api_deploy_success=false" >> $GITHUB_OUTPUT
-          echo "‚ùå API deployment failed"
-          exit 1
-        fi
-
-    - name: Deploy WEB App Service
-      id: deploy_web
-      if: vars.VERIFY_WEB_BASE_URL != '' && steps.azure_login.outcome == 'success'
-      timeout-minutes: 10
-      uses: azure/webapps-deploy@v3
-      with:
-        app-name: ${{ env.WEB_CONTAINER_APP }}
-        package: './web'
-        
-    - name: Verify WEB deployment success
-      if: vars.VERIFY_WEB_BASE_URL != '' && steps.azure_login.outcome == 'success'
-      timeout-minutes: 2
-      run: |
-        # Check deployment status
-        WEB_STATUS=$(az webapp show --name ${{ env.WEB_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "state" -o tsv 2>/dev/null || echo "Unknown")
-        echo "WEB App Service Status: $WEB_STATUS"
-        
-        if [ "$WEB_STATUS" = "Running" ]; then
-          echo "web_deploy_success=true" >> $GITHUB_OUTPUT
-          echo "‚úÖ WEB App Service deployment successful"
-        else
-          echo "web_deploy_success=false" >> $GITHUB_OUTPUT
-          echo "‚ùå WEB App Service deployment failed or not running"
-          exit 1
-        fi
-
-    - name: Rollback on deployment failure
-      if: failure() && steps.azure_login.outcome == 'success'
+    - name: Verify deployment
       timeout-minutes: 5
       run: |
-        echo "Deployment failed, attempting rollback..."
-        ROLLBACK_FAILED=false
+        echo "üîç Verifying staging deployment..."
         
-        # Rollback API if it was deployed but WEB failed
-        if [ "${{ steps.deploy_api.outputs.api_deploy_success }}" == "true" ] && [ "${{ steps.record_revisions.outputs.api_current_revision }}" != "" ]; then
-          echo "Rolling back API to revision: ${{ steps.record_revisions.outputs.api_current_revision }}"
-          az containerapp revision activate \
-            --name ${{ env.API_CONTAINER_APP }} \
-            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
-            --revision ${{ steps.record_revisions.outputs.api_current_revision }}
-          
-          if [ $? -ne 0 ]; then
-            echo "‚ùå API rollback failed!"
-            ROLLBACK_FAILED=true
-          else
-            echo "‚úÖ API rollback successful"
-          fi
-        fi
+        # Wait for restart
+        sleep 30
         
-        # Rollback WEB if it was deployed but later steps failed
-        if [ "${{ steps.deploy_web.outputs.web_deploy_success }}" == "true" ] && [ "${{ steps.record_revisions.outputs.web_current_revision }}" != "" ]; then
-          echo "Rolling back WEB to revision: ${{ steps.record_revisions.outputs.web_current_revision }}"
-          az containerapp revision activate \
-            --name ${{ env.WEB_CONTAINER_APP }} \
-            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
-            --revision ${{ steps.record_revisions.outputs.web_current_revision }}
-          
-          if [ $? -ne 0 ]; then
-            echo "‚ùå WEB rollback failed!"
-            ROLLBACK_FAILED=true
-          else
-            echo "‚úÖ WEB rollback successful"
-          fi
-        fi
-        
-        if [ "$ROLLBACK_FAILED" == "true" ]; then
-          echo "‚ùå CRITICAL: One or more rollbacks failed! Manual intervention required."
-          exit 1
-        fi
-        
-        echo "‚úÖ Rollback completed successfully"
-        exit 1  # Still fail the job since original deployment failed
-
-    - name: Wait for deployment stabilization
-      if: steps.azure_login.outcome == 'success' && (vars.VERIFY_WEB_BASE_URL != '' || vars.VERIFY_API_BASE_URL != '')
-      timeout-minutes: 3
-      run: |
-        echo "Waiting for staging deployment to stabilize..."
-        sleep 45
+        # Test endpoint
+        STAGING_URL="https://web-cybermat-stg.azurewebsites.net"
         
-        # Check API status (Container Apps) if deployed
-        if [ "${{ vars.VERIFY_API_BASE_URL }}" != "" ] && [ "${{ steps.acr_login.outputs.acr_login_success }}" == "true" ]; then
-          API_STATUS=$(az containerapp show --name ${{ env.API_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
-          echo "API (Container Apps) Status: $API_STATUS"
-          if [ "$API_STATUS" != "Succeeded" ]; then
-            echo "‚ùå API Container App not in succeeded state"
-            exit 1
+        for i in {1..6}; do
+          if curl -s --connect-timeout 10 --max-time 20 "$STAGING_URL" >/dev/null; then
+            echo "‚úÖ Staging deployment verified"
+            exit 0
           fi
-        else
-          echo "‚ÑπÔ∏è API deployment skipped"
-        fi
+          echo "Attempt $i/6 failed, retrying in 10s..."
+          sleep 10
+        done
         
-        # Check WEB status (App Service) if deployed  
-        if [ "${{ vars.VERIFY_WEB_BASE_URL }}" != "" ]; then
-          WEB_STATUS=$(az webapp show --name ${{ env.WEB_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "state" -o tsv 2>/dev/null || echo "Unknown")
-          echo "WEB (App Service) Status: $WEB_STATUS"
-          if [ "$WEB_STATUS" != "Running" ]; then
-            echo "‚ùå WEB App Service not in running state"
-            exit 1
-          fi
-        else
-          echo "‚ÑπÔ∏è WEB deployment skipped"
-        fi
-        
-        echo "‚úÖ All deployed apps are in healthy state"
+        echo "‚ùå Staging verification failed after 6 attempts"
+        exit 1
 
-    - name: Get application URLs
-      id: get_urls
-      if: steps.azure_login.outcome == 'success' && (vars.VERIFY_WEB_BASE_URL != '' || vars.VERIFY_API_BASE_URL != '')
-      timeout-minutes: 2
-      run: |
-        echo "Retrieving application URLs..."
-        
-        # Get API URL from Container Apps (if deployed)
-        if [ "${{ vars.VERIFY_API_BASE_URL }}" != "" ] && [ "${{ steps.acr_login.outputs.acr_login_success }}" == "true" ]; then
-          API_FQDN=$(az containerapp show --name ${{ env.API_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv 2>/dev/null || echo "")
-          if [ -n "$API_FQDN" ]; then
-            API_BASE_URL="https://$API_FQDN"
-            echo "api_base_url=$API_BASE_URL" >> $GITHUB_OUTPUT
-            echo "‚úÖ API URL: $API_BASE_URL"
-          else
-            echo "‚ö†Ô∏è Could not retrieve API URL - using configured VERIFY_API_BASE_URL"
-            echo "api_base_url=${{ vars.VERIFY_API_BASE_URL }}" >> $GITHUB_OUTPUT
-          fi
-        else
-          echo "‚ÑπÔ∏è API deployment skipped"
-          echo "api_base_url=" >> $GITHUB_OUTPUT
-        fi
-        
-        # Get WEB URL from App Service (if deployed)
-        if [ "${{ vars.VERIFY_WEB_BASE_URL }}" != "" ]; then
-          WEB_FQDN=$(az webapp show --name ${{ env.WEB_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "defaultHostName" -o tsv 2>/dev/null || echo "")
-          if [ -n "$WEB_FQDN" ]; then
-            WEB_BASE_URL="https://$WEB_FQDN"
-            echo "web_base_url=$WEB_BASE_URL" >> $GITHUB_OUTPUT
-            echo "‚úÖ WEB URL: $WEB_BASE_URL"
-          else
-            echo "‚ö†Ô∏è Could not retrieve WEB URL - using configured VERIFY_WEB_BASE_URL"
-            echo "web_base_url=${{ vars.VERIFY_WEB_BASE_URL }}" >> $GITHUB_OUTPUT
-          fi
-        else
-          echo "‚ÑπÔ∏è WEB deployment skipped"
-          echo "web_base_url=" >> $GITHUB_OUTPUT
-        fi
-
-    - name: Run post-deployment verification
-      if: steps.azure_login.outcome == 'success' && (vars.VERIFY_WEB_BASE_URL != '' || vars.VERIFY_API_BASE_URL != '')
-      timeout-minutes: 10
-      env:
-        WEB_BASE_URL: ${{ steps.get_urls.outputs.web_base_url || vars.VERIFY_WEB_BASE_URL }}
-        API_BASE_URL: ${{ steps.get_urls.outputs.api_base_url || vars.VERIFY_API_BASE_URL }}
-        AUTH_BEARER: ${{ vars.STAGING_AUTH_BEARER }}
-      run: |
-        echo "üîç Running post-deployment verification on staging environment..."
-        
-        # Make verify script executable
-        chmod +x scripts/verify_live.sh
-        
-        # Set URLs based on what was deployed
-        if [ "${{ vars.VERIFY_WEB_BASE_URL }}" != "" ]; then
-          export WEB_BASE_URL="${{ steps.get_urls.outputs.web_base_url || vars.VERIFY_WEB_BASE_URL }}"
-          echo "üåê WEB verification enabled: $WEB_BASE_URL"
-        else
-          export WEB_BASE_URL=""
-          echo "‚è≠Ô∏è WEB verification skipped"
-        fi
-        
-        if [ "${{ vars.VERIFY_API_BASE_URL }}" != "" ] && [ "${{ steps.acr_login.outputs.acr_login_success }}" == "true" ]; then
-          export API_BASE_URL="${{ steps.get_urls.outputs.api_base_url || vars.VERIFY_API_BASE_URL }}"
-          echo "üîó API verification enabled: $API_BASE_URL"
-        else
-          export API_BASE_URL=""
-          echo "‚è≠Ô∏è API verification skipped (no deployment or ACR access)"
-        fi
-        
-        # Include auth bearer if configured (optional)
-        if [ -n "${{ vars.STAGING_AUTH_BEARER }}" ]; then
-          export AUTH_BEARER="${{ vars.STAGING_AUTH_BEARER }}"
-          echo "üîê Using authentication bearer for verification"
-        fi
-        
-        # Set deployment context
-        export DEPLOYMENT_VERIFICATION=true
-        export GITHUB_SHA=${{ github.sha }}
-        export DEPLOYMENT_ENVIRONMENT="staging"
-        
-        # Run verification and capture output
-        if ./scripts/verify_live.sh 2>&1 | tee staging-verification.log; then
-          echo "‚úÖ Staging deployment verification passed"
-        else
-          echo "‚ùå Staging deployment verification failed"
-          
-          # Show verification output in job summary
-          echo "## Staging Deployment Verification Failed" >> $GITHUB_STEP_SUMMARY
-          echo "```" >> $GITHUB_STEP_SUMMARY
-          tail -30 staging-verification.log >> $GITHUB_STEP_SUMMARY
-          echo "```" >> $GITHUB_STEP_SUMMARY
-          
-          exit 1
-        fi
-
-    - name: Log final deployment status
+    - name: Generate deployment summary
       if: always()
-      timeout-minutes: 1
       run: |
-        echo "üìã Final Deployment Status Summary:"
-        echo ""
-        echo "Infrastructure Configuration:"
-        echo "- AZURE_RESOURCE_GROUP: ${{ env.AZURE_RESOURCE_GROUP }}"
-        echo "- WEB_CONTAINER_APP (App Service): ${{ env.WEB_CONTAINER_APP }}"
-        echo "- API_CONTAINER_APP (Container Apps): ${{ env.API_CONTAINER_APP }}"
-        echo "- AZURE_CONTAINER_REGISTRY: ${{ env.AZURE_CONTAINER_REGISTRY }}"
-        echo ""
-        echo "Deployment Results:"
-        if [ "${{ vars.VERIFY_WEB_BASE_URL }}" != "" ]; then
-          echo "‚úÖ WEB (App Service): Deployment attempted"
-        else
-          echo "‚è≠Ô∏è WEB: Skipped (VERIFY_WEB_BASE_URL not configured)"
-        fi
-        
-        if [ "${{ vars.VERIFY_API_BASE_URL }}" != "" ]; then
-          if [ "${{ steps.acr_login.outputs.acr_login_success }}" == "true" ]; then
-            echo "‚úÖ API (Container Apps): Deployment attempted"  
-          else
-            echo "‚è≠Ô∏è API: Skipped (ACR access required)"
-          fi
-        else
-          echo "‚è≠Ô∏è API: Skipped (VERIFY_API_BASE_URL not configured)"
-        fi
-        echo ""
-        echo "üéØ RC Infrastructure Validation: Complete"
-
-    - name: Upload deployment artifacts
-      uses: actions/upload-artifact@v4
-      if: always()
-      timeout-minutes: 3
-      with:
-        name: staging-deployment-logs
-        path: |
-          staging-verification.log
-        retention-days: 14
-
-    - name: Generate staging deployment summary
-      if: always()
-      timeout-minutes: 2
-      run: |
-        echo "üìã Generating staging deployment summary..."
-        
-        DEPLOY_STATUS="${{ job.status }}"
-        API_URL="${{ steps.get_urls.outputs.api_base_url }}"
-        WEB_URL="${{ steps.get_urls.outputs.web_base_url }}"
-        
-        cat > staging-deployment-summary.md << EOF
-        # üöÄ Staging Deployment Summary
-        
-        **Status:** $DEPLOY_STATUS
-        **Tag:** ${{ github.ref_name }}
-        **Commit:** ${{ github.sha }}
-        **Timestamp:** $(date -u)
-        
-        ## Deployment Details
-        - **API Image:** ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/api:${{ github.sha }}
-        - **WEB Image:** ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/web:${{ github.sha }}
-        - **Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}
-        - **Environment:** staging
-        
-        ## Application URLs
-        - **API Endpoint:** $API_URL
-        - **WEB Endpoint:** $WEB_URL
-        
-        ## Verification Results
-        - **Infrastructure Health:** ‚úÖ Passed
-        - **Service Connectivity:** ‚úÖ Passed
-        - **Post-deploy Verification:** ‚úÖ Passed
-        
-        ## Next Steps
-        1. Run E2E tests against staging environment
-        2. Perform manual QA validation
-        3. Monitor application performance and logs
-        4. Promote to production when ready
-        
-        EOF
-        
-        cat staging-deployment-summary.md >> $GITHUB_STEP_SUMMARY
-
-    - name: Tag successful staging deployment
-      if: success()
-      timeout-minutes: 2
-      run: |
-        echo "üè∑Ô∏è Tagging successful staging deployment..."
-        
-        # Create deployment tag
-        git config user.name "GitHub Actions"
-        git config user.email "actions@github.com"
-        
-        STAGING_TAG="staging-deploy-$(date +%Y%m%d-%H%M%S)"
-        git tag -a "$STAGING_TAG" -m "Staging deployment $STAGING_TAG - commit ${{ github.sha }}"
-        
-        echo "Created staging tag: $STAGING_TAG"
-        echo "staging_tag=$STAGING_TAG" >> $GITHUB_OUTPUT
\ No newline at end of file
+        echo "## Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
+        echo "" >> $GITHUB_STEP_SUMMARY
+        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
+        echo "**Environment:** staging" >> $GITHUB_STEP_SUMMARY
+        echo "**App Service:** ${{ env.WEB_APP_NAME }}" >> $GITHUB_STEP_SUMMARY
+        echo "**Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
+        echo "**URL:** https://web-cybermat-stg.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
+        echo "" >> $GITHUB_STEP_SUMMARY
+        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
\ No newline at end of file
