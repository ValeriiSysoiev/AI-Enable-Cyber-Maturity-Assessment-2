From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Valerii Sysoiev <valsysoiev@gmail.com>
Date: Mon, 18 Aug 2025 14:37:42 -0600
Subject: [PATCH 71/90] feat: reconcile staging workflow with actual
 infrastructure

- Update WEB deployment to use App Service (azure/webapps-deploy@v3)
- Keep API deployment as Container Apps (conditional on ACR access)
- Use VERIFY_*_BASE_URL vars for deployment conditionals
- Make ACR completely optional with graceful skipping
- Update environment documentation with correct variable names
- Add mixed infrastructure support (App Service + Container Apps)

<250 LOC, aligns with actual Azure infrastructure

diff --git a/.github/workflows/deploy_staging.yml b/.github/workflows/deploy_staging.yml
index 4140e4f960bf2777607820ddeb30f4cc817e973f..07f1312b6a8b85c9366932d06c5382d701612692 100644
--- a/.github/workflows/deploy_staging.yml
+++ b/.github/workflows/deploy_staging.yml
@@ -145,21 +145,34 @@ jobs:
         echo "Current WEB revision: $WEB_CURRENT_REVISION"
 
     - name: Skip deployment message
-      if: env.AZURE_CONTAINER_REGISTRY == '' || steps.acr_login.outputs.acr_login_success != 'true'
+      if: (vars.VERIFY_API_BASE_URL != '' && steps.acr_login.outputs.acr_login_success != 'true') || vars.VERIFY_WEB_BASE_URL == ''
       run: |
-        if [ "${{ env.AZURE_CONTAINER_REGISTRY }}" == "" ]; then
-          echo "⚠️ SKIPPING Container Apps deployment - AZURE_CONTAINER_REGISTRY_STAGING not configured"
-          echo "This is expected for staging environments without ACR setup"
+        echo "📋 Deployment Skip Analysis:"
+        
+        if [ "${{ vars.VERIFY_WEB_BASE_URL }}" == "" ]; then
+          echo "⚠️ SKIPPING WEB deployment - VERIFY_WEB_BASE_URL not configured"
+        else
+          echo "✅ WEB deployment enabled - using App Service"
+        fi
+        
+        if [ "${{ vars.VERIFY_API_BASE_URL }}" == "" ]; then
+          echo "⚠️ SKIPPING API deployment - VERIFY_API_BASE_URL not configured"
+        elif [ "${{ steps.acr_login.outputs.acr_login_success }}" != "true" ]; then
+          echo "⚠️ SKIPPING API deployment - ACR access required for Container Apps"
+          if [ "${{ env.AZURE_CONTAINER_REGISTRY }}" == "" ]; then
+            echo "  Reason: AZURE_CONTAINER_REGISTRY_STAGING not configured"
+          else
+            echo "  Reason: ACR '${{ env.AZURE_CONTAINER_REGISTRY }}' not accessible"
+          fi
         else
-          echo "⚠️ SKIPPING Container Apps deployment - ACR login failed"
-          echo "ACR '${{ env.AZURE_CONTAINER_REGISTRY }}' not accessible with current permissions"
-          echo "Verify ACR exists and OIDC has Reader/AcrPush permissions"
+          echo "✅ API deployment enabled - using Container Apps"
         fi
-        echo "deployment_skipped=true" >> $GITHUB_OUTPUT
+        
+        echo "deployment_analysis=complete" >> $GITHUB_OUTPUT
 
     - name: Deploy API Container App
       id: deploy_api
-      if: env.AZURE_CONTAINER_REGISTRY != '' && env.API_CONTAINER_APP != '' && steps.acr_login.outputs.acr_login_success == 'true'
+      if: vars.VERIFY_API_BASE_URL != '' && steps.acr_login.outputs.acr_login_success == 'true'
       timeout-minutes: 10
       run: |
         echo "Deploying API container app to staging..."
@@ -178,24 +191,29 @@ jobs:
           exit 1
         fi
 
-    - name: Deploy WEB Container App
+    - name: Deploy WEB App Service
       id: deploy_web
-      if: env.AZURE_CONTAINER_REGISTRY != '' && env.WEB_CONTAINER_APP != '' && steps.acr_login.outputs.acr_login_success == 'true'
+      if: vars.VERIFY_WEB_BASE_URL != ''
       timeout-minutes: 10
+      uses: azure/webapps-deploy@v3
+      with:
+        app-name: ${{ env.WEB_CONTAINER_APP }}
+        package: './web'
+        
+    - name: Verify WEB deployment success
+      if: vars.VERIFY_WEB_BASE_URL != ''
+      timeout-minutes: 2
       run: |
-        echo "Deploying WEB container app to staging..."
-        az containerapp update \
-          --name ${{ env.WEB_CONTAINER_APP }} \
-          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
-          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/web:${{ github.sha }}
+        # Check deployment status
+        WEB_STATUS=$(az webapp show --name ${{ env.WEB_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "state" -o tsv 2>/dev/null || echo "Unknown")
+        echo "WEB App Service Status: $WEB_STATUS"
         
-        # Capture deployment success
-        if [ $? -eq 0 ]; then
+        if [ "$WEB_STATUS" = "Running" ]; then
           echo "web_deploy_success=true" >> $GITHUB_OUTPUT
-          echo "✅ WEB deployment successful"
+          echo "✅ WEB App Service deployment successful"
         else
           echo "web_deploy_success=false" >> $GITHUB_OUTPUT
-          echo "❌ WEB deployment failed"
+          echo "❌ WEB App Service deployment failed or not running"
           exit 1
         fi
 
@@ -247,60 +265,83 @@ jobs:
         exit 1  # Still fail the job since original deployment failed
 
     - name: Wait for deployment stabilization
-      if: steps.acr_login.outputs.acr_login_success == 'true'
+      if: vars.VERIFY_WEB_BASE_URL != '' || vars.VERIFY_API_BASE_URL != ''
       timeout-minutes: 3
       run: |
         echo "Waiting for staging deployment to stabilize..."
         sleep 45
         
-        # Check both apps are running
-        API_STATUS=$(az containerapp show --name ${{ env.API_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.provisioningState" -o tsv)
-        WEB_STATUS=$(az containerapp show --name ${{ env.WEB_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.provisioningState" -o tsv)
-        
-        echo "API Status: $API_STATUS"
-        echo "WEB Status: $WEB_STATUS"
+        # Check API status (Container Apps) if deployed
+        if [ "${{ vars.VERIFY_API_BASE_URL }}" != "" ] && [ "${{ steps.acr_login.outputs.acr_login_success }}" == "true" ]; then
+          API_STATUS=$(az containerapp show --name ${{ env.API_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
+          echo "API (Container Apps) Status: $API_STATUS"
+          if [ "$API_STATUS" != "Succeeded" ]; then
+            echo "❌ API Container App not in succeeded state"
+            exit 1
+          fi
+        else
+          echo "ℹ️ API deployment skipped"
+        fi
         
-        if [ "$API_STATUS" != "Succeeded" ] || [ "$WEB_STATUS" != "Succeeded" ]; then
-          echo "❌ Apps not in succeeded state after deployment"
-          exit 1
+        # Check WEB status (App Service) if deployed  
+        if [ "${{ vars.VERIFY_WEB_BASE_URL }}" != "" ]; then
+          WEB_STATUS=$(az webapp show --name ${{ env.WEB_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "state" -o tsv 2>/dev/null || echo "Unknown")
+          echo "WEB (App Service) Status: $WEB_STATUS"
+          if [ "$WEB_STATUS" != "Running" ]; then
+            echo "❌ WEB App Service not in running state"
+            exit 1
+          fi
+        else
+          echo "ℹ️ WEB deployment skipped"
         fi
         
-        echo "✅ Both apps are in succeeded state"
+        echo "✅ All deployed apps are in healthy state"
 
     - name: Get application URLs
       id: get_urls
-      if: steps.acr_login.outputs.acr_login_success == 'true'
+      if: vars.VERIFY_WEB_BASE_URL != '' || vars.VERIFY_API_BASE_URL != ''
       timeout-minutes: 2
       run: |
         echo "Retrieving application URLs..."
         
-        API_FQDN=$(az containerapp show --name ${{ env.API_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
-        WEB_FQDN=$(az containerapp show --name ${{ env.WEB_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
-        
-        if [ -n "$API_FQDN" ]; then
-          API_BASE_URL="https://$API_FQDN"
-          echo "api_base_url=$API_BASE_URL" >> $GITHUB_OUTPUT
-          echo "API URL: $API_BASE_URL"
+        # Get API URL from Container Apps (if deployed)
+        if [ "${{ vars.VERIFY_API_BASE_URL }}" != "" ] && [ "${{ steps.acr_login.outputs.acr_login_success }}" == "true" ]; then
+          API_FQDN=$(az containerapp show --name ${{ env.API_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv 2>/dev/null || echo "")
+          if [ -n "$API_FQDN" ]; then
+            API_BASE_URL="https://$API_FQDN"
+            echo "api_base_url=$API_BASE_URL" >> $GITHUB_OUTPUT
+            echo "✅ API URL: $API_BASE_URL"
+          else
+            echo "⚠️ Could not retrieve API URL - using configured VERIFY_API_BASE_URL"
+            echo "api_base_url=${{ vars.VERIFY_API_BASE_URL }}" >> $GITHUB_OUTPUT
+          fi
         else
-          echo "❌ Could not retrieve API URL"
-          exit 1
+          echo "ℹ️ API deployment skipped"
+          echo "api_base_url=" >> $GITHUB_OUTPUT
         fi
         
-        if [ -n "$WEB_FQDN" ]; then
-          WEB_BASE_URL="https://$WEB_FQDN"
-          echo "web_base_url=$WEB_BASE_URL" >> $GITHUB_OUTPUT
-          echo "WEB URL: $WEB_BASE_URL"
+        # Get WEB URL from App Service (if deployed)
+        if [ "${{ vars.VERIFY_WEB_BASE_URL }}" != "" ]; then
+          WEB_FQDN=$(az webapp show --name ${{ env.WEB_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "defaultHostName" -o tsv 2>/dev/null || echo "")
+          if [ -n "$WEB_FQDN" ]; then
+            WEB_BASE_URL="https://$WEB_FQDN"
+            echo "web_base_url=$WEB_BASE_URL" >> $GITHUB_OUTPUT
+            echo "✅ WEB URL: $WEB_BASE_URL"
+          else
+            echo "⚠️ Could not retrieve WEB URL - using configured VERIFY_WEB_BASE_URL"
+            echo "web_base_url=${{ vars.VERIFY_WEB_BASE_URL }}" >> $GITHUB_OUTPUT
+          fi
         else
-          echo "❌ Could not retrieve WEB URL"
-          exit 1
+          echo "ℹ️ WEB deployment skipped"
+          echo "web_base_url=" >> $GITHUB_OUTPUT
         fi
 
     - name: Run post-deployment verification
-      if: steps.acr_login.outputs.acr_login_success == 'true'
+      if: vars.VERIFY_WEB_BASE_URL != '' || vars.VERIFY_API_BASE_URL != ''
       timeout-minutes: 10
       env:
-        WEB_BASE_URL: ${{ steps.get_urls.outputs.web_base_url }}
-        API_BASE_URL: ${{ steps.get_urls.outputs.api_base_url }}
+        WEB_BASE_URL: ${{ steps.get_urls.outputs.web_base_url || vars.VERIFY_WEB_BASE_URL }}
+        API_BASE_URL: ${{ steps.get_urls.outputs.api_base_url || vars.VERIFY_API_BASE_URL }}
         AUTH_BEARER: ${{ vars.STAGING_AUTH_BEARER }}
       run: |
         echo "🔍 Running post-deployment verification on staging environment..."
@@ -308,14 +349,27 @@ jobs:
         # Make verify script executable
         chmod +x scripts/verify_live.sh
         
-        # Export environment variables for the verification script
-        export WEB_BASE_URL="${{ steps.get_urls.outputs.web_base_url }}"
-        export API_BASE_URL="${{ steps.get_urls.outputs.api_base_url }}"
+        # Set URLs based on what was deployed
+        if [ "${{ vars.VERIFY_WEB_BASE_URL }}" != "" ]; then
+          export WEB_BASE_URL="${{ steps.get_urls.outputs.web_base_url || vars.VERIFY_WEB_BASE_URL }}"
+          echo "🌐 WEB verification enabled: $WEB_BASE_URL"
+        else
+          export WEB_BASE_URL=""
+          echo "⏭️ WEB verification skipped"
+        fi
+        
+        if [ "${{ vars.VERIFY_API_BASE_URL }}" != "" ] && [ "${{ steps.acr_login.outputs.acr_login_success }}" == "true" ]; then
+          export API_BASE_URL="${{ steps.get_urls.outputs.api_base_url || vars.VERIFY_API_BASE_URL }}"
+          echo "🔗 API verification enabled: $API_BASE_URL"
+        else
+          export API_BASE_URL=""
+          echo "⏭️ API verification skipped (no deployment or ACR access)"
+        fi
         
         # Include auth bearer if configured (optional)
         if [ -n "${{ vars.STAGING_AUTH_BEARER }}" ]; then
           export AUTH_BEARER="${{ vars.STAGING_AUTH_BEARER }}"
-          echo "Using authentication bearer for verification"
+          echo "🔐 Using authentication bearer for verification"
         fi
         
         # Set deployment context
@@ -338,21 +392,36 @@ jobs:
           exit 1
         fi
 
-    - name: Log deployment skip status
-      if: steps.acr_login.outputs.acr_login_success != 'true'
+    - name: Log final deployment status
+      if: always()
       timeout-minutes: 1
       run: |
-        echo "📋 Deployment Status: SKIPPED"
-        echo "Reason: Container Apps deployment requires ACR access"
-        echo "This is expected for staging environments without full ACR setup"
+        echo "📋 Final Deployment Status Summary:"
         echo ""
-        echo "Environment Configuration:"
+        echo "Infrastructure Configuration:"
         echo "- AZURE_RESOURCE_GROUP: ${{ env.AZURE_RESOURCE_GROUP }}"
-        echo "- API_CONTAINER_APP: ${{ env.API_CONTAINER_APP }}"
-        echo "- WEB_CONTAINER_APP: ${{ env.WEB_CONTAINER_APP }}"
+        echo "- WEB_CONTAINER_APP (App Service): ${{ env.WEB_CONTAINER_APP }}"
+        echo "- API_CONTAINER_APP (Container Apps): ${{ env.API_CONTAINER_APP }}"
         echo "- AZURE_CONTAINER_REGISTRY: ${{ env.AZURE_CONTAINER_REGISTRY }}"
         echo ""
-        echo "🎯 RC Verification: Environment configuration validated successfully"
+        echo "Deployment Results:"
+        if [ "${{ vars.VERIFY_WEB_BASE_URL }}" != "" ]; then
+          echo "✅ WEB (App Service): Deployment attempted"
+        else
+          echo "⏭️ WEB: Skipped (VERIFY_WEB_BASE_URL not configured)"
+        fi
+        
+        if [ "${{ vars.VERIFY_API_BASE_URL }}" != "" ]; then
+          if [ "${{ steps.acr_login.outputs.acr_login_success }}" == "true" ]; then
+            echo "✅ API (Container Apps): Deployment attempted"  
+          else
+            echo "⏭️ API: Skipped (ACR access required)"
+          fi
+        else
+          echo "⏭️ API: Skipped (VERIFY_API_BASE_URL not configured)"
+        fi
+        echo ""
+        echo "🎯 RC Infrastructure Validation: Complete"
 
     - name: Upload deployment artifacts
       uses: actions/upload-artifact@v4
diff --git a/docs/ENVIRONMENT_SECRETS.md b/docs/ENVIRONMENT_SECRETS.md
index b1358e2c17f3cd9293355d686def3a3d8915d1e8..cede6cb5dbc5c4a453b667408277ff2f8cc22e52 100644
--- a/docs/ENVIRONMENT_SECRETS.md
+++ b/docs/ENVIRONMENT_SECRETS.md
@@ -29,19 +29,26 @@ Used by `.github/workflows/release.yml` workflow for production deployments.
 ### Optional Secrets
 - **`PRODUCTION_AUTH_BEARER`** - Authentication token for production verification tests
 
-## Staging Deployment Secrets
+## Staging Deployment Variables
 
 Used by `.github/workflows/deploy_staging.yml` workflow for staging deployments.
 
-### Required Secrets
-- **`AZURE_CONTAINER_REGISTRY_STAGING`** - Staging ACR name (without .azurecr.io suffix)
-- **`AZURE_RESOURCE_GROUP_STAGING`** - Staging resource group name
-- **`API_CONTAINER_APP_STAGING`** - Staging API container app name
-- **`WEB_CONTAINER_APP_STAGING`** - Staging web container app name
+### Required Environment Variables (vars.*)
+- **`AZURE_RESOURCE_GROUP_STAGING`** - Staging resource group name (e.g., "rg-cybermat-stg")
+- **`WEB_CONTAINER_APP_STAGING`** - Staging web App Service name (e.g., "web-cybermat-stg")
+- **`API_CONTAINER_APP_STAGING`** - Staging API Container Apps name (e.g., "api-cybermat-stg")
+- **`VERIFY_WEB_BASE_URL`** - Web verification URL (e.g., "https://web-cybermat-stg.azurewebsites.net")
+- **`VERIFY_API_BASE_URL`** - API verification URL (e.g., "https://api-cybermat-stg.azurecontainerapps.io")
 
-### Optional Secrets
+### Optional Environment Variables (vars.*)
+- **`AZURE_CONTAINER_REGISTRY_STAGING`** - Staging ACR name (without .azurecr.io suffix) - enables API image builds
 - **`STAGING_AUTH_BEARER`** - Authentication token for staging verification tests
 
+### Infrastructure Architecture
+- **WEB**: Deployed to Azure App Service (uses `azure/webapps-deploy@v3`)
+- **API**: Deployed to Azure Container Apps (requires ACR for image builds)
+- **ACR**: Optional - API deployment skipped gracefully if not configured
+
 ## Legacy Authentication (Deprecated)
 
 These secrets are used by older workflows but should be migrated to OIDC authentication.
