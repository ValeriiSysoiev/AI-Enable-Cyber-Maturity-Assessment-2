{
  "version": "1.0",
  "description": "Cosmos DB Index Optimization Proposals for AI-Enabled Cyber Maturity Assessment",
  "last_updated": "2024-01-17",
  "containers": {
    "engagements": {
      "current_partition_key": "/id",
      "proposed_indexes": [
        {
          "type": "composite",
          "name": "engagements_by_user_created",
          "paths": [
            {
              "path": "/created_by",
              "order": "ascending"
            },
            {
              "path": "/created_at",
              "order": "descending"
            }
          ],
          "purpose": "Optimize listing engagements by user with creation date sorting",
          "query_patterns": [
            "SELECT * FROM c WHERE c.created_by = @user ORDER BY c.created_at DESC",
            "SELECT * FROM c WHERE c.created_by = @user AND c.created_at >= @start_date"
          ],
          "expected_improvement": "80% reduction in RU consumption for user engagement queries"
        },
        {
          "type": "composite",
          "name": "engagements_by_status_updated",
          "paths": [
            {
              "path": "/status",
              "order": "ascending"
            },
            {
              "path": "/updated_at",
              "order": "descending"
            }
          ],
          "purpose": "Optimize filtering engagements by status with recent updates first",
          "query_patterns": [
            "SELECT * FROM c WHERE c.status = @status ORDER BY c.updated_at DESC",
            "SELECT * FROM c WHERE c.status IN (@status1, @status2) ORDER BY c.updated_at DESC"
          ],
          "expected_improvement": "70% reduction in RU consumption for status-based filtering"
        },
        {
          "type": "single_field",
          "name": "engagements_by_organization",
          "path": "/organization",
          "purpose": "Enable efficient filtering by organization for multi-tenant scenarios",
          "query_patterns": [
            "SELECT * FROM c WHERE c.organization = @org",
            "SELECT COUNT(1) FROM c WHERE c.organization = @org"
          ],
          "expected_improvement": "90% reduction in RU consumption for organization-scoped queries"
        }
      ],
      "include_exclude_paths": {
        "included_paths": [
          {
            "path": "/id/*"
          },
          {
            "path": "/created_by/*"
          },
          {
            "path": "/status/*"
          },
          {
            "path": "/organization/*"
          },
          {
            "path": "/created_at/*"
          },
          {
            "path": "/updated_at/*"
          },
          {
            "path": "/name/*"
          }
        ],
        "excluded_paths": [
          {
            "path": "/description/*"
          },
          {
            "path": "/notes/*"
          },
          {
            "path": "/metadata/*"
          }
        ],
        "rationale": "Exclude large text fields and metadata to reduce index size and improve performance"
      }
    },
    "memberships": {
      "current_partition_key": "/engagement_id",
      "proposed_indexes": [
        {
          "type": "composite",
          "name": "memberships_by_user_role",
          "paths": [
            {
              "path": "/user_email",
              "order": "ascending"
            },
            {
              "path": "/role",
              "order": "ascending"
            }
          ],
          "purpose": "Optimize user membership and role lookups",
          "query_patterns": [
            "SELECT * FROM c WHERE c.user_email = @email",
            "SELECT * FROM c WHERE c.user_email = @email AND c.role = @role"
          ],
          "expected_improvement": "85% reduction in RU consumption for user role queries"
        },
        {
          "type": "single_field",
          "name": "memberships_by_status",
          "path": "/status",
          "purpose": "Filter active/inactive memberships efficiently",
          "query_patterns": [
            "SELECT * FROM c WHERE c.status = 'active'",
            "SELECT COUNT(1) FROM c WHERE c.engagement_id = @engagement AND c.status = 'active'"
          ],
          "expected_improvement": "75% reduction in RU consumption for membership status queries"
        }
      ]
    },
    "assessments": {
      "current_partition_key": "/engagement_id",
      "proposed_indexes": [
        {
          "type": "composite",
          "name": "assessments_by_preset_status",
          "paths": [
            {
              "path": "/preset_id",
              "order": "ascending"
            },
            {
              "path": "/status",
              "order": "ascending"
            },
            {
              "path": "/created_at",
              "order": "descending"
            }
          ],
          "purpose": "Optimize assessment queries by preset and status with recency sorting",
          "query_patterns": [
            "SELECT * FROM c WHERE c.preset_id = @preset AND c.status = @status ORDER BY c.created_at DESC",
            "SELECT * FROM c WHERE c.preset_id = @preset ORDER BY c.created_at DESC"
          ],
          "expected_improvement": "80% reduction in RU consumption for preset-based assessment queries"
        },
        {
          "type": "composite",
          "name": "assessments_by_completion",
          "paths": [
            {
              "path": "/completion_percentage",
              "order": "descending"
            },
            {
              "path": "/updated_at",
              "order": "descending"
            }
          ],
          "purpose": "Efficiently find incomplete assessments and track progress",
          "query_patterns": [
            "SELECT * FROM c WHERE c.completion_percentage < 100 ORDER BY c.updated_at DESC",
            "SELECT * FROM c WHERE c.completion_percentage >= @threshold ORDER BY c.completion_percentage DESC"
          ],
          "expected_improvement": "70% reduction in RU consumption for completion tracking queries"
        }
      ]
    },
    "questions": {
      "current_partition_key": "/assessment_id",
      "proposed_indexes": [
        {
          "type": "composite",
          "name": "questions_by_pillar_capability",
          "paths": [
            {
              "path": "/pillar_id",
              "order": "ascending"
            },
            {
              "path": "/capability_id",
              "order": "ascending"
            },
            {
              "path": "/order",
              "order": "ascending"
            }
          ],
          "purpose": "Optimize retrieval of questions by pillar and capability in correct order",
          "query_patterns": [
            "SELECT * FROM c WHERE c.pillar_id = @pillar ORDER BY c.order ASC",
            "SELECT * FROM c WHERE c.pillar_id = @pillar AND c.capability_id = @capability ORDER BY c.order ASC"
          ],
          "expected_improvement": "85% reduction in RU consumption for structured question retrieval"
        }
      ]
    },
    "responses": {
      "current_partition_key": "/assessment_id",
      "proposed_indexes": [
        {
          "type": "composite",
          "name": "responses_by_user_timestamp",
          "paths": [
            {
              "path": "/user_email",
              "order": "ascending"
            },
            {
              "path": "/timestamp",
              "order": "descending"
            }
          ],
          "purpose": "Track user response history and audit trails",
          "query_patterns": [
            "SELECT * FROM c WHERE c.user_email = @user ORDER BY c.timestamp DESC",
            "SELECT * FROM c WHERE c.user_email = @user AND c.timestamp >= @start_date"
          ],
          "expected_improvement": "80% reduction in RU consumption for user activity tracking"
        },
        {
          "type": "composite",
          "name": "responses_by_level_pillar",
          "paths": [
            {
              "path": "/level",
              "order": "ascending"
            },
            {
              "path": "/pillar_id",
              "order": "ascending"
            }
          ],
          "purpose": "Analyze response patterns and scoring by maturity level and pillar",
          "query_patterns": [
            "SELECT * FROM c WHERE c.level = @level AND c.pillar_id = @pillar",
            "SELECT COUNT(1) FROM c WHERE c.level IN (@level1, @level2) GROUP BY c.pillar_id"
          ],
          "expected_improvement": "75% reduction in RU consumption for scoring and analytics queries"
        }
      ]
    },
    "findings": {
      "current_partition_key": "/assessment_id",
      "proposed_indexes": [
        {
          "type": "composite",
          "name": "findings_by_severity_category",
          "paths": [
            {
              "path": "/severity",
              "order": "descending"
            },
            {
              "path": "/category",
              "order": "ascending"
            },
            {
              "path": "/created_at",
              "order": "descending"
            }
          ],
          "purpose": "Prioritize findings by severity and categorize for remediation planning",
          "query_patterns": [
            "SELECT * FROM c WHERE c.severity = @severity ORDER BY c.created_at DESC",
            "SELECT * FROM c WHERE c.severity IN ('high', 'critical') ORDER BY c.severity DESC, c.created_at DESC"
          ],
          "expected_improvement": "85% reduction in RU consumption for finding prioritization queries"
        }
      ]
    },
    "recommendations": {
      "current_partition_key": "/assessment_id",
      "proposed_indexes": [
        {
          "type": "composite",
          "name": "recommendations_by_priority_status",
          "paths": [
            {
              "path": "/priority",
              "order": "descending"
            },
            {
              "path": "/status",
              "order": "ascending"
            },
            {
              "path": "/due_date",
              "order": "ascending"
            }
          ],
          "purpose": "Track recommendation implementation progress and prioritization",
          "query_patterns": [
            "SELECT * FROM c WHERE c.status = 'pending' ORDER BY c.priority DESC, c.due_date ASC",
            "SELECT * FROM c WHERE c.priority = @priority AND c.status = @status"
          ],
          "expected_improvement": "80% reduction in RU consumption for recommendation tracking queries"
        }
      ]
    },
    "documents": {
      "current_partition_key": "/engagement_id",
      "proposed_indexes": [
        {
          "type": "composite",
          "name": "documents_by_type_uploaded",
          "paths": [
            {
              "path": "/content_type",
              "order": "ascending"
            },
            {
              "path": "/uploaded_at",
              "order": "descending"
            }
          ],
          "purpose": "Filter documents by type and show most recent uploads first",
          "query_patterns": [
            "SELECT * FROM c WHERE c.content_type = @type ORDER BY c.uploaded_at DESC",
            "SELECT * FROM c WHERE c.content_type IN (@type1, @type2) ORDER BY c.uploaded_at DESC"
          ],
          "expected_improvement": "75% reduction in RU consumption for document type filtering"
        },
        {
          "type": "single_field",
          "name": "documents_by_status",
          "path": "/processing_status",
          "purpose": "Track document processing pipeline status",
          "query_patterns": [
            "SELECT * FROM c WHERE c.processing_status = 'processing'",
            "SELECT COUNT(1) FROM c WHERE c.processing_status = 'failed'"
          ],
          "expected_improvement": "70% reduction in RU consumption for processing status queries"
        }
      ]
    },
    "runlogs": {
      "current_partition_key": "/assessment_id",
      "ttl_enabled": true,
      "ttl_seconds": 7776000,
      "proposed_indexes": [
        {
          "type": "composite",
          "name": "runlogs_by_level_timestamp",
          "paths": [
            {
              "path": "/level",
              "order": "ascending"
            },
            {
              "path": "/timestamp",
              "order": "descending"
            }
          ],
          "purpose": "Filter logs by severity level with most recent first",
          "query_patterns": [
            "SELECT * FROM c WHERE c.level = 'ERROR' ORDER BY c.timestamp DESC",
            "SELECT * FROM c WHERE c.level IN ('ERROR', 'WARN') ORDER BY c.timestamp DESC"
          ],
          "expected_improvement": "80% reduction in RU consumption for log analysis queries"
        }
      ]
    },
    "background_jobs": {
      "current_partition_key": "/created_by",
      "ttl_enabled": true,
      "proposed_indexes": [
        {
          "type": "composite",
          "name": "jobs_by_type_status",
          "paths": [
            {
              "path": "/job_type",
              "order": "ascending"
            },
            {
              "path": "/status",
              "order": "ascending"
            },
            {
              "path": "/created_at",
              "order": "descending"
            }
          ],
          "purpose": "Monitor and manage background job queues by type and status",
          "query_patterns": [
            "SELECT * FROM c WHERE c.job_type = @type AND c.status = 'running'",
            "SELECT * FROM c WHERE c.status = 'failed' ORDER BY c.created_at DESC"
          ],
          "expected_improvement": "85% reduction in RU consumption for job management queries"
        }
      ]
    },
    "audit_logs": {
      "current_partition_key": "/engagement_id",
      "ttl_enabled": true,
      "ttl_seconds": 220752000,
      "proposed_indexes": [
        {
          "type": "composite",
          "name": "audit_by_user_action",
          "paths": [
            {
              "path": "/user_email",
              "order": "ascending"
            },
            {
              "path": "/action_type",
              "order": "ascending"
            },
            {
              "path": "/timestamp",
              "order": "descending"
            }
          ],
          "purpose": "GDPR compliance and security auditing by user and action type",
          "query_patterns": [
            "SELECT * FROM c WHERE c.user_email = @user ORDER BY c.timestamp DESC",
            "SELECT * FROM c WHERE c.action_type = @action AND c.timestamp >= @start_date"
          ],
          "expected_improvement": "90% reduction in RU consumption for audit trail queries"
        },
        {
          "type": "composite",
          "name": "audit_by_resource_action",
          "paths": [
            {
              "path": "/resource_type",
              "order": "ascending"
            },
            {
              "path": "/resource_id",
              "order": "ascending"
            },
            {
              "path": "/timestamp",
              "order": "descending"
            }
          ],
          "purpose": "Track changes to specific resources for compliance reporting",
          "query_patterns": [
            "SELECT * FROM c WHERE c.resource_type = @type AND c.resource_id = @id ORDER BY c.timestamp DESC",
            "SELECT * FROM c WHERE c.resource_type = 'assessment' ORDER BY c.timestamp DESC"
          ],
          "expected_improvement": "85% reduction in RU consumption for resource audit queries"
        }
      ]
    },
    "embeddings": {
      "current_partition_key": "/engagement_id",
      "ttl_enabled": true,
      "ttl_seconds": 31536000,
      "proposed_indexes": [
        {
          "type": "composite",
          "name": "embeddings_by_document_chunk",
          "paths": [
            {
              "path": "/document_id",
              "order": "ascending"
            },
            {
              "path": "/chunk_index",
              "order": "ascending"
            }
          ],
          "purpose": "Efficiently retrieve text chunks for RAG operations",
          "query_patterns": [
            "SELECT * FROM c WHERE c.document_id = @doc_id ORDER BY c.chunk_index ASC",
            "SELECT * FROM c WHERE c.document_id IN (@doc1, @doc2) ORDER BY c.document_id ASC, c.chunk_index ASC"
          ],
          "expected_improvement": "90% reduction in RU consumption for RAG document retrieval"
        },
        {
          "type": "single_field",
          "name": "embeddings_by_status",
          "path": "/processing_status",
          "purpose": "Track embedding generation pipeline status",
          "query_patterns": [
            "SELECT * FROM c WHERE c.processing_status = 'pending'",
            "SELECT COUNT(1) FROM c WHERE c.processing_status = 'completed'"
          ],
          "expected_improvement": "75% reduction in RU consumption for embedding pipeline monitoring"
        }
      ],
      "include_exclude_paths": {
        "included_paths": [
          {
            "path": "/document_id/*"
          },
          {
            "path": "/chunk_index/*"
          },
          {
            "path": "/processing_status/*"
          },
          {
            "path": "/created_at/*"
          }
        ],
        "excluded_paths": [
          {
            "path": "/embedding_vector/*"
          },
          {
            "path": "/text_content/*"
          }
        ],
        "rationale": "Exclude large vector data and text content from indexing to minimize index size and improve performance"
      }
    }
  },
  "implementation_recommendations": {
    "deployment_strategy": {
      "phase_1": {
        "priority": "high",
        "containers": ["engagements", "assessments", "memberships"],
        "rationale": "Core business logic containers with highest query frequency"
      },
      "phase_2": {
        "priority": "medium",
        "containers": ["responses", "questions", "documents"],
        "rationale": "Assessment workflow containers with moderate query patterns"
      },
      "phase_3": {
        "priority": "low",
        "containers": ["findings", "recommendations", "runlogs", "audit_logs"],
        "rationale": "Reporting and compliance containers with lower query frequency"
      }
    },
    "monitoring_requirements": {
      "metrics_to_track": [
        "RU consumption per query type",
        "Query execution time percentiles",
        "Index utilization rates",
        "Storage overhead from indexes"
      ],
      "alerting_thresholds": {
        "high_ru_consumption": "> 100 RU per query",
        "slow_query_execution": "> 500ms",
        "low_index_utilization": "< 50%"
      }
    },
    "testing_approach": {
      "load_testing": "Execute representative query workloads against indexed containers",
      "performance_baseline": "Measure RU consumption and latency before index deployment",
      "validation_queries": "Verify query results remain consistent after index changes",
      "rollback_plan": "Maintain ability to disable indexes if performance degrades"
    }
  },
  "cost_benefit_analysis": {
    "estimated_benefits": {
      "average_ru_reduction": "75-85%",
      "query_latency_improvement": "60-80%",
      "monthly_cost_savings": "40-60% on query operations",
      "improved_user_experience": "Faster page loads and data retrieval"
    },
    "estimated_costs": {
      "storage_overhead": "10-15% increase for index storage",
      "write_operation_impact": "5-10% increase in RU for writes",
      "implementation_effort": "2-3 development days per phase"
    },
    "roi_timeline": "2-4 weeks to realize benefits after implementation"
  }
}