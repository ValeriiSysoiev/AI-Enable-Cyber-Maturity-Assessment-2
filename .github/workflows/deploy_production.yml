name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'  # GA releases (not RC)
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to deploy (tag, branch, or commit)'
        required: false
        default: 'main'

# OIDC permissions for Azure authentication
permissions:
  id-token: write
  contents: read

# Prevent multiple production deployments
concurrency:
  group: production-deployment
  cancel-in-progress: false

env:
  AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP_PRODUCTION }}
  WEB_APP_NAME: ${{ vars.WEB_APP_PRODUCTION }}
  API_CONTAINER_APP: ${{ vars.API_CONTAINER_APP_PRODUCTION }}
  AZURE_CONTAINER_REGISTRY: ${{ vars.AZURE_CONTAINER_REGISTRY_PRODUCTION }}

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      timeout-minutes: 5
      with:
        ref: ${{ github.event.inputs.ref || github.ref }}

    - name: Validate production environment variables
      timeout-minutes: 2
      run: |
        echo "Validating production deployment environment..."
        
        missing_vars=()
        
        if [ -z "${{ env.AZURE_RESOURCE_GROUP }}" ]; then
          missing_vars+=("AZURE_RESOURCE_GROUP_PRODUCTION")
        fi
        
        if [ -z "${{ env.WEB_APP_NAME }}" ]; then
          missing_vars+=("WEB_APP_PRODUCTION")
        fi
        
        # API deployment is optional - will skip if not configured
        if [ -z "${{ vars.VERIFY_API_BASE_URL_PROD }}" ]; then
          echo "ℹ️ VERIFY_API_BASE_URL_PROD not set - API deployment will be SKIPPED"
        fi
        
        if [ ${#missing_vars[@]} -ne 0 ]; then
          echo "❌ Missing required variables for production deployment:"
          printf '  - %s\n' "${missing_vars[@]}"
          echo ""
          echo "Please configure these variables in your GitHub production environment."
          exit 1
        fi
        
        echo "✅ Production environment validation complete"
        echo "🌐 Web App: ${{ env.WEB_APP_NAME }}"
        echo "🔗 API App: ${{ env.API_CONTAINER_APP }} ($([ -n \"${{ vars.VERIFY_API_BASE_URL_PROD }}\" ] && echo \"enabled\" || echo \"SKIPPED\"))"

    - name: Azure OIDC Login
      id: azure_login
      uses: azure/login@v2
      continue-on-error: true
      timeout-minutes: 5
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        
    - name: Validate Azure authentication
      timeout-minutes: 2
      run: |
        if az account show >/dev/null 2>&1; then
          echo "azure_auth_success=true" >> $GITHUB_OUTPUT
          echo "✅ Azure OIDC authentication successful"
          az account show --query "{subscription:name,tenantId:tenantId}" -o table
        else
          echo "❌ CRITICAL: Azure OIDC authentication failed for production deployment"
          echo ""
          echo "Production deployment requires Azure access. Check:"
          echo "  - AZURE_CLIENT_ID federated credential is configured correctly"
          echo "  - Service principal has Contributor permissions"  
          echo "  - All OIDC variables are correct"
          exit 1
        fi

    - name: Record current deployment state for rollback
      id: record_state
      if: steps.azure_login.outcome == 'success'
      timeout-minutes: 3
      run: |
        echo "Recording current production state for rollback..."
        
        # Get current Web App deployment info
        WEB_CURRENT_VERSION=$(az webapp show \
          --name ${{ env.WEB_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "defaultHostName" -o tsv 2>/dev/null || echo "unknown")
        echo "web_current_version=$WEB_CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current Web App: $WEB_CURRENT_VERSION"
        
        # Record API state if configured
        if [ -n "${{ vars.VERIFY_API_BASE_URL_PROD }}" ] && [ -n "${{ env.API_CONTAINER_APP }}" ]; then
          API_CURRENT_REVISION=$(az containerapp revision list \
            --name ${{ env.API_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "[?properties.active].name" \
            --output tsv | head -1 2>/dev/null || echo "unknown")
          echo "api_current_revision=$API_CURRENT_REVISION" >> $GITHUB_OUTPUT
          echo "Current API revision: $API_CURRENT_REVISION"
        else
          echo "API deployment skipped - no rollback needed"
        fi

    - name: Deploy Web App (App Service)
      id: deploy_web
      if: steps.azure_login.outcome == 'success'
      timeout-minutes: 15
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.WEB_APP_NAME }}
        package: './web'

    - name: Validate Web App deployment
      if: steps.deploy_web.outcome != 'skipped'
      timeout-minutes: 3
      run: |
        echo "Validating Web App deployment..."
        
        # Check deployment status
        WEB_STATUS=$(az webapp show \
          --name ${{ env.WEB_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "state" -o tsv 2>/dev/null || echo "Unknown")
        
        echo "Web App Status: $WEB_STATUS"
        
        if [ "$WEB_STATUS" = "Running" ]; then
          echo "web_deploy_success=true" >> $GITHUB_OUTPUT
          echo "✅ Web App deployment successful"
        else
          echo "web_deploy_success=false" >> $GITHUB_OUTPUT
          echo "❌ Web App deployment failed or not running"
          exit 1
        fi

    - name: Deploy API Container App (Optional)
      id: deploy_api
      if: steps.azure_login.outcome == 'success' && vars.VERIFY_API_BASE_URL_PROD != '' && vars.DEPLOY_API_PROD != 'false'
      timeout-minutes: 12
      run: |
        echo "API deployment is configured but Container Apps was not provisioned"
        echo "This step would deploy API if Container Apps environment was available"
        echo "For now, marking as skipped"
        echo "api_deploy_success=skipped" >> $GITHUB_OUTPUT

    - name: Wait for deployment stabilization
      if: steps.azure_login.outcome == 'success'
      timeout-minutes: 5
      run: |
        echo "Waiting for production deployment to stabilize..."
        sleep 60
        
        # Validate Web App health
        WEB_STATUS=$(az webapp show \
          --name ${{ env.WEB_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "state" -o tsv 2>/dev/null || echo "Unknown")
        
        echo "Final Web App Status: $WEB_STATUS"
        
        if [ "$WEB_STATUS" != "Running" ]; then
          echo "❌ Web App not in running state after stabilization"
          exit 1
        fi
        
        echo "✅ Production deployment stabilized successfully"

    - name: Get production URLs
      id: get_urls
      if: steps.azure_login.outcome == 'success'
      timeout-minutes: 2
      run: |
        echo "Retrieving production application URLs..."
        
        # Get Web App URL
        WEB_FQDN=$(az webapp show \
          --name ${{ env.WEB_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "defaultHostName" -o tsv 2>/dev/null || echo "")
        
        if [ -n "$WEB_FQDN" ]; then
          WEB_BASE_URL="https://$WEB_FQDN"
          echo "web_base_url=$WEB_BASE_URL" >> $GITHUB_OUTPUT
          echo "✅ Production Web URL: $WEB_BASE_URL"
        else
          echo "⚠️ Could not retrieve Web URL"
          echo "web_base_url=${{ vars.VERIFY_WEB_BASE_URL_PROD }}" >> $GITHUB_OUTPUT
        fi
        
        # API URL handling - use configured URL or mark as unavailable
        if [ -n "${{ vars.VERIFY_API_BASE_URL_PROD }}" ]; then
          echo "api_base_url=${{ vars.VERIFY_API_BASE_URL_PROD }}" >> $GITHUB_OUTPUT
          echo "ℹ️ API URL from configuration: ${{ vars.VERIFY_API_BASE_URL_PROD }}"
        else
          echo "api_base_url=" >> $GITHUB_OUTPUT
          echo "ℹ️ API deployment not configured"
        fi

    - name: Run production verification
      id: verify_production
      if: steps.azure_login.outcome == 'success'
      timeout-minutes: 12
      env:
        WEB_BASE_URL: ${{ steps.get_urls.outputs.web_base_url || vars.VERIFY_WEB_BASE_URL_PROD }}
        API_BASE_URL: ${{ steps.get_urls.outputs.api_base_url || '' }}
        AUTH_BEARER: ${{ vars.PRODUCTION_AUTH_BEARER || '' }}
        DEPLOYMENT_VERIFICATION: true
        GITHUB_SHA: ${{ github.sha }}
        DEPLOYMENT_ENVIRONMENT: production
      run: |
        echo "🔍 Running production deployment verification..."
        
        # Make verify script executable
        chmod +x scripts/verify_live.sh
        
        echo "🌐 WEB URL: $WEB_BASE_URL"
        if [ -n "$API_BASE_URL" ]; then
          echo "🔗 API URL: $API_BASE_URL"
        else
          echo "⏭️ API URL: Not configured (will be skipped in verification)"
        fi
        
        # Run verification with production context
        if ./scripts/verify_live.sh 2>&1 | tee production-verification.log; then
          echo "verification_success=true" >> $GITHUB_OUTPUT
          echo "✅ Production deployment verification PASSED"
        else
          echo "verification_success=false" >> $GITHUB_OUTPUT
          echo "❌ Production deployment verification FAILED"
          
          # Show verification output in job summary
          echo "## Production Deployment Verification Failed" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          tail -50 production-verification.log >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          
          exit 1
        fi

    - name: Rollback on deployment failure
      if: failure() && steps.azure_login.outcome == 'success'
      timeout-minutes: 8
      run: |
        echo "🔄 Production deployment failed - attempting rollback..."
        
        ROLLBACK_NEEDED=false
        
        # Web App rollback (if deployment was attempted)
        if [ "${{ steps.deploy_web.outcome }}" != "skipped" ] && [ -n "${{ steps.record_state.outputs.web_current_version }}" ]; then
          echo "Rolling back Web App to previous state..."
          # Note: For App Service, we would typically redeploy previous version
          # This is a placeholder for the rollback logic
          echo "⚠️ Web App rollback requires manual intervention or slot swap"
          ROLLBACK_NEEDED=true
        fi
        
        # API rollback (if applicable)
        if [ "${{ steps.deploy_api.outputs.api_deploy_success }}" = "true" ] && [ -n "${{ steps.record_state.outputs.api_current_revision }}" ]; then
          echo "Rolling back API to revision: ${{ steps.record_state.outputs.api_current_revision }}"
          az containerapp revision activate \
            --name ${{ env.API_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --revision ${{ steps.record_state.outputs.api_current_revision }}
        fi
        
        if [ "$ROLLBACK_NEEDED" = "true" ]; then
          echo "❌ CRITICAL: Production deployment failed and requires manual rollback intervention"
          echo "Contact operations team immediately"
        fi
        
        exit 1  # Fail the job to indicate production deployment failure

    - name: Generate production deployment summary
      if: always()
      timeout-minutes: 3
      run: |
        echo "📋 Generating production deployment summary..."
        
        DEPLOY_STATUS="${{ job.status }}"
        WEB_URL="${{ steps.get_urls.outputs.web_base_url || vars.VERIFY_WEB_BASE_URL_PROD }}"
        API_URL="${{ steps.get_urls.outputs.api_base_url || 'Not configured' }}"
        
        cat > production-deployment-summary.md << EOF
        # 🚀 Production Deployment Summary
        
        **Status:** $DEPLOY_STATUS
        **Tag/Ref:** ${{ github.ref_name || github.event.inputs.ref }}
        **Commit:** ${{ github.sha }}
        **Timestamp:** $(date -u)
        
        ## Deployment Results
        - **Web App:** ${{ env.WEB_APP_NAME }}
        - **API App:** ${{ env.API_CONTAINER_APP }} ($([ -n "${{ vars.VERIFY_API_BASE_URL_PROD }}" ] && echo "configured" || echo "SKIPPED"))
        - **Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}
        - **Environment:** production
        
        ## Application URLs
        - **Web Application:** $WEB_URL
        - **API Endpoint:** $API_URL
        
        ## Verification Results
        - **Authentication:** ✅ Azure OIDC successful
        - **Web Deployment:** ${{ steps.deploy_web.outcome == 'success' && '✅ Successful' || steps.deploy_web.outcome == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}
        - **API Deployment:** ${{ steps.deploy_api.outcome == 'success' && '✅ Successful' || steps.deploy_api.outcome == 'skipped' && '⏭️ Skipped' || '❌ Failed or N/A' }}
        - **Verification:** ${{ steps.verify_production.outputs.verification_success == 'true' && '✅ Passed' || '❌ Failed' }}
        
        ## Production Status
        **Overall:** $([ "$DEPLOY_STATUS" = "success" ] && echo "✅ PRODUCTION DEPLOYMENT SUCCESSFUL" || echo "❌ PRODUCTION DEPLOYMENT FAILED")
        
        EOF
        
        cat production-deployment-summary.md >> $GITHUB_STEP_SUMMARY

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      if: always()
      timeout-minutes: 3
      with:
        name: production-deployment-logs-${{ github.run_id }}
        path: |
          production-verification.log
          production-deployment-summary.md
        retention-days: 30

    - name: Tag successful production deployment
      if: success()
      timeout-minutes: 2
      run: |
        echo "🏷️ Tagging successful production deployment..."
        
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        PRODUCTION_TAG="production-deploy-$(date +%Y%m%d-%H%M%S)"
        git tag -a "$PRODUCTION_TAG" -m "Production deployment $PRODUCTION_TAG - commit ${{ github.sha }}"
        
        echo "✅ Created production tag: $PRODUCTION_TAG"
        echo "production_tag=$PRODUCTION_TAG" >> $GITHUB_OUTPUT

    - name: Log final production status
      if: always()
      timeout-minutes: 1
      run: |
        echo "📋 Final Production Deployment Status:"
        echo ""
        echo "Infrastructure:"
        echo "- Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        echo "- Web App: ${{ env.WEB_APP_NAME }}"
        echo "- API App: ${{ env.API_CONTAINER_APP }} ($([ -n "${{ vars.VERIFY_API_BASE_URL_PROD }}" ] && echo "configured" || echo "SKIPPED"))"
        echo ""
        echo "URLs:"
        echo "- Web: ${{ steps.get_urls.outputs.web_base_url || vars.VERIFY_WEB_BASE_URL_PROD }}"
        echo "- API: ${{ steps.get_urls.outputs.api_base_url || 'Not configured' }}"
        echo ""
        echo "🎯 Production Deployment: $([ "${{ job.status }}" = "success" ] && echo "✅ SUCCESSFUL" || echo "❌ FAILED")"