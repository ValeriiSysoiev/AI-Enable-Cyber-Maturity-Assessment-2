name: Security Scanning and Auto-Remediation

on:
  schedule:
    # Daily security scans at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      enable_auto_remediation:
        description: 'Enable automatic remediation of safe issues'
        required: false
        default: 'true'
        type: boolean
      scan_depth:
        description: 'Scanning depth (basic, full, comprehensive)'
        required: false
        default: 'full'
        type: choice
        options:
        - basic
        - full
        - comprehensive

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

permissions:
  contents: write
  security-events: write
  actions: read
  pull-requests: write
  issues: write

jobs:
  # Static Application Security Testing
  sast-scan:
    name: SAST Security Analysis
    runs-on: ubuntu-latest
    outputs:
      semgrep-findings: ${{ steps.semgrep.outputs.findings }}
      security-score: ${{ steps.security-score.outputs.score }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install security scanning tools
        run: |
          pip install semgrep bandit safety
          npm install -g @microsoft/eslint-plugin-sdl

      - name: Run Semgrep SAST
        id: semgrep
        run: |
          # Create custom semgrep config
          mkdir -p .semgrep
          
          # Run semgrep with custom rules and baseline
          semgrep --config=auto \
                  --config=security/rules/ \
                  --json \
                  --output=semgrep-results.json \
                  --severity=ERROR \
                  --severity=WARNING \
                  --exclude="web/node_modules/" \
                  --exclude="**/*.test.*" \
                  --exclude="**/test_*" \
                  || true
          
          # Process results
          findings=$(jq '.results | length' semgrep-results.json)
          echo "findings=${findings}" >> $GITHUB_OUTPUT
          
          # Generate SARIF for GitHub Security tab
          semgrep --config=auto \
                  --sarif \
                  --output=semgrep.sarif \
                  --exclude="web/node_modules/" \
                  || true

      - name: Run Bandit Python security analysis
        run: |
          bandit -r app/ \
                 -f json \
                 -o bandit-results.json \
                 --exclude="*/test_*,*/tests/*" \
                 -ll || true

      - name: Run ESLint Security Plugin
        working-directory: web
        run: |
          npm ci
          npx eslint . \
               --ext .ts,.tsx,.js,.jsx \
               --format json \
               --output-file ../eslint-security.json \
               --plugin @microsoft/sdl \
               || true

      - name: Calculate Security Score
        id: security-score
        run: |
          python3 -c "
          import json
          import sys
          
          # Load scan results
          try:
              with open('semgrep-results.json') as f:
                  semgrep = json.load(f)
              with open('bandit-results.json') as f:
                  bandit = json.load(f)
              with open('eslint-security.json') as f:
                  eslint = json.load(f)
          except:
              semgrep = {'results': []}
              bandit = {'results': []}
              eslint = []
          
          # Calculate weighted score
          critical = len([r for r in semgrep.get('results', []) if r.get('extra', {}).get('severity') == 'ERROR'])
          high = len([r for r in semgrep.get('results', []) if r.get('extra', {}).get('severity') == 'WARNING'])
          medium = len(bandit.get('results', []))
          low = len(eslint)
          
          # Security score (0-100, higher is better)
          score = max(0, 100 - (critical * 20 + high * 10 + medium * 5 + low * 2))
          
          print(f'Security Score: {score}/100')
          print(f'Critical: {critical}, High: {high}, Medium: {medium}, Low: {low}')
          print(f'score={score}', file=open('$GITHUB_OUTPUT', 'a'))
          "

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: Upload security scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-results
          path: |
            semgrep-results.json
            bandit-results.json
            eslint-security.json
          retention-days: 30

  # Secret Detection
  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    outputs:
      secrets-found: ${{ steps.gitleaks.outputs.secrets-found }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Gitleaks
        run: |
          wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks.tar.gz
          chmod +x gitleaks

      - name: Run Gitleaks
        id: gitleaks
        run: |
          ./gitleaks detect \
                    --source . \
                    --report-format json \
                    --report-path gitleaks-results.json \
                    --verbose \
                    --no-git || true
          
          secrets_found=$(jq '. | length' gitleaks-results.json)
          echo "secrets-found=${secrets_found}" >> $GITHUB_OUTPUT
          
          if [ "$secrets_found" -gt 0 ]; then
            echo "::warning::Found $secrets_found potential secrets"
            jq -r '.[] | "::warning file=\(.File),line=\(.StartLine)::\(.Description)"' gitleaks-results.json
          fi

      - name: Upload secrets scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secrets-results
          path: gitleaks-results.json
          retention-days: 30

  # Container and Dependency Scanning
  vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest
    outputs:
      vulnerabilities-found: ${{ steps.summary.outputs.vulnerabilities-found }}
      critical-vulns: ${{ steps.summary.outputs.critical-vulns }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Install audit tools
        run: |
          pip install pip-audit
          npm install -g npm-audit-resolver

      - name: Trivy filesystem scan
        run: |
          trivy fs . \
                --format json \
                --output trivy-fs-results.json \
                --severity CRITICAL,HIGH,MEDIUM \
                --ignore-unfixed || true

      - name: Python dependency audit
        run: |
          pip install -r app/requirements.txt
          pip-audit \
                --format=json \
                --output=pip-audit-results.json \
                --desc || true

      - name: Node.js dependency audit
        working-directory: web
        run: |
          npm ci
          npm audit \
                --audit-level=moderate \
                --json > ../npm-audit-results.json || true

      - name: Trivy container image scan
        run: |
          # Build images for scanning
          docker build -t api-image:latest ./app/
          docker build -t web-image:latest ./web/
          
          # Scan API container
          trivy image \
                --format json \
                --output trivy-api-results.json \
                --severity CRITICAL,HIGH \
                api-image:latest || true
          
          # Scan Web container
          trivy image \
                --format json \
                --output trivy-web-results.json \
                --severity CRITICAL,HIGH \
                web-image:latest || true

      - name: Summarize vulnerability findings
        id: summary
        run: |
          python3 -c "
          import json
          import sys
          
          def count_vulns(file_path, key_path=None):
              try:
                  with open(file_path) as f:
                      data = json.load(f)
                  if key_path:
                      for key in key_path.split('.'):
                          data = data.get(key, {})
                  if isinstance(data, list):
                      return len(data)
                  return data.get('vulnerabilities', 0) if isinstance(data, dict) else 0
              except:
                  return 0
          
          # Count vulnerabilities from all sources
          trivy_fs = count_vulns('trivy-fs-results.json')
          pip_audit = count_vulns('pip-audit-results.json')
          npm_audit = count_vulns('npm-audit-results.json', 'vulnerabilities')
          trivy_api = count_vulns('trivy-api-results.json')
          trivy_web = count_vulns('trivy-web-results.json')
          
          total_vulns = trivy_fs + pip_audit + npm_audit + trivy_api + trivy_web
          
          # Count critical vulnerabilities
          critical_vulns = 0
          for file_path in ['trivy-fs-results.json', 'trivy-api-results.json', 'trivy-web-results.json']:
              try:
                  with open(file_path) as f:
                      data = json.load(f)
                  for result in data.get('Results', []):
                      for vuln in result.get('Vulnerabilities', []):
                          if vuln.get('Severity') == 'CRITICAL':
                              critical_vulns += 1
              except:
                  pass
          
          print(f'Total vulnerabilities: {total_vulns}')
          print(f'Critical vulnerabilities: {critical_vulns}')
          print(f'vulnerabilities-found={total_vulns}', file=open('$GITHUB_OUTPUT', 'a'))
          print(f'critical-vulns={critical_vulns}', file=open('$GITHUB_OUTPUT', 'a'))
          "

      - name: Upload vulnerability scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-results
          path: |
            trivy-*.json
            pip-audit-results.json
            npm-audit-results.json
          retention-days: 30

  # Infrastructure Security Scanning
  infrastructure-scan:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    outputs:
      infra-issues: ${{ steps.infra-scan.outputs.issues }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install infrastructure scanning tools
        run: |
          # Install tfsec
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          
          # Install checkov
          pip install checkov

      - name: Run tfsec on Terraform
        id: tfsec
        run: |
          if [ -d "infra" ]; then
            tfsec infra/ \
                  --format json \
                  --out tfsec-results.json \
                  --soft-fail || true
          else
            echo '[]' > tfsec-results.json
          fi

      - name: Run Checkov on Infrastructure
        run: |
          checkov -d . \
                  --framework terraform,dockerfile,kubernetes \
                  --output json \
                  --output-file checkov-results.json \
                  --quiet || true

      - name: Summarize infrastructure issues
        id: infra-scan
        run: |
          python3 -c "
          import json
          
          def count_issues(file_path, key=None):
              try:
                  with open(file_path) as f:
                      data = json.load(f)
                  if key:
                      return len(data.get(key, []))
                  return len(data) if isinstance(data, list) else 0
              except:
                  return 0
          
          tfsec_issues = count_issues('tfsec-results.json', 'results')
          checkov_issues = count_issues('checkov-results.json', 'failed_checks')
          
          total_issues = tfsec_issues + checkov_issues
          print(f'Infrastructure issues: {total_issues}')
          print(f'issues={total_issues}', file=open('$GITHUB_OUTPUT', 'a'))
          "

      - name: Upload infrastructure scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-results
          path: |
            tfsec-results.json
            checkov-results.json
          retention-days: 30

  # Auto-Remediation Job
  auto-remediation:
    name: Automated Security Remediation
    runs-on: ubuntu-latest
    needs: [sast-scan, secrets-scan, vulnerability-scan, infrastructure-scan]
    if: |
      github.event_name != 'pull_request' && 
      (github.event.inputs.enable_auto_remediation == 'true' || github.event.inputs.enable_auto_remediation == '') &&
      needs.vulnerability-scan.outputs.critical-vulns == '0' &&
      needs.secrets-scan.outputs.secrets-found == '0'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          path: scan-results/

      - name: Install remediation dependencies
        run: |
          pip install requests pyyaml jinja2 packaging

      - name: Run auto-remediation
        id: remediation
        run: |
          # Create remediation script directory
          mkdir -p scripts/security
          
          # Run the auto-remediation orchestrator
          python3 scripts/security/auto_remediate.py \
                    --scan-results=scan-results/ \
                    --mode=auto_safe \
                    --commit-changes=true \
                    --output=remediation-report.json

      - name: Create remediation summary
        run: |
          if [ -f "remediation-report.json" ]; then
            python3 -c "
            import json
            
            with open('remediation-report.json') as f:
                report = json.load(f)
            
            print('## 🔒 Automated Security Remediation Report')
            print(f'**Status**: {report.get(\"status\", \"Unknown\")}')
            print(f'**Safe fixes applied**: {report.get(\"safe_fixes_applied\", 0)}')
            print(f'**Risky issues requiring manual review**: {report.get(\"risky_issues_found\", 0)}')
            print()
            
            if report.get('fixes_applied'):
                print('### ✅ Applied Fixes:')
                for fix in report['fixes_applied']:
                    print(f'- {fix.get(\"description\", \"Unknown fix\")} ({fix.get(\"type\", \"generic\")})')
                print()
            
            if report.get('manual_review_required'):
                print('### ⚠️ Manual Review Required:')
                for issue in report['manual_review_required']:
                    print(f'- {issue.get(\"description\", \"Unknown issue\")} (Risk: {issue.get(\"risk_level\", \"Unknown\")})')
            " > remediation-summary.md
          fi

      - name: Commit auto-remediation changes
        if: success()
        run: |
          git config --local user.email "security-bot@github.com"
          git config --local user.name "Security Auto-Remediation Bot"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "🔒 Auto-remediation: Apply safe security fixes

            - Automated security improvements applied
            - Low-risk dependency updates
            - Configuration hardening
            - See remediation-report.json for details
            
            Generated by Security Auto-Remediation System"
            
            git push origin ${{ github.ref_name }}
          fi

      - name: Upload remediation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: remediation-report
          path: |
            remediation-report.json
            remediation-summary.md
          retention-days: 90

  # Security Summary and Reporting
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast-scan, secrets-scan, vulnerability-scan, infrastructure-scan]
    if: always()
    steps:
      - name: Generate Security Summary
        run: |
          cat << 'EOF' > security-summary.md
          # 🔒 Security Scan Summary
          
          **Scan Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Branch**: ${{ github.ref_name }}
          **Commit**: ${{ github.sha }}
          
          ## 📊 Security Score
          **Overall Score**: ${{ needs.sast-scan.outputs.security-score }}/100
          
          ## 🔍 Scan Results
          
          | Category | Status | Findings |
          |----------|--------|----------|
          | Static Analysis (SAST) | ${{ needs.sast-scan.result }} | ${{ needs.sast-scan.outputs.semgrep-findings }} issues |
          | Secret Detection | ${{ needs.secrets-scan.result }} | ${{ needs.secrets-scan.outputs.secrets-found }} secrets |
          | Vulnerabilities | ${{ needs.vulnerability-scan.result }} | ${{ needs.vulnerability-scan.outputs.vulnerabilities-found }} vulnerabilities |
          | Infrastructure | ${{ needs.infrastructure-scan.result }} | ${{ needs.infrastructure-scan.outputs.infra-issues }} issues |
          
          ## 🚨 Critical Issues
          
          **Critical Vulnerabilities**: ${{ needs.vulnerability-scan.outputs.critical-vulns }}
          **Secrets Found**: ${{ needs.secrets-scan.outputs.secrets-found }}
          
          EOF
          
          # Add recommendations based on findings
          if [ "${{ needs.vulnerability-scan.outputs.critical-vulns }}" -gt 0 ] || [ "${{ needs.secrets-scan.outputs.secrets-found }}" -gt 0 ]; then
            echo "## ⚠️ Immediate Action Required" >> security-summary.md
            echo "" >> security-summary.md
            echo "Critical security issues detected that require immediate attention:" >> security-summary.md
            echo "" >> security-summary.md
            
            if [ "${{ needs.vulnerability-scan.outputs.critical-vulns }}" -gt 0 ]; then
              echo "- **Critical Vulnerabilities**: Review and patch critical vulnerabilities immediately" >> security-summary.md
            fi
            
            if [ "${{ needs.secrets-scan.outputs.secrets-found }}" -gt 0 ]; then
              echo "- **Exposed Secrets**: Rotate any exposed credentials and remove from code" >> security-summary.md
            fi
          fi

      - name: Create GitHub Issue for Critical Findings
        if: needs.vulnerability-scan.outputs.critical-vulns > 0 || needs.secrets-scan.outputs.secrets-found > 0
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Critical Security Issues Detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            # Critical Security Issues Detected
            
            **Branch**: ${{ github.ref_name }}
            **Commit**: ${{ github.sha }}
            **Scan Date**: ${new Date().toISOString()}
            
            ## Summary
            - Critical Vulnerabilities: ${{ needs.vulnerability-scan.outputs.critical-vulns }}
            - Exposed Secrets: ${{ needs.secrets-scan.outputs.secrets-found }}
            
            ## Required Actions
            1. Review scan results in the Actions tab
            2. Address critical vulnerabilities immediately
            3. Rotate any exposed credentials
            4. Re-run security scan after fixes
            
            This issue was automatically created by the Security Scanning workflow.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical', 'automated']
            });

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90