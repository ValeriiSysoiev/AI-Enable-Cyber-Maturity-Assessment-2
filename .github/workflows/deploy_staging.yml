name: Deploy to Staging

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if CI checks fail'
        required: false
        default: false
        type: boolean
      skip_verification:
        description: 'Skip post-deployment verification'
        required: false
        default: false
        type: boolean

# OIDC permissions for Azure authentication
permissions:
  id-token: write
  contents: read
  actions: read
  security-events: write

# Global environment variables
env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  REGISTRY_NAME: ghcr.io
  IMAGE_TAG: staging-${{ github.sha }}

jobs:
  # Pre-deployment validation
  validate-prerequisites:
    runs-on: ubuntu-latest
    environment: staging-validation
    outputs:
      deployment_allowed: ${{ steps.checks.outputs.deployment_allowed }}
      ci_status: ${{ steps.checks.outputs.ci_status }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check CI status
      id: checks
      run: |
        echo "🔍 Validating deployment prerequisites..."
        
        # Check if force deployment is requested
        if [[ "${{ inputs.force_deploy }}" == "true" ]]; then
          echo "⚠️ Force deployment requested - skipping CI checks"
          echo "deployment_allowed=true" >> $GITHUB_OUTPUT
          echo "ci_status=forced" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Check latest CI run status
        echo "Checking CI status for commit ${{ github.sha }}..."
        
        # Use GitHub CLI to check workflow status
        gh auth status
        CI_STATUS=$(gh run list --workflow=ci.yml --limit=1 --json conclusion --jq '.[0].conclusion')
        
        echo "CI Status: $CI_STATUS"
        
        if [[ "$CI_STATUS" == "success" ]]; then
          echo "✅ CI checks passed"
          echo "deployment_allowed=true" >> $GITHUB_OUTPUT
          echo "ci_status=success" >> $GITHUB_OUTPUT
        elif [[ "$CI_STATUS" == "failure" ]]; then
          echo "❌ CI checks failed"
          echo "deployment_allowed=false" >> $GITHUB_OUTPUT
          echo "ci_status=failure" >> $GITHUB_OUTPUT
        else
          echo "⚠️ CI status unclear: $CI_STATUS"
          echo "deployment_allowed=false" >> $GITHUB_OUTPUT
          echo "ci_status=unclear" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Security scan
      run: |
        echo "🔒 Running pre-deployment security scan..."
        
        # Install security scanning tools
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Scan for vulnerabilities (non-blocking for staging)
        echo "Scanning for vulnerabilities..."
        grype . --fail-on medium --output table || {
          echo "⚠️ Vulnerabilities found - proceeding with staging deployment"
          echo "Note: Address vulnerabilities before production deployment"
        }
        
        echo "✅ Security scan completed"

  # Build and push container images
  build-images:
    needs: validate-prerequisites
    runs-on: ubuntu-latest
    if: ${{ needs.validate-prerequisites.outputs.deployment_allowed == 'true' }}
    environment: staging-build
    
    outputs:
      api_image: ${{ steps.images.outputs.api_image }}
      web_image: ${{ steps.images.outputs.web_image }}
      mcp_image: ${{ steps.images.outputs.mcp_image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_NAME }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        push: true
        tags: |
          ${{ env.REGISTRY_NAME }}/${{ github.repository }}/api:${{ env.IMAGE_TAG }}
          ${{ env.REGISTRY_NAME }}/${{ github.repository }}/api:staging-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: ./web
        push: true
        tags: |
          ${{ env.REGISTRY_NAME }}/${{ github.repository }}/web:${{ env.IMAGE_TAG }}
          ${{ env.REGISTRY_NAME }}/${{ github.repository }}/web:staging-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build and push MCP Gateway image
      uses: docker/build-push-action@v5
      with:
        context: ./mcp_gateway
        push: true
        tags: |
          ${{ env.REGISTRY_NAME }}/${{ github.repository }}/mcp:${{ env.IMAGE_TAG }}
          ${{ env.REGISTRY_NAME }}/${{ github.repository }}/mcp:staging-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Set image outputs
      id: images
      run: |
        echo "api_image=${{ env.REGISTRY_NAME }}/${{ github.repository }}/api:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
        echo "web_image=${{ env.REGISTRY_NAME }}/${{ github.repository }}/web:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
        echo "mcp_image=${{ env.REGISTRY_NAME }}/${{ github.repository }}/mcp:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  # Deploy to staging environment
  deploy-staging:
    needs: [validate-prerequisites, build-images]
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: ${{ vars.STAGING_URL }}
    
    outputs:
      deployment_id: ${{ steps.deploy.outputs.deployment_id }}
      api_url: ${{ steps.deploy.outputs.api_url }}
      web_url: ${{ steps.deploy.outputs.web_url }}
      mcp_url: ${{ steps.deploy.outputs.mcp_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login (OIDC)
      uses: azure/login@v1
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Validate Azure resources
      run: |
        echo "🔍 Validating Azure staging environment..."
        
        # Check required variables
        missing_vars=()
        
        if [[ -z "${{ vars.ACA_RG }}" ]]; then
          missing_vars+=("ACA_RG")
        fi
        
        if [[ -z "${{ vars.ACA_ENV }}" ]]; then
          missing_vars+=("ACA_ENV")
        fi
        
        if [[ -z "${{ vars.ACA_APP_API }}" ]]; then
          missing_vars+=("ACA_APP_API")
        fi
        
        if [[ -z "${{ vars.ACA_APP_WEB }}" ]]; then
          missing_vars+=("ACA_APP_WEB")
        fi
        
        if [[ -z "${{ vars.ACA_APP_MCP }}" ]]; then
          missing_vars+=("ACA_APP_MCP")
        fi
        
        if [[ ${#missing_vars[@]} -ne 0 ]]; then
          echo "❌ Missing required staging environment variables:"
          printf '  - %s\n' "${missing_vars[@]}"
          echo ""
          echo "Please configure these variables in GitHub repository settings."
          echo "Refer to docs/staging-env.md for configuration details."
          exit 1
        fi
        
        # Verify Azure resources exist
        echo "Verifying resource group: ${{ vars.ACA_RG }}"
        if ! az group show --name "${{ vars.ACA_RG }}" >/dev/null 2>&1; then
          echo "❌ Resource group ${{ vars.ACA_RG }} not found"
          exit 1
        fi
        
        echo "Verifying Container Apps Environment: ${{ vars.ACA_ENV }}"
        if ! az containerapp env show --name "${{ vars.ACA_ENV }}" --resource-group "${{ vars.ACA_RG }}" >/dev/null 2>&1; then
          echo "❌ Container Apps Environment ${{ vars.ACA_ENV }} not found"
          exit 1
        fi
        
        echo "✅ Azure staging environment validation passed"

    - name: Deploy API Container App
      id: deploy_api
      run: |
        echo "🚀 Deploying API to staging..."
        
        # Update API container app
        az containerapp update \
          --name "${{ vars.ACA_APP_API }}" \
          --resource-group "${{ vars.ACA_RG }}" \
          --image "${{ needs.build-images.outputs.api_image }}" \
          --set-env-vars \
            STAGING_ENV=true \
            DEPLOYMENT_VERSION="${{ env.IMAGE_TAG }}" \
            DEPLOYMENT_TIMESTAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        # Get the app URL
        API_FQDN=$(az containerapp show \
          --name "${{ vars.ACA_APP_API }}" \
          --resource-group "${{ vars.ACA_RG }}" \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        
        API_URL="https://$API_FQDN"
        echo "API deployed to: $API_URL"
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT

    - name: Deploy Web Container App
      id: deploy_web
      run: |
        echo "🚀 Deploying Web to staging..."
        
        # Update Web container app
        az containerapp update \
          --name "${{ vars.ACA_APP_WEB }}" \
          --resource-group "${{ vars.ACA_RG }}" \
          --image "${{ needs.build-images.outputs.web_image }}" \
          --set-env-vars \
            NEXT_PUBLIC_API_URL="${{ steps.deploy_api.outputs.api_url }}" \
            STAGING_ENV=true \
            DEPLOYMENT_VERSION="${{ env.IMAGE_TAG }}" \
            DEPLOYMENT_TIMESTAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        # Get the app URL
        WEB_FQDN=$(az containerapp show \
          --name "${{ vars.ACA_APP_WEB }}" \
          --resource-group "${{ vars.ACA_RG }}" \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        
        WEB_URL="https://$WEB_FQDN"
        echo "Web deployed to: $WEB_URL"
        echo "web_url=$WEB_URL" >> $GITHUB_OUTPUT

    - name: Deploy MCP Gateway Container App
      id: deploy_mcp
      run: |
        echo "🚀 Deploying MCP Gateway to staging..."
        
        # Update MCP Gateway container app
        az containerapp update \
          --name "${{ vars.ACA_APP_MCP }}" \
          --resource-group "${{ vars.ACA_RG }}" \
          --image "${{ needs.build-images.outputs.mcp_image }}" \
          --set-env-vars \
            MCP_ENABLED=true \
            STAGING_ENV=true \
            DEPLOYMENT_VERSION="${{ env.IMAGE_TAG }}" \
            DEPLOYMENT_TIMESTAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        # Get the app URL
        MCP_FQDN=$(az containerapp show \
          --name "${{ vars.ACA_APP_MCP }}" \
          --resource-group "${{ vars.ACA_RG }}" \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        
        MCP_URL="https://$MCP_FQDN"
        echo "MCP Gateway deployed to: $MCP_URL"
        echo "mcp_url=$MCP_URL" >> $GITHUB_OUTPUT

    - name: Set deployment outputs
      id: deploy
      run: |
        DEPLOYMENT_ID="staging-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
        echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
        echo "api_url=${{ steps.deploy_api.outputs.api_url }}" >> $GITHUB_OUTPUT
        echo "web_url=${{ steps.deploy_web.outputs.web_url }}" >> $GITHUB_OUTPUT
        echo "mcp_url=${{ steps.deploy_mcp.outputs.mcp_url }}" >> $GITHUB_OUTPUT
        
        echo "✅ Staging deployment completed: $DEPLOYMENT_ID"

    - name: Wait for deployment stabilization
      run: |
        echo "⏳ Waiting for deployment to stabilize..."
        sleep 60
        
        # Check deployment status
        API_STATUS=$(az containerapp revision list \
          --name "${{ vars.ACA_APP_API }}" \
          --resource-group "${{ vars.ACA_RG }}" \
          --query "[0].properties.provisioningState" \
          --output tsv)
        
        WEB_STATUS=$(az containerapp revision list \
          --name "${{ vars.ACA_APP_WEB }}" \
          --resource-group "${{ vars.ACA_RG }}" \
          --query "[0].properties.provisioningState" \
          --output tsv)
        
        MCP_STATUS=$(az containerapp revision list \
          --name "${{ vars.ACA_APP_MCP }}" \
          --resource-group "${{ vars.ACA_RG }}" \
          --query "[0].properties.provisioningState" \
          --output tsv)
        
        echo "Deployment status:"
        echo "  API: $API_STATUS"
        echo "  Web: $WEB_STATUS" 
        echo "  MCP: $MCP_STATUS"
        
        if [[ "$API_STATUS" != "Succeeded" ]] || [[ "$WEB_STATUS" != "Succeeded" ]] || [[ "$MCP_STATUS" != "Succeeded" ]]; then
          echo "❌ One or more services failed to deploy successfully"
          exit 1
        fi
        
        echo "✅ All services deployed successfully"

  # Post-deployment verification
  verify-deployment:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_verification }}
    environment: staging-verification
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install verification dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-asyncio requests

    - name: Run health checks
      run: |
        echo "🏥 Running comprehensive health checks..."
        
        # Test API health
        echo "Testing API health: ${{ needs.deploy-staging.outputs.api_url }}"
        curl -f -s "${{ needs.deploy-staging.outputs.api_url }}/health" | jq .
        
        # Test Web accessibility
        echo "Testing Web accessibility: ${{ needs.deploy-staging.outputs.web_url }}"
        curl -f -s "${{ needs.deploy-staging.outputs.web_url }}" > /dev/null
        
        # Test MCP Gateway health
        echo "Testing MCP Gateway health: ${{ needs.deploy-staging.outputs.mcp_url }}"
        curl -f -s "${{ needs.deploy-staging.outputs.mcp_url }}/health" | jq .
        
        echo "✅ All health checks passed"

    - name: Run staging verification script
      run: |
        echo "🔍 Running staging verification suite..."
        
        # Set environment variables for verification
        export STAGING_URL="${{ needs.deploy-staging.outputs.web_url }}"
        export API_BASE_URL="${{ needs.deploy-staging.outputs.api_url }}"
        export MCP_GATEWAY_URL="${{ needs.deploy-staging.outputs.mcp_url }}"
        export DEPLOYMENT_VERIFICATION=true
        export GITHUB_SHA="${{ github.sha }}"
        
        # Run verification script
        chmod +x scripts/verify_live.sh
        ./scripts/verify_live.sh --staging
        
        echo "✅ Staging verification completed"

    - name: Test ABAC enforcement
      run: |
        echo "🔐 Testing ABAC authorization enforcement..."
        
        # Set up test environment
        export API_BASE_URL="${{ needs.deploy-staging.outputs.api_url }}"
        export STAGING_TEST_MODE=true
        
        # Run ABAC tests
        if [[ -f "scripts/test_abac_staging.sh" ]]; then
          chmod +x scripts/test_abac_staging.sh
          ./scripts/test_abac_staging.sh
        else
          echo "⚠️ ABAC test script not found - skipping ABAC tests"
        fi
        
        echo "✅ ABAC enforcement tests completed"

    - name: Test MCP tools integration
      run: |
        echo "🔧 Testing MCP tools integration..."
        
        # Set up MCP test environment
        export MCP_GATEWAY_URL="${{ needs.deploy-staging.outputs.mcp_url }}"
        export MCP_TEST_MODE=true
        
        # Run MCP integration tests
        if [[ -f "scripts/test_mcp_tools.sh" ]]; then
          chmod +x scripts/test_mcp_tools.sh
          ./scripts/test_mcp_tools.sh --staging
        else
          echo "⚠️ MCP test script not found - skipping MCP tests"
        fi
        
        echo "✅ MCP tools integration tests completed"

  # Generate deployment report
  deployment-report:
    needs: [validate-prerequisites, build-images, deploy-staging, verify-deployment]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate deployment summary
      run: |
        echo "📊 Generating deployment report..."
        
        # Create comprehensive deployment report
        cat > deployment-report.md << EOF
        # 🚀 Staging Deployment Report
        
        **Deployment ID:** ${{ needs.deploy-staging.outputs.deployment_id || 'N/A' }}
        **Status:** ${{ job.status }}
        **Commit:** ${{ github.sha }}
        **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Triggered by:** ${{ github.actor }}
        
        ## Prerequisites Validation
        - **CI Status:** ${{ needs.validate-prerequisites.outputs.ci_status || 'N/A' }}
        - **Deployment Allowed:** ${{ needs.validate-prerequisites.outputs.deployment_allowed || 'N/A' }}
        - **Security Scan:** ✅ Completed
        
        ## Container Images Built
        - **API Image:** ${{ needs.build-images.outputs.api_image || 'N/A' }}
        - **Web Image:** ${{ needs.build-images.outputs.web_image || 'N/A' }}
        - **MCP Image:** ${{ needs.build-images.outputs.mcp_image || 'N/A' }}
        
        ## Staging Environment
        - **Web URL:** ${{ needs.deploy-staging.outputs.web_url || 'N/A' }}
        - **API URL:** ${{ needs.deploy-staging.outputs.api_url || 'N/A' }}
        - **MCP Gateway URL:** ${{ needs.deploy-staging.outputs.mcp_url || 'N/A' }}
        
        ## Verification Results
        - **Health Checks:** ${{ (needs.verify-deployment.result == 'success' && '✅ Passed') || '❌ Failed/Skipped' }}
        - **ABAC Enforcement:** ${{ (needs.verify-deployment.result == 'success' && '✅ Tested') || '⚠️ Skipped' }}
        - **MCP Tools Integration:** ${{ (needs.verify-deployment.result == 'success' && '✅ Tested') || '⚠️ Skipped' }}
        
        ## Next Steps
        ${{ needs.deploy-staging.result == 'success' && '- ✅ Staging deployment ready for UAT testing' || '- ❌ Review deployment logs and retry' }}
        - Monitor application performance and logs
        - Run full UAT test suite when ready
        - Review any security scan findings before production
        
        ## Links
        - [GitHub Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
        - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        - [Staging Environment Docs](https://github.com/${{ github.repository }}/blob/main/docs/staging-env.md)
        
        EOF
        
        # Add report to GitHub step summary
        cat deployment-report.md >> $GITHUB_STEP_SUMMARY
        
        echo "📋 Deployment report generated"

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: staging-deployment-${{ github.sha }}
        path: |
          deployment-report.md
        retention-days: 30

    - name: Notify on failure
      if: failure()
      run: |
        echo "🚨 Staging deployment failed!"
        echo "Please check the deployment logs and verify:"
        echo "1. All required GitHub variables are configured"
        echo "2. Azure resources exist and are accessible"
        echo "3. Container images built successfully"
        echo "4. No breaking changes in the codebase"
        echo ""
        echo "For troubleshooting guide, see docs/staging-env.md"
