# Deployment workflow for staging environment
# OAuth scope fix test
name: Deploy Staging

on:
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

env:
  GHCR_ENABLED: ${{ vars.GHCR_ENABLED }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ACA_RG: ${{ vars.ACA_RG }}
  ACA_ENV: ${{ vars.ACA_ENV }}
  ACA_APP_API: ${{ vars.ACA_APP_API }}
  ACA_APP_WEB: ${{ vars.ACA_APP_WEB }}
  APPSVC_RG: ${{ vars.APPSVC_RG }}
  APPSVC_WEBAPP_WEB: ${{ vars.APPSVC_WEBAPP_WEB }}
  APPSVC_WEBAPP_API: ${{ vars.APPSVC_WEBAPP_API }}
  STAGING_URL: ${{ vars.STAGING_URL }}

jobs:
  build_and_push_ghcr:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check GHCR configuration
        run: |
          if [[ "${{ env.GHCR_ENABLED }}" == "1" ]]; then
            echo "::notice::GHCR build enabled"
          else
            echo "::notice::GHCR build disabled (GHCR_ENABLED != 1)"
            exit 0
          fi
      
      - name: Set up Docker Buildx
        if: env.GHCR_ENABLED == '1'
        uses: docker/setup-buildx-action@v3
      
      - name: Set lowercase repository owner
        if: env.GHCR_ENABLED == '1'
        run: echo "REPO_OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Log in to GitHub Container Registry
        if: env.GHCR_ENABLED == '1'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push API image
        if: env.GHCR_ENABLED == '1'
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/aecma-api:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/aecma-api:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Web image
        if: env.GHCR_ENABLED == '1'
        uses: docker/build-push-action@v5
        with:
          context: ./web
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER_LOWER }}/aecma-web:${{ github.sha }}
            ghcr.io/${{ env.REPO_OWNER_LOWER }}/aecma-web:staging
          build-args: |
            GITHUB_SHA=${{ github.sha }}
            BUILD_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify image was pushed
        if: env.GHCR_ENABLED == '1'
        run: |
          echo "üîç Verifying image was pushed successfully..."
          if docker manifest inspect ghcr.io/${{ env.REPO_OWNER_LOWER }}/aecma-web:${{ github.sha }} > /dev/null 2>&1; then
            echo "‚úÖ Image verified in registry"
          else
            echo "‚ùå Image verification failed"
            exit 1
          fi

  deploy_azure_aca:
    runs-on: ubuntu-latest
    needs: build_and_push_ghcr
    environment: 
      name: staging
    if: ${{ env.AZURE_SUBSCRIPTION_ID != '' && env.AZURE_CLIENT_ID != '' && env.AZURE_TENANT_ID != '' && env.ACA_RG != '' && env.ACA_ENV != '' && env.ACA_APP_API != '' && env.ACA_APP_WEB != '' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      
      - name: Deploy API to Container Apps
        run: |
          echo "::notice::Deploying API to Container Apps..."
          az containerapp update \
            --name "$ACA_APP_API" \
            --resource-group "$ACA_RG" \
            --environment "$ACA_ENV" \
            --image "ghcr.io/${{ github.repository_owner }}/aecma-api:${{ github.sha }}" || true
      
      - name: Deploy Web to Container Apps
        run: |
          echo "::notice::Deploying Web to Container Apps..."
          az containerapp update \
            --name "$ACA_APP_WEB" \
            --resource-group "$ACA_RG" \
            --environment "$ACA_ENV" \
            --image "ghcr.io/${{ github.repository_owner }}/aecma-web:${{ github.sha }}" || true

  deploy_appservice:
    runs-on: ubuntu-latest
    needs: build_and_push_ghcr
    environment: 
      name: staging
    if: ${{ env.APPSVC_RG != '' && env.APPSVC_WEBAPP_WEB != '' && env.APPSVC_WEBAPP_API != '' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      
      - name: Configure Web container (GHCR)
        run: |
          echo "::notice::Configuring Web App to use GHCR image..."
          az webapp config container set \
            -g "$APPSVC_RG" -n "$APPSVC_WEBAPP_WEB" \
            --docker-custom-image-name "ghcr.io/${{ github.repository_owner }}/aecma-web:${{ github.sha }}" \
            --docker-registry-server-url "https://ghcr.io" \
            --docker-registry-server-user "${{ github.actor }}" \
            --docker-registry-server-password "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Configure API container (GHCR)
        run: |
          echo "::notice::Configuring API App to use GHCR image..."
          az webapp config container set \
            -g "$APPSVC_RG" -n "$APPSVC_WEBAPP_API" \
            --docker-custom-image-name "ghcr.io/${{ github.repository_owner }}/aecma-api:${{ github.sha }}" \
            --docker-registry-server-url "https://ghcr.io" \
            --docker-registry-server-user "${{ github.actor }}" \
            --docker-registry-server-password "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Restart Web Apps
        run: |
          echo "::notice::Restarting Web Apps to apply new images..."
          az webapp restart -g "$APPSVC_RG" -n "$APPSVC_WEBAPP_WEB" || true
          az webapp restart -g "$APPSVC_RG" -n "$APPSVC_WEBAPP_API" || true
      
      - name: Print App Service URL (if STAGING_URL missing)
        run: |
          if [ -z "${STAGING_URL}" ]; then
            echo "::notice::STAGING_URL=https://${APPSVC_WEBAPP_WEB}.azurewebsites.net"
          else
            echo "::notice::STAGING_URL=${STAGING_URL}"
          fi

  print_url:
    runs-on: ubuntu-latest
    needs: [build_and_push_ghcr]
    if: always()
    
    steps:
      - name: Compute & print STAGING_URL
        run: |
          if [[ -n "${STAGING_URL}" ]]; then
            echo "::notice::STAGING_URL=${STAGING_URL}"
          elif [[ -n "${ACA_APP_WEB}" && -n "${ACA_ENV}" ]]; then
            COMPUTED_URL="https://${ACA_APP_WEB}.${ACA_ENV}.azurecontainerapps.io"
            echo "::notice::STAGING_URL=${COMPUTED_URL}"
          elif [[ -n "${APPSVC_WEBAPP_WEB}" ]]; then
            COMPUTED_URL="https://${APPSVC_WEBAPP_WEB}.azurewebsites.net"
            echo "::notice::STAGING_URL=${COMPUTED_URL}"
          else
            echo "::notice::STAGING_URL=(not set)"
          fi
