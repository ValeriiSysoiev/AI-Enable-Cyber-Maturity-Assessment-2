name: Deploy to Staging

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if Azure credentials not available'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api
  IMAGE_NAME_WEB: ${{ github.repository }}/web
  IMAGE_NAME_MCP: ${{ github.repository }}/mcp-gateway

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
      mcp-image: ${{ steps.meta-mcp.outputs.tags }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=staging

    - name: Extract metadata for Web
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr  
          type=sha,prefix={{branch}}-
          type=raw,value=staging

    - name: Extract metadata for MCP Gateway
      id: meta-mcp
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_MCP }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=staging

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        file: ./app/Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}

    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: ./web
        file: ./web/Dockerfile
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}

    - name: Build and push MCP Gateway image
      uses: docker/build-push-action@v5
      with:
        context: ./mcp_gateway
        file: ./mcp_gateway/Dockerfile
        push: true
        tags: ${{ steps.meta-mcp.outputs.tags }}
        labels: ${{ steps.meta-mcp.outputs.labels }}

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check Azure credentials availability
      id: check-creds
      run: |
        if [ -n "${{ secrets.AZURE_CLIENT_ID }}" ] && [ -n "${{ secrets.AZURE_CLIENT_SECRET }}" ] && [ -n "${{ secrets.AZURE_TENANT_ID }}" ]; then
          echo "azure_available=true" >> $GITHUB_OUTPUT
          echo "✅ Azure OIDC credentials available"
        else
          echo "azure_available=false" >> $GITHUB_OUTPUT
          echo "⚠️ Azure OIDC credentials not available"
        fi

    - name: Azure Login
      if: steps.check-creds.outputs.azure_available == 'true'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}

    - name: Deploy to Azure Container Apps
      if: steps.check-creds.outputs.azure_available == 'true'
      run: |
        echo "🚀 Deploying to Azure Container Apps staging environment"
        
        # Set deployment variables
        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP || 'rg-cyber-maturity-staging' }}"
        LOCATION="${{ secrets.AZURE_LOCATION || 'eastus' }}"
        CONTAINER_APP_ENV="${{ secrets.AZURE_CONTAINER_APP_ENV || 'cae-cyber-maturity-staging' }}"
        
        # Deploy API
        az containerapp update \
          --name api-staging \
          --resource-group $RESOURCE_GROUP \
          --image ${{ needs.build-and-push.outputs.api-image }} \
          --environment $CONTAINER_APP_ENV \
          --min-replicas 1 \
          --max-replicas 3 \
          --target-port 8000 \
          --ingress external \
          --env-vars \
            MCP_ENABLED=true \
            MCP_GATEWAY_URL=https://mcp-gateway-staging.proudsea-12345678.eastus.azurecontainerapps.io \
            STAGING_ENV=true

        # Deploy Web
        az containerapp update \
          --name web-staging \
          --resource-group $RESOURCE_GROUP \
          --image ${{ needs.build-and-push.outputs.web-image }} \
          --environment $CONTAINER_APP_ENV \
          --min-replicas 1 \
          --max-replicas 2 \
          --target-port 3000 \
          --ingress external \
          --env-vars \
            NEXT_PUBLIC_API_URL=https://api-staging.proudsea-12345678.eastus.azurecontainerapps.io \
            STAGING_ENV=true

        # Deploy MCP Gateway
        az containerapp update \
          --name mcp-gateway-staging \
          --resource-group $RESOURCE_GROUP \
          --image ${{ needs.build-and-push.outputs.mcp-image }} \
          --environment $CONTAINER_APP_ENV \
          --min-replicas 1 \
          --max-replicas 2 \
          --target-port 8200 \
          --ingress external \
          --env-vars \
            MCP_ENABLED=true \
            MCP_CONNECTORS_SP=true \
            MCP_CONNECTORS_JIRA=false \
            STAGING_ENV=true

        echo "✅ Staging deployment completed successfully"

    - name: Skip deployment message
      if: steps.check-creds.outputs.azure_available == 'false'
      run: |
        echo "⏭️ Skipping Azure deployment - credentials not available"
        echo ""
        echo "To enable staging deployment, configure the following secrets:"
        echo "- AZURE_CLIENT_ID: Azure AD application client ID"
        echo "- AZURE_CLIENT_SECRET: Azure AD application client secret"  
        echo "- AZURE_TENANT_ID: Azure AD tenant ID"
        echo ""
        echo "✅ Container images built and pushed to GHCR successfully"

    - name: Generate deployment summary
      if: always()
      run: |
        echo "## 📊 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐳 Container Images" >> $GITHUB_STEP_SUMMARY
        echo "- **API**: \`${{ needs.build-and-push.outputs.api-image }}\`" >> $GITHUB_STEP_SUMMARY  
        echo "- **Web**: \`${{ needs.build-and-push.outputs.web-image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **MCP Gateway**: \`${{ needs.build-and-push.outputs.mcp-image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check-creds.outputs.azure_available }}" = "true" ]; then
          echo "### 🚀 Deployment Status: ✅ SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 🌐 Staging URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Web App**: https://web-staging.proudsea-12345678.eastus.azurecontainerapps.io" >> $GITHUB_STEP_SUMMARY
          echo "- **API**: https://api-staging.proudsea-12345678.eastus.azurecontainerapps.io" >> $GITHUB_STEP_SUMMARY  
          echo "- **MCP Gateway**: https://mcp-gateway-staging.proudsea-12345678.eastus.azurecontainerapps.io" >> $GITHUB_STEP_SUMMARY
        else
          echo "### 🚀 Deployment Status: ⏭️ SKIPPED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Azure credentials not configured. Images are available for manual deployment." >> $GITHUB_STEP_SUMMARY
        fi