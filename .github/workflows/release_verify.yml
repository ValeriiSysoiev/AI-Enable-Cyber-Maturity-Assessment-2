name: Release Verification

on:
  workflow_run:
    workflows: ["Release Deployment"]
    types:
      - completed

env:
  API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
  WEB_ENDPOINT: ${{ secrets.WEB_ENDPOINT }}

jobs:
  verify-deployment:
    runs-on: ubuntu-latest
    # Only run if the release workflow succeeded AND Azure credentials are configured
    if: ${{ github.event.workflow_run.conclusion == 'success' && secrets.API_ENDPOINT != '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: 2.50.0

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Install dependencies
      run: |
        cd web
        npm ci

    - name: Validate environment variables
      run: |
        echo "Validating required environment variables..."
        
        missing_vars=()
        
        if [ -z "${{ env.API_ENDPOINT }}" ]; then
          missing_vars+=("API_ENDPOINT")
        fi
        
        if [ -z "${{ env.WEB_ENDPOINT }}" ]; then
          missing_vars+=("WEB_ENDPOINT")
        fi
        
        if [ ${#missing_vars[@]} -ne 0 ]; then
          echo "‚ùå Missing required secrets:"
          printf '  - %s\n' "${missing_vars[@]}"
          echo ""
          echo "Please configure these secrets in your GitHub repository settings."
          echo "Skipping verification tests due to missing configuration."
          exit 0  # Exit gracefully instead of failing
        fi
        
        echo "‚úÖ All required environment variables are configured"

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to stabilize..."
        sleep 30

    - name: Verify API health
      run: |
        echo "Verifying API health..."
        set -o pipefail
        
        # Make the verification request and capture exit code immediately
        curl -f -s -o /dev/null -w "%{http_code}" "${{ env.API_ENDPOINT }}/health" || rc=$?
        
        # Use the captured exit code for decision making
        if [ "${rc:-0}" -eq 0 ]; then
          echo "API health check passed"
        else
          echo "API health check failed with exit code: ${rc:-0}"
          exit 1
        fi

    - name: Verify WEB accessibility
      run: |
        echo "Verifying WEB accessibility..."
        set -o pipefail
        
        # Make the verification request and capture exit code immediately
        curl -f -s -o /dev/null -w "%{http_code}" "${{ env.WEB_ENDPOINT }}" || rc=$?
        
        # Use the captured exit code for decision making
        if [ "${rc:-0}" -eq 0 ]; then
          echo "WEB accessibility check passed"
        else
          echo "WEB accessibility check failed with exit code: ${rc:-0}"
          exit 1
        fi

    - name: Run comprehensive verification
      run: |
        echo "üîç Running comprehensive deployment verification..."
        chmod +x scripts/verify_live.sh
        
        # Run enhanced verification script
        export DEPLOYMENT_VERIFICATION=true
        export GITHUB_SHA=${{ github.sha }}
        export RELEASE_VERIFICATION=true
        
        if ./scripts/verify_live.sh 2>&1 | tee verification-output.log; then
          echo "‚úÖ Infrastructure verification passed"
        else
          echo "‚ùå Infrastructure verification failed"
          exit 1
        fi

    - name: Install Playwright browsers
      run: |
        cd web
        npx playwright install --with-deps chromium

    - name: Run smoke tests
      env:
        WEB_BASE_URL: ${{ env.WEB_ENDPOINT }}
        API_BASE_URL: ${{ env.API_ENDPOINT }}
        CI: true
      run: |
        echo "üß™ Running smoke tests..."
        cd web
        
        # Run smoke tests with production configuration
        npx playwright test smoke.spec.ts --project=chromium --reporter=github
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Smoke tests passed"
        else
          echo "‚ùå Smoke tests failed"
          exit 1
        fi

    - name: Run authentication tests
      env:
        WEB_BASE_URL: ${{ env.WEB_ENDPOINT }}
        API_BASE_URL: ${{ env.API_ENDPOINT }}
        CI: true
      run: |
        echo "üîê Running authentication tests..."
        cd web
        
        # Run auth tests with production configuration
        npx playwright test auth.spec.ts --project=chromium --reporter=github
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Authentication tests passed"
        else
          echo "‚ùå Authentication tests failed"
          exit 1
        fi

    - name: Run evidence workflow tests
      env:
        WEB_BASE_URL: ${{ env.WEB_ENDPOINT }}
        API_BASE_URL: ${{ env.API_ENDPOINT }}
        CI: true
      run: |
        echo "üìã Running evidence workflow tests..."
        cd web
        
        # Run evidence tests with production configuration
        npx playwright test evidence.spec.ts --project=chromium --reporter=github --timeout=60000
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Evidence workflow tests passed"
        else
          echo "‚ùå Evidence workflow tests failed"
          exit 1
        fi

    - name: Run integration tests
      env:
        WEB_BASE_URL: ${{ env.WEB_ENDPOINT }}
        API_BASE_URL: ${{ env.API_ENDPOINT }}
        CI: true
      run: |
        echo "üîó Running integration tests..."
        cd web
        
        # Run integration tests with production configuration
        npx playwright test integration.spec.ts --project=chromium --reporter=github --timeout=90000
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Integration tests passed"
        else
          echo "‚ùå Integration tests failed"
          exit 1
        fi

    - name: Performance baseline check
      run: |
        echo "Running performance baseline check..."
        set -o pipefail
        
        # Simple response time check
        response_time=$(curl -w "%{time_total}" -s -o /dev/null "${{ env.API_ENDPOINT }}/health") || rc=$?
        
        # Use the captured exit code for decision making
        if [ "${rc:-0}" -eq 0 ]; then
          echo "Performance check completed. Response time: ${response_time}s"
          
          # Check if response time is reasonable (less than 5 seconds)
          if (( $(echo "$response_time < 5.0" | bc -l) )); then
            echo "Performance baseline check passed"
          else
            echo "Performance baseline check failed - response time too high: ${response_time}s"
            exit 1
          fi
        else
          echo "Performance baseline check failed with exit code: ${rc:-0}"
          exit 1
        fi

    - name: Verification summary
      run: |
        echo "=== Deployment Verification Summary ==="
        echo "‚úÖ API health check: PASSED"
        echo "‚úÖ WEB accessibility: PASSED"
        echo "‚úÖ Smoke tests: PASSED"
        echo "‚úÖ Authentication tests: PASSED"
        echo "‚úÖ Performance baseline: PASSED"
        echo "=== All verification checks completed successfully ==="

  notify-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' || failure() }}
    needs: verify-deployment
    
    steps:
    - name: Notify deployment failure
      run: |
        echo "=== Deployment Verification Failed ==="
        echo "The deployment verification has failed."
        echo "Please check the logs and consider rolling back if necessary."
        echo "Workflow run: ${{ github.event.workflow_run.html_url }}"
        
        # In a real environment, you might want to:
        # - Send notifications to Slack/Teams
        # - Create an incident ticket
        # - Trigger automatic rollback
        exit 1
