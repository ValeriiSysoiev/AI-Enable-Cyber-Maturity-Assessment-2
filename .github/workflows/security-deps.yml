name: Security Dependency Check

on:
  push:
    branches: [main, develop]
    paths:
      - 'app/requirements*.txt'
      - 'app/Dockerfile'
      - '.github/workflows/security-deps.yml'
  pull_request:
    branches: [main]
    paths:
      - 'app/requirements*.txt'
      - 'app/Dockerfile'
  schedule:
    # Run weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  check-python-vulnerabilities:
    runs-on: ubuntu-latest
    name: Check Python Dependencies
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip>=23.3 setuptools>=70.0.0 wheel>=0.38.1
          cd app
          # Install security requirements first
          if [ -f requirements-security.txt ]; then
            pip install -r requirements-security.txt
          fi
          # Install main requirements
          pip install -r requirements.txt
      
      - name: Run vulnerability check
        run: |
          cd app
          python scripts/check-vulnerabilities.py
      
      - name: Run security tests
        run: |
          cd app
          pip install pytest
          pytest tests/test_security_deps.py -v
      
      - name: Check with pip-audit
        run: |
          pip install pip-audit
          cd app
          # Run pip-audit and continue even if vulnerabilities are found
          pip-audit --desc || true
      
      - name: Generate security report
        if: always()
        run: |
          cd app
          echo "# Security Dependency Report" > security-report.md
          echo "Generated: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Installed Versions" >> security-report.md
          echo '```' >> security-report.md
          pip list | grep -E "python-multipart|anyio|pip|future|wheel|cryptography|urllib3|setuptools" >> security-report.md
          echo '```' >> security-report.md
          
          echo "" >> security-report.md
          echo "## Vulnerability Check" >> security-report.md
          echo '```' >> security-report.md
          python scripts/check-vulnerabilities.py >> security-report.md 2>&1 || true
          echo '```' >> security-report.md
      
      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-dependency-report
          path: app/security-report.md
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('app/security-report.md', 'utf8');
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Security Dependency Report')
            );
            
            const body = `## ðŸ”’ Security Dependency Check\n\n${report}`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }