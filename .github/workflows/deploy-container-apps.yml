name: Deploy to Container Apps

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - api
          - web

env:
  AZURE_RESOURCE_GROUP: rg-cybermat-prd
  API_CONTAINER_APP: api-cybermat-prd-aca
  API_CONTAINER_APP_URL: https://api-cybermat-prd-aca.icystone-69c102b0.westeurope.azurecontainerapps.io
  WEB_CONTAINER_APP: web-cybermat-prd-aca
  WEB_CONTAINER_APP_URL: https://web-cybermat-prd-aca.icystone-69c102b0.westeurope.azurecontainerapps.io
  ACR_NAME: webcybermatprdacr
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Build and Deploy API to Container Apps
      if: github.event.inputs.deploy_target == 'api' || github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == ''
      run: |
        echo "Building API Docker image..."
        cd app
        
        # Build Docker image
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/api-cybermat:${{ github.sha }} .
        docker tag ${{ env.ACR_NAME }}.azurecr.io/api-cybermat:${{ github.sha }} ${{ env.ACR_NAME }}.azurecr.io/api-cybermat:latest
        
        # Login to ACR
        az acr login --name ${{ env.ACR_NAME }}
        
        # Push images
        docker push ${{ env.ACR_NAME }}.azurecr.io/api-cybermat:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/api-cybermat:latest
        
        # Configure ACR credentials for Container App
        echo "Configuring ACR credentials for Container App..."
        ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --query passwords[0].value -o tsv)
        az containerapp registry set \
          --name ${{ env.API_CONTAINER_APP }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --server ${{ env.ACR_NAME }}.azurecr.io \
          --username ${{ env.ACR_NAME }} \
          --password $ACR_PASSWORD
        
        # Update Container App
        echo "Updating Container App with new image..."
        az containerapp update \
          --name ${{ env.API_CONTAINER_APP }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ env.ACR_NAME }}.azurecr.io/api-cybermat:${{ github.sha }} \
          --set-env-vars \
            AUTH_MODE=aad \
            AZURE_AD_TENANT_ID="${{ secrets.AZURE_AD_TENANT_ID }}" \
            AZURE_AD_CLIENT_ID="${{ secrets.AZURE_AD_CLIENT_ID }}" \
            AZURE_AD_CLIENT_SECRET="${{ secrets.AZURE_AD_CLIENT_SECRET }}" \
            ADMIN_EMAILS="${{ secrets.ADMIN_EMAILS }}" \
            DATA_BACKEND=cosmos \
            COSMOS_DB_ENDPOINT="${{ secrets.COSMOS_DB_ENDPOINT }}" \
            COSMOS_DB_KEY="${{ secrets.COSMOS_DB_KEY }}" \
            AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            AZURE_SERVICE_BUS_CONNECTION_STRING="${{ secrets.AZURE_SERVICE_BUS_CONNECTION_STRING }}" \
            AZURE_OPENAI_ENDPOINT="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
            AZURE_OPENAI_API_KEY="${{ secrets.AZURE_OPENAI_API_KEY }}" \
            AZURE_SEARCH_ENDPOINT="${{ secrets.AZURE_SEARCH_ENDPOINT }}" \
            AZURE_SEARCH_KEY="${{ secrets.AZURE_SEARCH_KEY }}" \
            ENVIRONMENT=production \
            LOG_LEVEL=info \
            BUILD_SHA="${{ github.sha }}"
        
        echo "API deployment completed!"
        
    - name: Test API Health Endpoint
      if: github.event.inputs.deploy_target == 'api' || github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == ''
      run: |
        echo "Testing Container Apps API health endpoint..."
        max_attempts=30
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.API_CONTAINER_APP_URL }}/health || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "✓ Container Apps API is healthy (HTTP $response)"
            exit 0
          else
            echo "API not ready yet (HTTP $response), attempt $((attempt + 1))/$max_attempts"
            sleep 10
            attempt=$((attempt + 1))
          fi
        done
        
        echo "❌ API health check failed after $max_attempts attempts"
        exit 1
        
    - name: Build and Deploy Web to Container Apps
      if: github.event.inputs.deploy_target == 'web' || github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == ''
      run: |
        echo "Building Web Docker image..."
        cd web
        
        # Build Docker image with production settings and all required build args
        docker build --platform linux/amd64 \
          -t ${{ env.ACR_NAME }}.azurecr.io/web-cybermat-prd:${{ github.sha }} \
          -t ${{ env.ACR_NAME }}.azurecr.io/web-cybermat-prd:latest \
          --build-arg PROXY_TARGET_API_BASE_URL=${{ env.API_CONTAINER_APP_URL }} \
          --build-arg NEXTAUTH_URL=${{ env.WEB_CONTAINER_APP_URL }} \
          --build-arg NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
          --build-arg NODE_ENV=production \
          --build-arg AUTH_MODE=aad \
          --build-arg AZURE_AD_CLIENT_ID="${{ secrets.AZURE_AD_CLIENT_ID }}" \
          --build-arg AZURE_AD_TENANT_ID="${{ secrets.AZURE_AD_TENANT_ID }}" \
          --build-arg AZURE_AD_CLIENT_SECRET="${{ secrets.AZURE_AD_CLIENT_SECRET }}" \
          --build-arg DEMO_E2E=0 \
          --build-arg BUILD_SHA="${{ github.sha }}" .
        
        # Login to ACR and push
        az acr login --name ${{ env.ACR_NAME }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/web-cybermat-prd:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/web-cybermat-prd:latest
        
        # Configure ACR credentials for Web Container App
        echo "Configuring ACR credentials for Web Container App..."
        ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --query passwords[0].value -o tsv)
        az containerapp registry set \
          --name ${{ env.WEB_CONTAINER_APP }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --server ${{ env.ACR_NAME }}.azurecr.io \
          --username ${{ env.ACR_NAME }} \
          --password $ACR_PASSWORD
        
        echo "Updating Web Container App..."
        az containerapp update \
          --name ${{ env.WEB_CONTAINER_APP }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ env.ACR_NAME }}.azurecr.io/web-cybermat-prd:${{ github.sha }} \
          --set-env-vars \
            NODE_ENV=production \
            PROXY_TARGET_API_BASE_URL=${{ env.API_CONTAINER_APP_URL }} \
            API_BASE_URL=${{ env.API_CONTAINER_APP_URL }} \
            NEXTAUTH_URL=${{ env.WEB_CONTAINER_APP_URL }} \
            AUTH_TRUST_HOST=true \
            AUTH_MODE=aad \
            NEXT_PUBLIC_API_BASE_URL=/api/proxy \
            AZURE_AD_CLIENT_ID="${{ secrets.AZURE_AD_CLIENT_ID }}" \
            AZURE_AD_TENANT_ID="${{ secrets.AZURE_AD_TENANT_ID }}" \
            AZURE_AD_CLIENT_SECRET="${{ secrets.AZURE_AD_CLIENT_SECRET }}" \
            NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
            ADMIN_EMAILS="${{ secrets.ADMIN_EMAILS }}" \
            BUILD_SHA="${{ github.sha }}"
        
        echo "Web Container App deployment completed!"
        
    - name: Test Web Application
      run: |
        echo "Testing Web application..."
        WEB_URL=${{ env.WEB_CONTAINER_APP_URL }}
        max_attempts=30
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          response=$(curl -s -o /dev/null -w "%{http_code}" $WEB_URL || echo "000")
          
          if [ "$response" = "200" ] || [ "$response" = "307" ]; then
            echo "✓ Web application is responding (HTTP $response)"
            break
          else
            echo "Web not ready yet (HTTP $response), attempt $((attempt + 1))/$max_attempts"
            sleep 10
            attempt=$((attempt + 1))
          fi
        done
        
        if [ $attempt -eq $max_attempts ]; then
          echo "❌ Web application check failed after $max_attempts attempts"
          exit 1
        fi
        
    - name: Verify Deployment SHA
      run: |
        echo "Verifying deployment SHA..."
        WEB_URL=${{ env.WEB_CONTAINER_APP_URL }}
        EXPECTED_SHA="${{ github.sha }}"
        
        # Wait for version endpoint to be ready
        sleep 10
        
        # Get the deployed SHA from /api/version
        echo "Fetching version from: $WEB_URL/api/version"
        VERSION_RESPONSE=$(curl -s "$WEB_URL/api/version")
        echo "Version response: $VERSION_RESPONSE"
        
        # Extract SHA from response
        DEPLOYED_SHA=$(echo "$VERSION_RESPONSE" | jq -r '.sha // .commit_sha // empty')
        
        if [ -z "$DEPLOYED_SHA" ]; then
          echo "❌ Failed to get SHA from version endpoint"
          echo "Response was: $VERSION_RESPONSE"
          exit 1
        fi
        
        echo "Expected SHA: $EXPECTED_SHA"
        echo "Deployed SHA: $DEPLOYED_SHA"
        
        if [ "$DEPLOYED_SHA" = "$EXPECTED_SHA" ]; then
          echo "✅ SHA verification passed! Deployment is using correct version."
        else
          echo "❌ SHA mismatch! Expected $EXPECTED_SHA but got $DEPLOYED_SHA"
          echo "Deployment failed SHA verification - the deployed version does not match the commit SHA"
          exit 1
        fi