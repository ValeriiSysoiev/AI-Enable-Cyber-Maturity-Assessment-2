name: UAT Checklist & Report Generation

on:
  workflow_dispatch:
    inputs:
      deployment_tag:
        description: 'Deployment tag to test (e.g., v0.1.0-rc1)'
        required: true
        type: string
      environment:
        description: 'Target environment for UAT'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# OIDC permissions for Azure authentication (if needed)
permissions:
  id-token: write
  contents: read
  actions: write

# Prevent multiple UAT runs
concurrency:
  group: uat-${{ inputs.environment }}
  cancel-in-progress: false

env:
  DEPLOYMENT_TAG: ${{ inputs.deployment_tag }}
  TEST_ENVIRONMENT: ${{ inputs.environment }}
  AZURE_RESOURCE_GROUP: ${{ inputs.environment == 'staging' && vars.AZURE_RESOURCE_GROUP_STAGING || vars.AZURE_RESOURCE_GROUP }}
  API_BASE_URL: ${{ inputs.environment == 'staging' && vars.VERIFY_API_BASE_URL || vars.PRODUCTION_API_BASE_URL }}
  WEB_BASE_URL: ${{ inputs.environment == 'staging' && vars.VERIFY_WEB_BASE_URL || vars.PRODUCTION_WEB_BASE_URL }}
  AUTH_BEARER: ${{ inputs.environment == 'staging' && vars.STAGING_AUTH_BEARER || vars.PRODUCTION_AUTH_BEARER }}

jobs:
  uat-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      timeout-minutes: 5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      timeout-minutes: 3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'web/package-lock.json'

    - name: Setup Python
      uses: actions/setup-python@v5
      timeout-minutes: 3
      with:
        python-version: '3.11'

    - name: Initialize UAT Report
      timeout-minutes: 2
      run: |
        echo "üìã Initializing UAT validation for ${{ env.DEPLOYMENT_TAG }}..."
        
        # Create UAT report header
        cat > UAT-Report.md << EOF
        # UAT Report: ${{ env.DEPLOYMENT_TAG }}
        
        **Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
        **Environment:** ${{ env.TEST_ENVIRONMENT }}  
        **Deployment Tag:** ${{ env.DEPLOYMENT_TAG }}  
        **API Endpoint:** ${{ env.API_BASE_URL }}  
        **WEB Endpoint:** ${{ env.WEB_BASE_URL }}  
        
        ---
        
        ## üéØ UAT Validation Summary
        
        | Test Category | Status | Duration | Details |
        |---------------|--------|----------|---------|
        EOF
        
        echo "UAT report initialized."

    - name: Infrastructure Health Check
      id: health_check
      timeout-minutes: 10
      run: |
        echo "üîç Running infrastructure health validation..."
        
        # Make verify script executable
        chmod +x scripts/verify_live.sh
        
        # Set environment variables for verification
        export API_BASE_URL="${{ env.API_BASE_URL }}"
        export WEB_BASE_URL="${{ env.WEB_BASE_URL }}"
        export AUTH_BEARER="${{ env.AUTH_BEARER }}"
        export DEPLOYMENT_VERIFICATION=true
        export GITHUB_SHA="${{ github.sha }}"
        export DEPLOYMENT_ENVIRONMENT="${{ env.TEST_ENVIRONMENT }}"
        
        # Run verification with timing
        start_time=$(date +%s)
        if ./scripts/verify_live.sh 2>&1 | tee health-check.log; then
          HEALTH_STATUS="‚úÖ PASSED"
          HEALTH_RESULT=0
        else
          HEALTH_STATUS="‚ùå FAILED"  
          HEALTH_RESULT=1
        fi
        end_time=$(date +%s)
        HEALTH_DURATION=$((end_time - start_time))s
        
        # Update UAT report
        echo "| Infrastructure Health | $HEALTH_STATUS | ${HEALTH_DURATION} | Health checks, API endpoints, auth flow |" >> UAT-Report.md
        
        # Set outputs
        echo "health_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
        echo "health_result=$HEALTH_RESULT" >> $GITHUB_OUTPUT
        echo "health_duration=$HEALTH_DURATION" >> $GITHUB_OUTPUT

    - name: Install Playwright Dependencies
      timeout-minutes: 8
      working-directory: ./web
      run: |
        echo "üé≠ Setting up Playwright for E2E tests..."
        npm ci
        npx playwright install --with-deps

    - name: E2E Smoke Tests
      id: e2e_smoke
      timeout-minutes: 15
      working-directory: ./web
      env:
        API_BASE_URL: ${{ env.API_BASE_URL }}
        WEB_BASE_URL: ${{ env.WEB_BASE_URL }}
        AUTH_BEARER: ${{ env.AUTH_BEARER }}
      run: |
        echo "üß™ Running E2E smoke tests..."
        
        start_time=$(date +%s)
        if timeout 900 npx playwright test e2e/tests/smoke.spec.ts --config=e2e/playwright.config.ts --reporter=json > smoke-results.json 2>&1; then
          E2E_STATUS="‚úÖ PASSED"
          E2E_RESULT=0
        else
          E2E_STATUS="‚ùå FAILED"
          E2E_RESULT=1
          cat smoke-results.json || echo "No smoke test results available"
        fi
        end_time=$(date +%s)
        E2E_DURATION=$((end_time - start_time))s
        
        # Update UAT report
        echo "| E2E Smoke Tests | $E2E_STATUS | ${E2E_DURATION} | Authentication, navigation, core workflows |" >> ../UAT-Report.md
        
        # Set outputs
        echo "e2e_status=$E2E_STATUS" >> $GITHUB_OUTPUT
        echo "e2e_result=$E2E_RESULT" >> $GITHUB_OUTPUT
        echo "e2e_duration=$E2E_DURATION" >> $GITHUB_OUTPUT

    - name: Security Validation
      id: security_check
      timeout-minutes: 8
      run: |
        echo "üîí Running security validation checks..."
        
        start_time=$(date +%s)
        SECURITY_RESULT=0
        
        # Security check 1: HTTPS enforcement
        if curl -s -I "${{ env.API_BASE_URL }}" | grep -i "HTTP/1.1 200\|HTTP/2 200" >/dev/null; then
          echo "‚úÖ API HTTPS accessibility confirmed"
        else
          echo "‚ùå API HTTPS accessibility failed"
          SECURITY_RESULT=1
        fi
        
        # Security check 2: Auth enforcement (no token should return 401)
        if curl -s -o /dev/null -w "%{http_code}" "${{ env.API_BASE_URL }}/api/v1/engagements" | grep -E "401|403" >/dev/null; then
          echo "‚úÖ API authentication enforcement confirmed"
        else
          echo "‚ùå API authentication enforcement failed"
          SECURITY_RESULT=1
        fi
        
        # Security check 3: Web application accessibility
        if curl -s -I "${{ env.WEB_BASE_URL }}" | grep -i "HTTP/1.1 200\|HTTP/2 200" >/dev/null; then
          echo "‚úÖ WEB HTTPS accessibility confirmed"
        else
          echo "‚ùå WEB HTTPS accessibility failed" 
          SECURITY_RESULT=1
        fi
        
        end_time=$(date +%s)
        SECURITY_DURATION=$((end_time - start_time))s
        
        if [ $SECURITY_RESULT -eq 0 ]; then
          SECURITY_STATUS="‚úÖ PASSED"
        else
          SECURITY_STATUS="‚ùå FAILED"
        fi
        
        # Update UAT report
        echo "| Security Validation | $SECURITY_STATUS | ${SECURITY_DURATION} | HTTPS, auth enforcement, headers |" >> UAT-Report.md
        
        # Set outputs
        echo "security_status=$SECURITY_STATUS" >> $GITHUB_OUTPUT
        echo "security_result=$SECURITY_RESULT" >> $GITHUB_OUTPUT
        echo "security_duration=$SECURITY_DURATION" >> $GITHUB_OUTPUT

    - name: Performance Baseline
      id: performance_check  
      timeout-minutes: 5
      run: |
        echo "‚ö° Running performance baseline checks..."
        
        start_time=$(date +%s)
        PERF_RESULT=0
        
        # API response time check
        API_TIME=$(curl -o /dev/null -s -w "%{time_total}" "${{ env.API_BASE_URL }}/health" || echo "999")
        API_TIME_MS=$(echo "$API_TIME * 1000" | bc)
        
        if (( $(echo "$API_TIME < 2.0" | bc -l) )); then
          echo "‚úÖ API response time: ${API_TIME}s (< 2s target)"
        else
          echo "‚ö†Ô∏è API response time: ${API_TIME}s (> 2s target)"
          PERF_RESULT=1
        fi
        
        # Web response time check  
        WEB_TIME=$(curl -o /dev/null -s -w "%{time_total}" "${{ env.WEB_BASE_URL }}" || echo "999")
        WEB_TIME_MS=$(echo "$WEB_TIME * 1000" | bc)
        
        if (( $(echo "$WEB_TIME < 3.0" | bc -l) )); then
          echo "‚úÖ WEB response time: ${WEB_TIME}s (< 3s target)"
        else
          echo "‚ö†Ô∏è WEB response time: ${WEB_TIME}s (> 3s target)" 
          PERF_RESULT=1
        fi
        
        end_time=$(date +%s)
        PERF_DURATION=$((end_time - start_time))s
        
        if [ $PERF_RESULT -eq 0 ]; then
          PERF_STATUS="‚úÖ PASSED"
        else
          PERF_STATUS="‚ö†Ô∏è WARNINGS"
        fi
        
        # Update UAT report with detailed timing
        echo "| Performance Baseline | $PERF_STATUS | ${PERF_DURATION} | API: ${API_TIME}s, WEB: ${WEB_TIME}s |" >> UAT-Report.md
        
        # Set outputs
        echo "perf_status=$PERF_STATUS" >> $GITHUB_OUTPUT
        echo "perf_result=$PERF_RESULT" >> $GITHUB_OUTPUT
        echo "perf_duration=$PERF_DURATION" >> $GITHUB_OUTPUT

    - name: Generate Final UAT Report
      if: always()
      timeout-minutes: 3
      run: |
        echo "üìä Generating comprehensive UAT report..."
        
        # Calculate overall status
        HEALTH_FAILED=${{ steps.health_check.outputs.health_result != '0' && '1' || '0' }}
        E2E_FAILED=${{ steps.e2e_smoke.outputs.e2e_result != '0' && '1' || '0' }}  
        SECURITY_FAILED=${{ steps.security_check.outputs.security_result != '0' && '1' || '0' }}
        PERF_WARNED=${{ steps.performance_check.outputs.perf_result != '0' && '1' || '0' }}
        
        TOTAL_FAILURES=$((HEALTH_FAILED + E2E_FAILED + SECURITY_FAILED))
        
        if [ $TOTAL_FAILURES -eq 0 ]; then
          if [ $PERF_WARNED -eq 0 ]; then
            OVERALL_STATUS="‚úÖ UAT PASSED"
            UAT_RECOMMENDATION="üü¢ **RECOMMENDATION: APPROVED FOR RELEASE**"
          else
            OVERALL_STATUS="‚ö†Ô∏è UAT PASSED WITH WARNINGS"
            UAT_RECOMMENDATION="üü° **RECOMMENDATION: APPROVED WITH PERFORMANCE MONITORING**"
          fi
        else
          OVERALL_STATUS="‚ùå UAT FAILED"
          UAT_RECOMMENDATION="üî¥ **RECOMMENDATION: RELEASE BLOCKED - REQUIRES FIXES**"
        fi
        
        # Complete the UAT report
        cat >> UAT-Report.md << EOF
        
        ---
        
        ## üìã Detailed Test Results
        
        ### üîç Infrastructure Health Check
        **Status:** ${{ steps.health_check.outputs.health_status }}  
        **Duration:** ${{ steps.health_check.outputs.health_duration }}  
        **Details:** 
        - API health endpoints validation
        - Authentication flow testing  
        - Evidence workflow verification
        - Service connectivity checks
        
        ### üß™ E2E Smoke Tests
        **Status:** ${{ steps.e2e_smoke.outputs.e2e_status }}  
        **Duration:** ${{ steps.e2e_smoke.outputs.e2e_duration }}  
        **Details:**
        - User authentication workflows
        - Core application navigation
        - Critical user journeys
        - Cross-browser compatibility
        
        ### üîí Security Validation  
        **Status:** ${{ steps.security_check.outputs.security_status }}  
        **Duration:** ${{ steps.security_check.outputs.security_duration }}  
        **Details:**
        - HTTPS enforcement validation
        - Authentication requirement verification  
        - Security header inspection
        - Authorization boundary testing
        
        ### ‚ö° Performance Baseline
        **Status:** ${{ steps.performance_check.outputs.perf_status }}  
        **Duration:** ${{ steps.performance_check.outputs.perf_duration }}  
        **Details:**
        - API response time benchmarking
        - Web application load time analysis  
        - Network performance validation
        - Resource utilization assessment
        
        ---
        
        ## üéØ UAT Conclusion
        
        **Overall Status:** $OVERALL_STATUS  
        **Total Test Failures:** $TOTAL_FAILURES  
        **Performance Warnings:** $PERF_WARNED  
        
        $UAT_RECOMMENDATION
        
        ---
        
        ## üìù Release Readiness Checklist
        
        - [${{ steps.health_check.outputs.health_result == '0' && 'x' || ' ' }}] Infrastructure health checks passed
        - [${{ steps.e2e_smoke.outputs.e2e_result == '0' && 'x' || ' ' }}] E2E smoke tests completed successfully  
        - [${{ steps.security_check.outputs.security_result == '0' && 'x' || ' ' }}] Security validation requirements met
        - [${{ steps.performance_check.outputs.perf_result == '0' && 'x' || ' ' }}] Performance baseline within acceptable range
        
        ### ‚úÖ Pre-Release Requirements
        - [x] Deployment tag created and validated
        - [x] Staging environment deployment successful
        - [x] UAT automation execution completed
        - [${{ steps.health_check.outputs.health_result == '0' && steps.e2e_smoke.outputs.e2e_result == '0' && steps.security_check.outputs.security_result == '0' && 'x' || ' ' }}] All critical tests passed
        
        ---
        
        **UAT Report Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
        **Environment:** ${{ env.TEST_ENVIRONMENT }}  
        **Deployment Tag:** ${{ env.DEPLOYMENT_TAG }}  
        **GitHub Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}  
        
        EOF
        
        # Set final job outputs
        echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
        echo "total_failures=$TOTAL_FAILURES" >> $GITHUB_OUTPUT
        echo "uat_recommendation=$UAT_RECOMMENDATION" >> $GITHUB_OUTPUT
        
        echo "üìã UAT Report generation completed"

    - name: Upload UAT Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      timeout-minutes: 3
      with:
        name: uat-report-${{ env.DEPLOYMENT_TAG }}-${{ env.TEST_ENVIRONMENT }}
        path: |
          UAT-Report.md
          health-check.log
          web/smoke-results.json
        retention-days: 30

    - name: Comment UAT Results (if PR context available)
      if: always() && github.event.pull_request
      timeout-minutes: 2
      run: |
        echo "üí¨ Would post UAT results to PR (not applicable for workflow_dispatch)"
        echo "UAT Status: $(cat UAT-Report.md | grep 'Overall Status:' | head -1)"

    - name: Upload UAT Report to Job Summary  
      if: always()
      timeout-minutes: 2
      run: |
        echo "üìä Adding UAT report to job summary..."
        cat UAT-Report.md >> $GITHUB_STEP_SUMMARY

    - name: Fail job if UAT failed
      if: always()
      run: |
        TOTAL_FAILURES=${{ steps.generate-final-uat-report.outputs.total_failures || '0' }}
        if [ "$TOTAL_FAILURES" -gt 0 ]; then
          echo "‚ùå UAT validation failed with $TOTAL_FAILURES critical failures"
          exit 1
        else
          echo "‚úÖ UAT validation completed successfully"
          exit 0
        fi