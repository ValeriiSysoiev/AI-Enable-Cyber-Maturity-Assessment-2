name: Release Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  API_CONTAINER_APP: ${{ secrets.API_CONTAINER_APP }}
  WEB_CONTAINER_APP: ${{ secrets.WEB_CONTAINER_APP }}

jobs:
  check-credentials:
    runs-on: ubuntu-latest
    # Only run if Azure credentials are NOT configured
    if: ${{ secrets.AZURE_CREDENTIALS == '' }}
    
    steps:
    - name: Azure credentials not configured
      run: |
        echo "🔧 Azure Deployment Setup Required"
        echo ""
        echo "❌ AZURE_CREDENTIALS secret is not configured"
        echo ""
        echo "To enable Azure deployment, please configure the following secrets:"
        echo "  - AZURE_CREDENTIALS (JSON with clientId, clientSecret, subscriptionId, tenantId)"
        echo "  - AZURE_CONTAINER_REGISTRY"
        echo "  - AZURE_RESOURCE_GROUP"
        echo "  - API_CONTAINER_APP"
        echo "  - WEB_CONTAINER_APP"
        echo ""
        echo "📚 For detailed setup instructions, see:"
        echo "  .github/DEPLOYMENT_SETUP.md"
        echo ""
        echo "✅ CI validation will still run to test your code!"

  build-and-deploy:
    runs-on: ubuntu-latest
    # Only run if Azure credentials are configured
    if: ${{ secrets.AZURE_CREDENTIALS != '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Azure credentials
      run: |
        if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
          echo "❌ AZURE_CREDENTIALS secret is not configured"
          echo "Please configure the following secrets in your GitHub repository:"
          echo "  - AZURE_CREDENTIALS (JSON with clientId, clientSecret, subscriptionId, tenantId)"
          echo "  - AZURE_CONTAINER_REGISTRY"
          echo "  - AZURE_RESOURCE_GROUP" 
          echo "  - API_CONTAINER_APP"
          echo "  - WEB_CONTAINER_APP"
          echo ""
          echo "For setup instructions, visit: https://github.com/Azure/login#readme"
          exit 1
        fi

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Validate environment variables
      run: |
        echo "Validating required environment variables..."
        
        missing_vars=()
        
        if [ -z "${{ env.AZURE_CONTAINER_REGISTRY }}" ]; then
          missing_vars+=("AZURE_CONTAINER_REGISTRY")
        fi
        
        if [ -z "${{ env.AZURE_RESOURCE_GROUP }}" ]; then
          missing_vars+=("AZURE_RESOURCE_GROUP")
        fi
        
        if [ -z "${{ env.API_CONTAINER_APP }}" ]; then
          missing_vars+=("API_CONTAINER_APP")
        fi
        
        if [ -z "${{ env.WEB_CONTAINER_APP }}" ]; then
          missing_vars+=("WEB_CONTAINER_APP")
        fi
        
        if [ ${#missing_vars[@]} -ne 0 ]; then
          echo "❌ Missing required secrets:"
          printf '  - %s\n' "${missing_vars[@]}"
          echo ""
          echo "Please configure these secrets in your GitHub repository settings."
          exit 1
        fi
        
        echo "✅ All required environment variables are configured"

    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}

    - name: Build and push API image
      run: |
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/api:${{ github.sha }} ./app
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/api:${{ github.sha }}

    - name: Build and push WEB image
      run: |
        docker build \
          --build-arg GITHUB_SHA=${{ github.sha }} \
          --build-arg BUILD_SHA=${{ github.sha }} \
          --build-arg AUTH_MODE=${{ secrets.AUTH_MODE || 'aad' }} \
          --build-arg AZURE_AD_CLIENT_ID=${{ secrets.AZURE_AD_CLIENT_ID }} \
          --build-arg AZURE_AD_TENANT_ID=${{ secrets.AZURE_AD_TENANT_ID }} \
          --build-arg AZURE_AD_CLIENT_SECRET=${{ secrets.AZURE_AD_CLIENT_SECRET }} \
          --build-arg DEMO_E2E=${{ secrets.DEMO_E2E || '0' }} \
          --build-arg NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL || 'https://web-cybermat-prd.azurewebsites.net' }} \
          --build-arg NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
          -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/web:${{ github.sha }} ./web
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/web:${{ github.sha }}

    - name: Record current revisions before deployment
      id: record_revisions
      run: |
        echo "Recording current revisions for rollback purposes..."
        
        # Get current API revision
        API_CURRENT_REVISION=$(az containerapp revision list \
          --name ${{ env.API_CONTAINER_APP }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[?properties.active].name" \
          --output tsv | head -1)
        echo "api_current_revision=$API_CURRENT_REVISION" >> $GITHUB_OUTPUT
        echo "Current API revision: $API_CURRENT_REVISION"
        
        # Get current WEB revision
        WEB_CURRENT_REVISION=$(az containerapp revision list \
          --name ${{ env.WEB_CONTAINER_APP }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[?properties.active].name" \
          --output tsv | head -1)
        echo "web_current_revision=$WEB_CURRENT_REVISION" >> $GITHUB_OUTPUT
        echo "Current WEB revision: $WEB_CURRENT_REVISION"

    - name: Deploy API Container App
      id: deploy_api
      run: |
        echo "Deploying API container app..."
        az containerapp update \
          --name ${{ env.API_CONTAINER_APP }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/api:${{ github.sha }}
        
        # Capture deployment success
        if [ $? -eq 0 ]; then
          echo "api_deploy_success=true" >> $GITHUB_OUTPUT
          echo "API deployment successful"
        else
          echo "api_deploy_success=false" >> $GITHUB_OUTPUT
          echo "API deployment failed"
          exit 1
        fi

    - name: Deploy WEB Container App
      id: deploy_web
      run: |
        echo "Deploying WEB container app..."
        az containerapp update \
          --name ${{ env.WEB_CONTAINER_APP }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/web:${{ github.sha }}
        
        # Capture deployment success
        if [ $? -eq 0 ]; then
          echo "web_deploy_success=true" >> $GITHUB_OUTPUT
          echo "WEB deployment successful"
        else
          echo "web_deploy_success=false" >> $GITHUB_OUTPUT
          echo "WEB deployment failed"
          exit 1
        fi

    - name: Update WEB App Environment Variables
      run: |
        echo "Setting version environment variables for WEB app..."
        # Check if this is an App Service or Container App deployment
        if az webapp show --name ${{ env.WEB_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} 2>/dev/null; then
          # App Service deployment
          echo "Detected App Service - setting environment variables"
          az webapp config appsettings set \
            --name ${{ env.WEB_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings \
              GITHUB_SHA=${{ github.sha }} \
              BUILD_SHA=${{ github.sha }} \
              NEXT_PUBLIC_BUILD_SHA=${{ github.sha }}
          echo "✅ App Service environment variables updated"
        else
          # Container App deployment
          echo "Detected Container App - environment variables set via container image"
        fi

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, attempting rollback..."
        ROLLBACK_FAILED=false
        
        # Rollback API if it was successfully deployed but WEB failed
        if [ "${{ steps.deploy_api.outputs.api_deploy_success }}" == "true" ] && [ "${{ steps.record_revisions.outputs.api_current_revision }}" != "" ]; then
          echo "Rolling back API to revision: ${{ steps.record_revisions.outputs.api_current_revision }}"
          az containerapp revision activate \
            --name ${{ env.API_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --revision ${{ steps.record_revisions.outputs.api_current_revision }}
          
          if [ $? -ne 0 ]; then
            echo "ERROR: API rollback failed!"
            ROLLBACK_FAILED=true
          else
            echo "API rollback successful"
          fi
        fi
        
        # Rollback WEB if it was successfully deployed but later steps failed
        if [ "${{ steps.deploy_web.outputs.web_deploy_success }}" == "true" ] && [ "${{ steps.record_revisions.outputs.web_current_revision }}" != "" ]; then
          echo "Rolling back WEB to revision: ${{ steps.record_revisions.outputs.web_current_revision }}"
          az containerapp revision activate \
            --name ${{ env.WEB_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --revision ${{ steps.record_revisions.outputs.web_current_revision }}
          
          if [ $? -ne 0 ]; then
            echo "ERROR: WEB rollback failed!"
            ROLLBACK_FAILED=true
          else
            echo "WEB rollback successful"
          fi
        fi
        
        # Fail the job if rollbacks failed
        if [ "$ROLLBACK_FAILED" == "true" ]; then
          echo "CRITICAL: One or more rollbacks failed! Manual intervention required."
          exit 1
        fi
        
        echo "Rollback completed successfully"
        exit 1  # Still fail the job since original deployment failed

    - name: Wait for deployment stabilization
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 30
        
        # Check that both apps are running
        API_STATUS=$(az containerapp show --name ${{ env.API_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.provisioningState" -o tsv)
        WEB_STATUS=$(az containerapp show --name ${{ env.WEB_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.provisioningState" -o tsv)
        
        echo "API Status: $API_STATUS"
        echo "WEB Status: $WEB_STATUS"
        
        if [ "$API_STATUS" != "Succeeded" ] || [ "$WEB_STATUS" != "Succeeded" ]; then
          echo "❌ Apps not in succeeded state"
          exit 1
        fi

    - name: Run deployment verification
      run: |
        echo "🔍 Running enhanced deployment verification..."
        
        # Make verify script executable
        chmod +x scripts/verify_live.sh
        
        # Run verification with deployment context
        export DEPLOYMENT_VERIFICATION=true
        export GITHUB_SHA=${{ github.sha }}
        
        # Run verification and capture output
        if ./scripts/verify_live.sh 2>&1 | tee verification-output.log; then
          echo "✅ Deployment verification passed"
        else
          echo "❌ Deployment verification failed"
          
          # Show verification output in summary
          echo "## Deployment Verification Failed" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          tail -20 verification-output.log >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          
          exit 1
        fi

    - name: Run smoke tests on deployed environment
      run: |
        echo "🧪 Running smoke tests on deployed environment..."
        
        # Get app URLs
        API_URL=$(az containerapp show --name ${{ env.API_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
        WEB_URL=$(az containerapp show --name ${{ env.WEB_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
        
        if [ -n "$API_URL" ]; then
          API_URL="https://$API_URL"
        fi
        if [ -n "$WEB_URL" ]; then
          WEB_URL="https://$WEB_URL"
        fi
        
        echo "Testing API: $API_URL"
        echo "Testing WEB: $WEB_URL"
        
        # Test API health
        if [ -n "$API_URL" ]; then
          if curl -f -s "$API_URL/health" >/dev/null; then
            echo "✅ API health check passed"
          else
            echo "❌ API health check failed"
            exit 1
          fi
        fi
        
        # Test WEB accessibility
        if [ -n "$WEB_URL" ]; then
          if curl -f -s "$WEB_URL" >/dev/null; then
            echo "✅ WEB accessibility check passed"
          else
            echo "❌ WEB accessibility check failed"
            exit 1
          fi
        fi

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-logs
        path: |
          verification-output.log
        retention-days: 14

    - name: Tag successful deployment
      if: success()
      run: |
        echo "🏷️ Tagging successful deployment..."
        
        # Create deployment tag
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        TAG_NAME="deploy-$(date +%Y%m%d-%H%M%S)"
        git tag -a "$TAG_NAME" -m "Deployment $TAG_NAME - commit ${{ github.sha }}"
        
        echo "Created tag: $TAG_NAME"
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

    - name: Generate deployment summary
      if: always()
      run: |
        echo "📋 Generating deployment summary..."
        
        cat > deployment-summary.md << EOF
        # 🚀 Deployment Summary
        
        **Status:** ${{ job.status }}
        **Commit:** ${{ github.sha }}
        **Timestamp:** $(date -u)
        
        ## Deployment Details
        - **API Image:** ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/api:${{ github.sha }}
        - **WEB Image:** ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/web:${{ github.sha }}
        - **Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}
        
        ## Verification Results
        - **Infrastructure Health:** ✅ Passed
        - **Service Connectivity:** ✅ Passed
        - **Smoke Tests:** ✅ Passed
        
        ## Next Steps
        - Monitor application performance
        - Review deployment logs for any warnings
        - Run full E2E test suite if needed
        
        EOF
        
        cat deployment-summary.md >> $GITHUB_STEP_SUMMARY
