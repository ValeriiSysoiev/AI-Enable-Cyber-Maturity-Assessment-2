#!/bin/bash

# App Service Rollback Configuration Script
# Emergency rollback for web-cybermat-prd to last known working state
# Auto-generated by AppServiceConfigurator Agent

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="${SCRIPT_DIR}/../logs/agents/appservice-configurator.log"
RESOURCE_GROUP="rg-cybermat-prd"
WEB_APP_NAME="web-cybermat-prd"

# Known working configuration values (based on current production state)
ROLLBACK_RUNTIME="NODE|20-lts"
ROLLBACK_STARTUP_COMMAND="node .next/standalone/server.js"
FALLBACK_STARTUP_COMMAND="node server.js"

# Logging function
log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${timestamp} - ROLLBACK - $1" | tee -a "$LOG_FILE"
}

# Emergency rollback function
emergency_rollback() {
    log "=== EMERGENCY ROLLBACK INITIATED ==="
    log "RESOURCE GROUP: $RESOURCE_GROUP"
    log "WEB APP NAME: $WEB_APP_NAME"
    
    log "Step 1: Restoring runtime configuration..."
    az webapp config set \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --linux-fx-version "$ROLLBACK_RUNTIME" \
        --output table | tee -a "$LOG_FILE"
    
    log "Step 2: Restoring startup command..."
    az webapp config set \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --startup-file "$ROLLBACK_STARTUP_COMMAND" \
        --output table | tee -a "$LOG_FILE"
    
    log "Step 3: Restoring essential app settings..."
    az webapp config appsettings set \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --settings \
            "PORT=8080" \
            "WEBSITES_PORT=8080" \
            "NODE_ENV=production" \
            "WEBSITE_NODE_DEFAULT_VERSION=20-lts" \
            "NEXT_TELEMETRY_DISABLED=1" \
            "SCM_DO_BUILD_DURING_DEPLOYMENT=false" \
            "NEXT_PUBLIC_API_BASE_URL=https://api-cybermat-prd-aca.icystone-69c102b0.westeurope.azurecontainerapps.io" \
        --output table | tee -a "$LOG_FILE"
    
    log "Step 4: Restoring general settings..."
    az webapp config set \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --always-on true \
        --http20-enabled true \
        --min-tls-version "1.2" \
        --ftps-state "FtpsOnly" \
        --output table | tee -a "$LOG_FILE"
    
    log "Rollback completed. Waiting 30 seconds for app restart..."
    sleep 30
}

# Alternative startup command rollback
try_fallback_startup() {
    log "=== TRYING FALLBACK STARTUP COMMAND ==="
    log "Switching to alternative startup command: $FALLBACK_STARTUP_COMMAND"
    
    az webapp config set \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --startup-file "$FALLBACK_STARTUP_COMMAND" \
        --output table | tee -a "$LOG_FILE"
    
    log "Fallback startup command applied. Waiting 30 seconds..."
    sleep 30
}

# Health check after rollback
rollback_health_check() {
    log "=== ROLLBACK HEALTH CHECK ==="
    
    local web_app_url="https://${WEB_APP_NAME}.azurewebsites.net"
    log "Checking rollback health at: $web_app_url"
    
    local http_code=$(curl -s -o /dev/null -w "%{http_code}" "$web_app_url" || echo "000")
    
    if [ "$http_code" = "200" ]; then
        log "SUCCESS: Rollback successful - app responding with HTTP 200"
        return 0
    elif [ "$http_code" = "000" ]; then
        log "WARNING: Cannot reach app after rollback - may need manual intervention"
        return 1
    else
        log "WARNING: App responding with HTTP $http_code after rollback"
        return 1
    fi
}

# Restore from backup configuration
restore_from_backup() {
    log "=== RESTORING FROM CONFIGURATION BACKUP ==="
    
    # Find the most recent backup file
    local latest_backup=$(ls -t "${SCRIPT_DIR}/../logs/agents/appservice-config-backup-"*.json 2>/dev/null | head -1)
    
    if [ -z "$latest_backup" ]; then
        log "ERROR: No configuration backup found. Cannot restore from backup."
        return 1
    fi
    
    log "Found backup: $latest_backup"
    
    # Extract critical settings from backup
    local runtime=$(cat "$latest_backup" | jq -r '.criticalSettings.linuxFxVersion // "NODE|20-lts"')
    local startup=$(cat "$latest_backup" | jq -r '.criticalSettings.appCommandLine // "node .next/standalone/server.js"')
    local always_on=$(cat "$latest_backup" | jq -r '.criticalSettings.alwaysOn // true')
    local http20=$(cat "$latest_backup" | jq -r '.criticalSettings.http20Enabled // true')
    local tls_version=$(cat "$latest_backup" | jq -r '.criticalSettings.minTlsVersion // "1.2"')
    local ftps_state=$(cat "$latest_backup" | jq -r '.criticalSettings.ftpsState // "FtpsOnly"')
    
    log "Restoring runtime: $runtime"
    log "Restoring startup: $startup"
    log "Restoring always-on: $always_on"
    
    # Apply backup configuration
    az webapp config set \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --linux-fx-version "$runtime" \
        --startup-file "$startup" \
        --always-on "$always_on" \
        --http20-enabled "$http20" \
        --min-tls-version "$tls_version" \
        --ftps-state "$ftps_state" \
        --output table | tee -a "$LOG_FILE"
    
    log "Configuration restored from backup. Waiting for restart..."
    sleep 30
}

# Show current state
show_current_state() {
    log "=== CURRENT APP SERVICE STATE ==="
    
    local config=$(az webapp config show \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --query "{
            name:name,
            state:state,
            linuxFxVersion:linuxFxVersion,
            appCommandLine:appCommandLine,
            alwaysOn:alwaysOn,
            http20Enabled:http20Enabled
        }" \
        --output json)
    
    echo "$config" | tee -a "$LOG_FILE"
}

# Interactive rollback menu
rollback_menu() {
    log "=== ROLLBACK OPTIONS MENU ==="
    echo "Select rollback option:"
    echo "1) Emergency rollback to known working state"
    echo "2) Try fallback startup command"
    echo "3) Restore from configuration backup"
    echo "4) Show current state only"
    echo "5) Exit"
    
    read -p "Enter choice (1-5): " choice
    
    case $choice in
        1)
            emergency_rollback
            rollback_health_check
            ;;
        2)
            try_fallback_startup
            rollback_health_check
            ;;
        3)
            restore_from_backup
            rollback_health_check
            ;;
        4)
            show_current_state
            ;;
        5)
            log "Rollback cancelled by user"
            exit 0
            ;;
        *)
            log "Invalid choice. Exiting."
            exit 1
            ;;
    esac
}

# Main execution
main() {
    log "=========================================="
    log "APP SERVICE ROLLBACK SCRIPT INITIATED"
    log "Timestamp: $(date -u '+%Y-%m-%dT%H:%M:%SZ')"
    log "=========================================="
    
    # Check if running in interactive mode
    if [ "$1" = "--emergency" ]; then
        log "EMERGENCY ROLLBACK MODE ACTIVATED"
        emergency_rollback
        rollback_health_check
    elif [ "$1" = "--backup" ]; then
        log "BACKUP RESTORE MODE ACTIVATED"
        restore_from_backup
        rollback_health_check
    elif [ "$1" = "--fallback" ]; then
        log "FALLBACK STARTUP MODE ACTIVATED"
        try_fallback_startup
        rollback_health_check
    else
        rollback_menu
    fi
    
    show_current_state
    
    log "=========================================="
    log "ROLLBACK OPERATION COMPLETED"
    log "Check log file for details: $LOG_FILE"
    log "=========================================="
}

# Handle script interruption
trap 'log "Rollback script interrupted"; exit 1' INT TERM

# Execute main function
main "$@"