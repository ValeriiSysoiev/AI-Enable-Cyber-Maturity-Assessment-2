#!/bin/bash

# Production App Service Configuration Script
# Configures web-cybermat-prd with complete Node.js 20 setup and required environment variables
# Auto-generated by AppServiceConfigurator Agent

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="${SCRIPT_DIR}/../logs/agents/appservice-configurator.log"
RESOURCE_GROUP="rg-cybermat-prd"
WEB_APP_NAME="web-cybermat-prd"

# Logging function
log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${timestamp} - $1" | tee -a "$LOG_FILE"
}

# Check Azure CLI authentication
check_azure_auth() {
    log "Checking Azure CLI authentication..."
    if ! az account show &> /dev/null; then
        log "ERROR: Not authenticated to Azure CLI. Please run 'az login'"
        exit 1
    fi
    
    local account_info=$(az account show --query "{subscriptionId:id,name:name}" -o json)
    log "Authenticated to Azure: $(echo $account_info | jq -r '.name')"
    log "Subscription ID: $(echo $account_info | jq -r '.subscriptionId')"
}

# Configure Node.js 20 runtime
configure_runtime() {
    log "=== CONFIGURING NODE.JS 20 RUNTIME ==="
    
    log "Setting Linux runtime to Node.js 20 LTS..."
    az webapp config set \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --linux-fx-version "NODE|20-lts" \
        --output json | tee -a "$LOG_FILE"
    
    log "Runtime configuration completed"
}

# Configure application settings with required environment variables
configure_app_settings() {
    log "=== CONFIGURING APPLICATION SETTINGS ==="
    
    log "Setting required environment variables and app settings..."
    az webapp config appsettings set \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --settings \
            "PORT=8080" \
            "WEBSITES_PORT=8080" \
            "NODE_ENV=production" \
            "WEBSITE_NODE_DEFAULT_VERSION=20-lts" \
            "NEXT_TELEMETRY_DISABLED=1" \
            "SCM_DO_BUILD_DURING_DEPLOYMENT=false" \
            "WEBSITE_HTTPLOGGING_RETENTION_DAYS=7" \
            "NEXT_PUBLIC_API_BASE_URL=https://api-cybermat-prd-aca.icystone-69c102b0.westeurope.azurecontainerapps.io" \
            "WEBSITE_TIME_ZONE=Europe/London" \
            "WEBSITE_DYNAMIC_CACHE=0" \
            "NODE_OPTIONS=--max-old-space-size=1024" \
        --output json | tee -a "$LOG_FILE"
    
    log "App settings configuration completed"
}

# Configure startup command
configure_startup_command() {
    log "=== CONFIGURING STARTUP COMMAND ==="
    
    log "Setting startup command for Next.js standalone server..."
    az webapp config set \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --startup-file "node .next/standalone/server.js" \
        --output json | tee -a "$LOG_FILE"
    
    log "Startup command configuration completed"
}

# Configure general web app settings
configure_general_settings() {
    log "=== CONFIGURING GENERAL SETTINGS ==="
    
    log "Configuring always-on, http20, and other general settings..."
    az webapp config set \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --always-on true \
        --http20-enabled true \
        --min-tls-version "1.2" \
        --ftps-state "FtpsOnly" \
        --output json | tee -a "$LOG_FILE"
    
    log "General settings configuration completed"
}

# Verify configuration
verify_configuration() {
    log "=== VERIFYING CONFIGURATION ==="
    
    log "Getting current web app configuration..."
    local config=$(az webapp config show \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --query "{
            linuxFxVersion:linuxFxVersion,
            appCommandLine:appCommandLine,
            alwaysOn:alwaysOn,
            http20Enabled:http20Enabled,
            minTlsVersion:minTlsVersion,
            ftpsState:ftpsState,
            state:state
        }" \
        --output json)
    
    log "Current configuration:"
    echo "$config" | tee -a "$LOG_FILE"
    
    log "Getting current app settings..."
    local app_settings=$(az webapp config appsettings list \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --query "[?contains('PORT,WEBSITES_PORT,NODE_ENV,WEBSITE_NODE_DEFAULT_VERSION,NEXT_TELEMETRY_DISABLED,SCM_DO_BUILD_DURING_DEPLOYMENT,NEXT_PUBLIC_API_BASE_URL,NODE_OPTIONS', name)].{name:name, value:value}" \
        --output json)
    
    log "Current app settings:"
    echo "$app_settings" | tee -a "$LOG_FILE"
}

# Health check function
perform_health_check() {
    log "=== PERFORMING HEALTH CHECK ==="
    
    local web_app_url="https://${WEB_APP_NAME}.azurewebsites.net"
    log "Checking web app health at: $web_app_url"
    
    # Wait for app to restart
    log "Waiting 30 seconds for app restart..."
    sleep 30
    
    # Try to get health status
    local http_code=$(curl -s -o /dev/null -w "%{http_code}" "$web_app_url" || echo "000")
    
    if [ "$http_code" = "200" ]; then
        log "SUCCESS: Web app is responding with HTTP 200"
    elif [ "$http_code" = "000" ]; then
        log "WARNING: Unable to reach web app - may still be starting up"
    else
        log "WARNING: Web app responded with HTTP $http_code"
    fi
    
    log "Health check completed"
}

# Main configuration execution
main() {
    log "=========================================="
    log "STARTING PRODUCTION APP SERVICE CONFIGURATION"
    log "Resource Group: $RESOURCE_GROUP"
    log "Web App Name: $WEB_APP_NAME"
    log "=========================================="
    
    check_azure_auth
    configure_runtime
    configure_app_settings
    configure_startup_command
    configure_general_settings
    verify_configuration
    perform_health_check
    
    log "=========================================="
    log "PRODUCTION APP SERVICE CONFIGURATION COMPLETED"
    log "Check log file for detailed output: $LOG_FILE"
    log "=========================================="
}

# Execute main function
main "$@"