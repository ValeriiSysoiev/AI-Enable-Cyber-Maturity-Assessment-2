#!/bin/bash

# App Service Master Configuration Script
# Orchestrates all App Service configuration, backup, and healing operations
# Auto-generated by AppServiceConfigurator Agent

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="${SCRIPT_DIR}/../logs/agents/appservice-configurator.log"

# Logging function
log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${timestamp} - MASTER - $1" | tee -a "$LOG_FILE"
}

# Show usage information
show_usage() {
    cat <<EOF
App Service Master Configuration Script

Usage: $0 [OPTION]

Options:
  configure     - Apply production configuration to web-cybermat-prd
  backup        - Capture current configuration for preservation
  rollback      - Emergency rollback to last known working state
  heal          - Run self-healing diagnostics and repairs
  monitor       - Start continuous health monitoring
  status        - Show current App Service status
  all           - Run backup, then configure (recommended for first run)
  help          - Show this help message

Examples:
  $0 all        # Complete setup: backup current config, then apply new config
  $0 configure  # Apply production configuration only
  $0 rollback   # Emergency rollback
  $0 heal       # Self-healing diagnostics
  $0 monitor    # Start monitoring mode
  
EOF
}

# Check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check Azure CLI
    if ! command -v az &> /dev/null; then
        log "ERROR: Azure CLI is not installed"
        exit 1
    fi
    
    # Check authentication
    if ! az account show &> /dev/null; then
        log "ERROR: Not authenticated to Azure CLI. Please run 'az login'"
        exit 1
    fi
    
    # Make scripts executable
    chmod +x "${SCRIPT_DIR}"/appservice-*.sh
    chmod +x "${SCRIPT_DIR}"/capture-current-config.sh
    
    log "Prerequisites check completed successfully"
}

# Run configuration backup
run_backup() {
    log "=== RUNNING CONFIGURATION BACKUP ==="
    "${SCRIPT_DIR}/capture-current-config.sh"
}

# Run production configuration
run_configure() {
    log "=== RUNNING PRODUCTION CONFIGURATION ==="
    "${SCRIPT_DIR}/appservice-prd-config.sh"
}

# Run rollback
run_rollback() {
    log "=== RUNNING EMERGENCY ROLLBACK ==="
    "${SCRIPT_DIR}/appservice-rollback.sh" "$@"
}

# Run self-healing
run_heal() {
    log "=== RUNNING SELF-HEALING ==="
    "${SCRIPT_DIR}/appservice-self-heal.sh" "$@"
}

# Show current status
show_status() {
    log "=== CHECKING CURRENT STATUS ==="
    
    local config=$(az webapp config show \
        --resource-group "rg-cybermat-prd" \
        --name "web-cybermat-prd" \
        --query "{
            name:name,
            state:state,
            linuxFxVersion:linuxFxVersion,
            appCommandLine:appCommandLine,
            alwaysOn:alwaysOn,
            http20Enabled:http20Enabled
        }" \
        --output json 2>/dev/null || echo '{"error":"Failed to get status"}')
    
    echo "Current App Service Status:"
    echo "$config" | jq '.' 2>/dev/null || echo "$config"
    
    # Quick health check
    local health_code=$(curl -s -o /dev/null -w "%{http_code}" "https://web-cybermat-prd.azurewebsites.net" --max-time 15 || echo "000")
    log "Health check: HTTP $health_code"
}

# Main execution
main() {
    log "=========================================="
    log "APP SERVICE MASTER SCRIPT INITIATED"
    log "Timestamp: $(date -u '+%Y-%m-%dT%H:%M:%SZ')"
    log "=========================================="
    
    case "${1:-help}" in
        configure)
            check_prerequisites
            run_configure
            ;;
        backup)
            check_prerequisites
            run_backup
            ;;
        rollback)
            check_prerequisites
            shift
            run_rollback "$@"
            ;;
        heal)
            check_prerequisites
            shift
            run_heal "$@"
            ;;
        monitor)
            check_prerequisites
            run_heal --monitor
            ;;
        status)
            check_prerequisites
            show_status
            ;;
        all)
            check_prerequisites
            run_backup
            log "Waiting 10 seconds between backup and configuration..."
            sleep 10
            run_configure
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            echo "Invalid option: $1"
            show_usage
            exit 1
            ;;
    esac
    
    log "=========================================="
    log "MASTER SCRIPT OPERATION COMPLETED"
    log "=========================================="
}

# Handle script interruption
trap 'log "Master script interrupted"; exit 1' INT TERM

# Execute main function
main "$@"