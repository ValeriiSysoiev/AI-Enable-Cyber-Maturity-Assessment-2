#!/bin/bash

# UAT Test Data Setup Script
# This script loads test data required for UAT execution

set -euo pipefail

# Configuration
API_BASE_URL="${API_BASE_URL:-https://api-staging.eastus.azurecontainerapps.io}"
UAT_MODE="${UAT_MODE:-true}"
TEST_DATA_DIR="${TEST_DATA_DIR:-test-data}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites for UAT test data setup"
    
    if ! command -v curl &> /dev/null; then
        log_error "curl is required but not installed"
        exit 1
    fi
    
    if ! command -v jq &> /dev/null; then
        log_error "jq is required but not installed"
        exit 1
    fi
    
    # Test API connectivity
    if ! curl -sf "$API_BASE_URL/health" >/dev/null; then
        log_error "Cannot connect to API at $API_BASE_URL"
        exit 1
    fi
    
    log_success "Prerequisites check passed"
}

# Get admin token for setup
get_admin_token() {
    log_info "Authenticating admin user for test data setup"
    
    # Try to authenticate with default admin credentials
    local admin_response\n    admin_response=$(curl -s -X POST "$API_BASE_URL/api/auth/login" \\\n        -H "Content-Type: application/json" \\\n        -d '{\n            "email": "admin@staging.local",\n            "password": "Admin_Setup_Pass123!"\n        }')\n    \n    if echo "$admin_response" | jq -e '.token' >/dev/null 2>&1; then\n        echo "$admin_response" | jq -r '.token'\n        return 0\n    else\n        log_error "Failed to authenticate admin user for test data setup"\n        log_error "Please ensure admin credentials are configured in staging"\n        return 1\n    fi\n}\n\n# Create test users\ncreate_test_users() {\n    local admin_token="$1"\n    log_info "Creating UAT test users"\n    \n    local users=(\n        '{\n            "id": "uat-admin-001",\n            "email": "uat.admin@staging.local",\n            "name": "UAT Admin User",\n            "role": "admin",\n            "password": "UAT_Test_Pass123!",\n            "engagements": ["eng-test-001", "eng-test-002"],\n            "active": true\n        }'\n        '{\n            "id": "uat-analyst-001",\n            "email": "uat.analyst@staging.local",\n            "name": "UAT Analyst User",\n            "role": "analyst",\n            "password": "UAT_Test_Pass123!",\n            "engagements": ["eng-test-001"],\n            "active": true\n        }'\n        '{\n            "id": "uat-viewer-001",\n            "email": "uat.viewer@staging.local",\n            "name": "UAT Viewer User",\n            "role": "viewer",\n            "password": "UAT_Test_Pass123!",\n            "engagements": ["eng-test-002"],\n            "active": true\n        }'\n    )\n    \n    for user_data in "${users[@]}"; do\n        local email\n        email=$(echo "$user_data" | jq -r '.email')\n        \n        local response\n        response=$(curl -s -X POST "$API_BASE_URL/api/admin/users" \\\n            -H "Authorization: Bearer $admin_token" \\\n            -H "Content-Type: application/json" \\\n            -d "$user_data")\n        \n        if echo "$response" | jq -e '.id' >/dev/null 2>&1; then\n            log_success "Created user: $email"\n        else\n            # Check if user already exists\n            local existing\n            existing=$(curl -s -H "Authorization: Bearer $admin_token" \\\n                "$API_BASE_URL/api/admin/users?email=$email")\n            \n            if echo "$existing" | jq -e '.[] | select(.email == "'"$email"'")' >/dev/null 2>&1; then\n                log_warning "User already exists: $email"\n            else\n                log_error "Failed to create user: $email"\n                echo "$response" | jq -r '.error // "Unknown error"'\n            fi\n        fi\n    done\n}\n\n# Create test engagements\ncreate_test_engagements() {\n    local admin_token="$1"\n    log_info "Creating UAT test engagements"\n    \n    local engagements=(\n        '{\n            "id": "eng-test-001",\n            "name": "UAT Test Engagement 001",\n            "description": "Primary UAT testing engagement for comprehensive scenario testing",\n            "client": "UAT Test Client A",\n            "status": "active",\n            "framework": "nist-csf",\n            "start_date": "'$(date -d '-30 days' +%Y-%m-%d)'",\n            "end_date": "'$(date -d '+60 days' +%Y-%m-%d)'",\n            "team_members": [\n                {"user_id": "uat-admin-001", "role": "lead"},\n                {"user_id": "uat-analyst-001", "role": "analyst"}\n            ],\n            "settings": {\n                "enable_recording": true,\n                "require_consent": true,\n                "enable_mcp_tools": true,\n                "enable_ai_analysis": true\n            }\n        }'\n        '{\n            "id": "eng-test-002",\n            "name": "UAT Test Engagement 002",\n            "description": "Secondary UAT testing engagement for ABAC isolation testing",\n            "client": "UAT Test Client B",\n            "status": "active",\n            "framework": "iso-27001",\n            "start_date": "'$(date -d '-15 days' +%Y-%m-%d)'",\n            "end_date": "'$(date -d '+45 days' +%Y-%m-%d)'",\n            "team_members": [\n                {"user_id": "uat-admin-001", "role": "lead"},\n                {"user_id": "uat-viewer-001", "role": "viewer"}\n            ],\n            "settings": {\n                "enable_recording": false,\n                "require_consent": false,\n                "enable_mcp_tools": false,\n                "enable_ai_analysis": true\n            }\n        }'\n    )\n    \n    for engagement_data in "${engagements[@]}"; do\n        local eng_id\n        eng_id=$(echo "$engagement_data" | jq -r '.id')\n        \n        local response\n        response=$(curl -s -X POST "$API_BASE_URL/api/engagements" \\\n            -H "Authorization: Bearer $admin_token" \\\n            -H "Content-Type: application/json" \\\n            -d "$engagement_data")\n        \n        if echo "$response" | jq -e '.id' >/dev/null 2>&1; then\n            log_success "Created engagement: $eng_id"\n        else\n            # Check if engagement already exists\n            local existing\n            existing=$(curl -s -H "Authorization: Bearer $admin_token" \\\n                "$API_BASE_URL/api/engagements/$eng_id")\n            \n            if echo "$existing" | jq -e '.id' >/dev/null 2>&1; then\n                log_warning "Engagement already exists: $eng_id"\n            else\n                log_error "Failed to create engagement: $eng_id"\n                echo "$response" | jq -r '.error // "Unknown error"'\n            fi\n        fi\n    done\n}\n\n# Create test data directory if it doesn't exist\ncreate_test_files() {\n    log_info "Creating test files for document processing"\n    \n    mkdir -p "$TEST_DATA_DIR"\n    \n    # Create sample PDF content (mock)\n    cat > "$TEST_DATA_DIR/sample-security-policy.md" << 'EOF'\n# Sample Security Policy\n\n## Password Requirements\n\n- Minimum 12 characters\n- Must contain uppercase, lowercase, numbers, and special characters\n- Cannot reuse last 12 passwords\n- Must be changed every 90 days\n\n## Access Control\n\n- All access must be authorized by data owner\n- Multi-factor authentication required for privileged accounts\n- Access reviews conducted quarterly\n\n## Data Classification\n\n- **Public**: Information that can be freely shared\n- **Internal**: Information for internal use only\n- **Confidential**: Information that could harm the organization if disclosed\n- **Restricted**: Highly sensitive information requiring special handling\n\n## Incident Response\n\n1. **Detection**: Security events are monitored 24/7\n2. **Analysis**: Incidents are triaged within 1 hour\n3. **Containment**: Critical incidents contained within 4 hours\n4. **Recovery**: Systems restored according to RTO/RPO targets\n5. **Lessons Learned**: Post-incident review conducted within 5 business days\nEOF\n    \n    # Create sample assessment data\n    cat > "$TEST_DATA_DIR/sample-assessment-results.json" << 'EOF'\n{\n  "assessment_id": "assess-001",\n  "engagement_id": "eng-test-001",\n  "framework": "nist-csf",\n  "results": {\n    "identify": {\n      "score": 75,\n      "maturity": "defined",\n      "gaps": [\n        {\n          "control": "ID.AM-1",\n          "description": "Asset inventory incomplete",\n          "risk": "medium",\n          "recommendation": "Implement automated asset discovery"\n        }\n      ]\n    },\n    "protect": {\n      "score": 82,\n      "maturity": "managed",\n      "gaps": [\n        {\n          "control": "PR.AC-1",\n          "description": "Access control policy needs updates",\n          "risk": "low",\n          "recommendation": "Update policy to reflect current standards"\n        }\n      ]\n    }\n  }\n}\nEOF\n    \n    # Create sample meeting transcript\n    cat > "$TEST_DATA_DIR/sample-meeting-transcript.txt" << 'EOF'\n[00:00:00] John Smith: Good morning everyone, let's begin our security assessment meeting.\n\n[00:00:15] Jane Doe: Thank you John. I'd like to start by reviewing our current security posture.\n\n[00:00:30] John Smith: Great. From what I can see, we have some gaps in our asset management process.\n\n[00:01:00] Jane Doe: Yes, we're missing about 15% of our assets in the inventory. This creates risks for patch management.\n\n[00:01:30] John Smith: What's our timeline for addressing this?\n\n[00:01:45] Jane Doe: I think we can implement automated discovery within 90 days if we get approval for the tooling.\n\n[00:02:00] John Smith: That sounds reasonable. Let's document this as a high-priority finding.\n\n[00:02:15] Jane Doe: Agreed. I'll add it to our findings report.\nEOF\n    \n    log_success "Created test files in $TEST_DATA_DIR/"\n}\n\n# Upload test documents\nupload_test_documents() {\n    local admin_token="$1"\n    log_info "Uploading test documents to engagements"\n    \n    # Get analyst token for document uploads\n    local analyst_token\n    analyst_response=$(curl -s -X POST "$API_BASE_URL/api/auth/login" \\\n        -H "Content-Type: application/json" \\\n        -d '{\n            "email": "uat.analyst@staging.local",\n            "password": "UAT_Test_Pass123!"\n        }')\n    \n    if echo "$analyst_response" | jq -e '.token' >/dev/null 2>&1; then\n        analyst_token=$(echo "$analyst_response" | jq -r '.token')\n    else\n        log_warning "Cannot get analyst token - skipping document uploads"\n        return 0\n    fi\n    \n    # Upload documents to eng-test-001\n    if [[ -f "$TEST_DATA_DIR/sample-security-policy.md" ]]; then\n        local upload_response\n        upload_response=$(curl -s -X POST "$API_BASE_URL/api/documents" \\\n            -H "Authorization: Bearer $analyst_token" \\\n            -F "file=@$TEST_DATA_DIR/sample-security-policy.md" \\\n            -F "engagement_id=eng-test-001" \\\n            -F "document_type=policy" \\\n            -F "title=Sample Security Policy")\n        \n        if echo "$upload_response" | jq -e '.id' >/dev/null 2>&1; then\n            log_success "Uploaded security policy document"\n        else\n            log_warning "Failed to upload security policy document"\n        fi\n    fi\n    \n    # Create synthetic document entries\n    local documents=(\n        '{\n            "title": "Network Security Policy",\n            "type": "policy",\n            "engagement_id": "eng-test-001",\n            "content": "Network access controls and monitoring requirements...",\n            "metadata": {\n                "author": "Security Team",\n                "version": "2.1",\n                "created_date": "'$(date -d '-60 days' +%Y-%m-%d)'"\n            }\n        }'\n        '{\n            "title": "Incident Response Plan",\n            "type": "procedure",\n            "engagement_id": "eng-test-001",\n            "content": "Step-by-step incident response procedures and escalation matrix...",\n            "metadata": {\n                "author": "IR Team",\n                "version": "1.5",\n                "created_date": "'$(date -d '-30 days' +%Y-%m-%d)'"\n            }\n        }'\n    )\n    \n    for doc_data in "${documents[@]}"; do\n        local doc_title\n        doc_title=$(echo "$doc_data" | jq -r '.title')\n        \n        local response\n        response=$(curl -s -X POST "$API_BASE_URL/api/documents/synthetic" \\\n            -H "Authorization: Bearer $analyst_token" \\\n            -H "Content-Type: application/json" \\\n            -d "$doc_data")\n        \n        if echo "$response" | jq -e '.id' >/dev/null 2>&1; then\n            log_success "Created synthetic document: $doc_title"\n        else\n            log_warning "Failed to create synthetic document: $doc_title"\n        fi\n    done\n}\n\n# Create sample assessment data\ncreate_assessment_data() {\n    local admin_token="$1"\n    log_info "Creating sample assessment data"\n    \n    # Create assessment templates\n    local templates=(\n        '{\n            "id": "template-nist-basic",\n            "name": "NIST CSF Basic Assessment",\n            "framework": "nist-csf",\n            "questions": [\n                {\n                    "id": "nist-id-am-1",\n                    "category": "identify",\n                    "subcategory": "ID.AM-1",\n                    "question": "Are physical devices and systems within the organization inventoried?",\n                    "weight": 1.0\n                },\n                {\n                    "id": "nist-pr-ac-1",\n                    "category": "protect",\n                    "subcategory": "PR.AC-1",\n                    "question": "Are identities and credentials managed for authorized devices and users?",\n                    "weight": 1.2\n                }\n            ]\n        }'\n    )\n    \n    for template_data in "${templates[@]}"; do\n        local template_id\n        template_id=$(echo "$template_data" | jq -r '.id')\n        \n        local response\n        response=$(curl -s -X POST "$API_BASE_URL/api/assessment-templates" \\\n            -H "Authorization: Bearer $admin_token" \\\n            -H "Content-Type: application/json" \\\n            -d "$template_data")\n        \n        if echo "$response" | jq -e '.id' >/dev/null 2>&1; then\n            log_success "Created assessment template: $template_id"\n        else\n            log_warning "Failed to create assessment template: $template_id"\n        fi\n    done\n}\n\n# Verify test data setup\nverify_test_data() {\n    local admin_token="$1"\n    log_info "Verifying test data setup"\n    \n    local verification_passed=true\n    \n    # Check users\n    local users_response\n    users_response=$(curl -s -H "Authorization: Bearer $admin_token" \\\n        "$API_BASE_URL/api/admin/users")\n    \n    local user_count\n    user_count=$(echo "$users_response" | jq '. | length')\n    \n    if [[ $user_count -ge 3 ]]; then\n        log_success "User creation verified ($user_count users found)"\n    else\n        log_error "User verification failed (only $user_count users found)"\n        verification_passed=false\n    fi\n    \n    # Check engagements\n    local engagements_response\n    engagements_response=$(curl -s -H "Authorization: Bearer $admin_token" \\\n        "$API_BASE_URL/api/engagements")\n    \n    local engagement_count\n    engagement_count=$(echo "$engagements_response" | jq '. | length')\n    \n    if [[ $engagement_count -ge 2 ]]; then\n        log_success "Engagement creation verified ($engagement_count engagements found)"\n    else\n        log_error "Engagement verification failed (only $engagement_count engagements found)"\n        verification_passed=false\n    fi\n    \n    if [[ "$verification_passed" == "true" ]]; then\n        log_success "✅ UAT test data setup verification passed"\n        return 0\n    else\n        log_error "❌ UAT test data setup verification failed"\n        return 1\n    fi\n}\n\n# Main execution\nmain() {\n    echo "🛠️ UAT Test Data Setup"\n    echo "====================="\n    echo "API: $API_BASE_URL"\n    echo "Mode: $UAT_MODE"\n    echo\n    \n    check_prerequisites\n    \n    local admin_token\n    if ! admin_token=$(get_admin_token); then\n        exit 1\n    fi\n    \n    create_test_users "$admin_token"\n    create_test_engagements "$admin_token"\n    create_test_files\n    upload_test_documents "$admin_token"\n    create_assessment_data "$admin_token"\n    \n    if verify_test_data "$admin_token"; then\n        echo\n        log_success "🎉 UAT test data setup completed successfully!"\n        echo\n        echo "📋 Test Users Created:"\n        echo "  - uat.admin@staging.local (Admin - can access both engagements)"\n        echo "  - uat.analyst@staging.local (Analyst - can access eng-test-001)"\n        echo "  - uat.viewer@staging.local (Viewer - can access eng-test-002)"\n        echo\n        echo "📁 Test Engagements:"\n        echo "  - eng-test-001 (Primary testing engagement with full features)"\n        echo "  - eng-test-002 (Secondary engagement for ABAC testing)"\n        echo\n        echo "📄 Test Files Created:"\n        echo "  - $TEST_DATA_DIR/sample-security-policy.md"\n        echo "  - $TEST_DATA_DIR/sample-assessment-results.json"\n        echo "  - $TEST_DATA_DIR/sample-meeting-transcript.txt"\n        echo\n        echo "🚀 Ready for UAT execution!"\n        echo "   Run: ./scripts/run_uat_tests.sh"\n    else\n        log_error "❌ Test data setup failed verification"\n        exit 1\n    fi\n}\n\n# Check if script is being sourced or executed\nif [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then\n    main "$@"\nfi"}]