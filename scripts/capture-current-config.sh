#!/bin/bash

# Current App Service Configuration Capture Script
# Documents existing configuration that should be preserved
# Auto-generated by AppServiceConfigurator Agent

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="${SCRIPT_DIR}/../logs/agents/appservice-configurator.log"
CONFIG_BACKUP_FILE="${SCRIPT_DIR}/../logs/agents/appservice-config-backup-$(date +%Y%m%d-%H%M%S).json"
RESOURCE_GROUP="rg-cybermat-prd"
WEB_APP_NAME="web-cybermat-prd"

# Logging function
log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${timestamp} - $1" | tee -a "$LOG_FILE"
}

# Capture current configuration
capture_current_config() {
    log "=== CAPTURING CURRENT PRODUCTION APP SERVICE CONFIGURATION ==="
    
    log "Getting complete web app configuration..."
    local full_config=$(az webapp config show \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --output json)
    
    log "Getting all app settings..."
    local app_settings=$(az webapp config appsettings list \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --output json)
    
    log "Getting connection strings..."
    local connection_strings=$(az webapp config connection-string list \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --output json 2>/dev/null || echo '[]')
    
    log "Getting deployment source configuration..."
    local deployment_source=$(az webapp deployment source show \
        --resource-group "$RESOURCE_GROUP" \
        --name "$WEB_APP_NAME" \
        --output json 2>/dev/null || echo '{}')
    
    # Create comprehensive backup
    local backup_data=$(cat <<EOF
{
  "captureTimestamp": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
  "resourceGroup": "$RESOURCE_GROUP",
  "webAppName": "$WEB_APP_NAME",
  "fullConfiguration": $full_config,
  "appSettings": $app_settings,
  "connectionStrings": $connection_strings,
  "deploymentSource": $deployment_source,
  "criticalSettings": {
    "linuxFxVersion": "$(echo "$full_config" | jq -r '.linuxFxVersion // "Not set"')",
    "appCommandLine": "$(echo "$full_config" | jq -r '.appCommandLine // "Not set"')",
    "alwaysOn": "$(echo "$full_config" | jq -r '.alwaysOn // false')",
    "http20Enabled": "$(echo "$full_config" | jq -r '.http20Enabled // false')",
    "minTlsVersion": "$(echo "$full_config" | jq -r '.minTlsVersion // "Not set"')",
    "ftpsState": "$(echo "$full_config" | jq -r '.ftpsState // "Not set"')",
    "state": "$(echo "$full_config" | jq -r '.state // "Unknown"')"
  }
}
EOF
)
    
    # Save backup to file
    echo "$backup_data" > "$CONFIG_BACKUP_FILE"
    log "Configuration backup saved to: $CONFIG_BACKUP_FILE"
    
    # Log critical current settings
    log "=== CURRENT CRITICAL CONFIGURATION SETTINGS ==="
    echo "$backup_data" | jq '.criticalSettings' | tee -a "$LOG_FILE"
    
    log "=== CURRENT ENVIRONMENT VARIABLES TO PRESERVE ==="
    echo "$app_settings" | jq -r '.[] | select(.name | test("^(PORT|WEBSITES_PORT|NODE_ENV|WEBSITE_NODE_DEFAULT_VERSION|NEXT_TELEMETRY_DISABLED|SCM_DO_BUILD_DURING_DEPLOYMENT|NEXT_PUBLIC_API_BASE_URL|WEBSITE_HTTPLOGGING_RETENTION_DAYS)$")) | "\(.name)=\(.value)"' | tee -a "$LOG_FILE"
    
    return 0
}

# Document configuration recommendations
document_preservation_notes() {
    log "=== CONFIGURATION PRESERVATION NOTES ==="
    
    cat <<EOF | tee -a "$LOG_FILE"

CRITICAL SETTINGS TO PRESERVE:
==============================

1. Runtime Configuration:
   - Linux FX Version: Should remain "NODE|20-lts"
   - App Command Line: Currently using Next.js standalone server

2. Required Environment Variables:
   - PORT=8080 (App Service port binding)
   - WEBSITES_PORT=8080 (Azure-specific port setting)
   - NODE_ENV=production (Production environment)
   - WEBSITE_NODE_DEFAULT_VERSION=20-lts (Node.js version)
   - NEXT_TELEMETRY_DISABLED=1 (Disable Next.js telemetry)
   - SCM_DO_BUILD_DURING_DEPLOYMENT=false (Disable Kudu build)

3. API Integration:
   - NEXT_PUBLIC_API_BASE_URL: Points to Container Apps API
   - Must maintain connection to ACA backend

4. Security Settings:
   - Min TLS Version: 1.2
   - FTPS State: FtpsOnly
   - HTTP/2.0: Enabled

5. Performance Settings:
   - Always On: Should be enabled for production
   - HTTP Logging: Enabled with retention

BACKUP LOCATION: $CONFIG_BACKUP_FILE

EOF
}

# Main execution
main() {
    log "=========================================="
    log "CAPTURING CURRENT APP SERVICE CONFIGURATION"
    log "=========================================="
    
    capture_current_config
    document_preservation_notes
    
    log "=========================================="
    log "CONFIGURATION CAPTURE COMPLETED"
    log "Backup saved to: $CONFIG_BACKUP_FILE"
    log "=========================================="
}

# Execute main function
main "$@"